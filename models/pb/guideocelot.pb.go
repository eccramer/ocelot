// Code generated by protoc-gen-go. DO NOT EDIT.
// source: guideocelot.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf2 "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CredType int32

const (
	CredType_NIL_CT CredType = 0
	CredType_VCS    CredType = 1
	CredType_REPO   CredType = 2
	CredType_K8S    CredType = 3
	CredType_SSH    CredType = 5
)

var CredType_name = map[int32]string{
	0: "NIL_CT",
	1: "VCS",
	2: "REPO",
	3: "K8S",
	5: "SSH",
}
var CredType_value = map[string]int32{
	"NIL_CT": 0,
	"VCS":    1,
	"REPO":   2,
	"K8S":    3,
	"SSH":    5,
}

func (x CredType) String() string {
	return proto.EnumName(CredType_name, int32(x))
}
func (CredType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type SubCredType int32

const (
	SubCredType_NIL_SCT SubCredType = 0
	// BITBUCKET is a child of VCS
	SubCredType_BITBUCKET SubCredType = 1
	// GITHUB is a child of VCS
	SubCredType_GITHUB SubCredType = 2
	// NEXUS is a child of REPO
	SubCredType_NEXUS SubCredType = 3
	// MAVEN is a child of REPO
	SubCredType_MAVEN SubCredType = 4
	// DOCKER is a child of REPO
	SubCredType_DOCKER SubCredType = 5
	// KUBECONF is a child of K8S
	SubCredType_KUBECONF SubCredType = 6
	// SSHKEY is a child of SSH
	SubCredType_SSHKEY SubCredType = 8
)

var SubCredType_name = map[int32]string{
	0: "NIL_SCT",
	1: "BITBUCKET",
	2: "GITHUB",
	3: "NEXUS",
	4: "MAVEN",
	5: "DOCKER",
	6: "KUBECONF",
	8: "SSHKEY",
}
var SubCredType_value = map[string]int32{
	"NIL_SCT":   0,
	"BITBUCKET": 1,
	"GITHUB":    2,
	"NEXUS":     3,
	"MAVEN":     4,
	"DOCKER":    5,
	"KUBECONF":  6,
	"SSHKEY":    8,
}

func (x SubCredType) String() string {
	return proto.EnumName(SubCredType_name, int32(x))
}
func (SubCredType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type BuildReq struct {
	// acctRepo is the ocelot account to which the creds are uploaded and the repository you wish to operate on, in the form account/repo
	AcctRepo string `protobuf:"bytes,1,opt,name=acctRepo" json:"acctRepo,omitempty"`
	// hash is the git hash to trigger.
	Hash string `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
	// branch is the branch that corresponds to the git hash. if the git hash has never been built by ocelot, this field is required.
	Branch string `protobuf:"bytes,3,opt,name=branch" json:"branch,omitempty"`
}

func (m *BuildReq) Reset()                    { *m = BuildReq{} }
func (m *BuildReq) String() string            { return proto.CompactTextString(m) }
func (*BuildReq) ProtoMessage()               {}
func (*BuildReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *BuildReq) GetAcctRepo() string {
	if m != nil {
		return m.AcctRepo
	}
	return ""
}

func (m *BuildReq) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildReq) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

type AllCredsWrapper struct {
	// All repository credentials for integrations
	// @inject_tag: yaml:"repoCreds"
	RepoCreds *RepoCredWrapper `protobuf:"bytes,1,opt,name=repoCreds" json:"repoCreds,omitempty" yaml:"repoCreds"`
	// All VCS credentials for building
	// @inject_tag: yaml:"vcsCreds"
	VcsCreds *CredWrapper `protobuf:"bytes,3,opt,name=vcsCreds" json:"vcsCreds,omitempty" yaml:"vcsCreds"`
}

func (m *AllCredsWrapper) Reset()                    { *m = AllCredsWrapper{} }
func (m *AllCredsWrapper) String() string            { return proto.CompactTextString(m) }
func (*AllCredsWrapper) ProtoMessage()               {}
func (*AllCredsWrapper) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *AllCredsWrapper) GetRepoCreds() *RepoCredWrapper {
	if m != nil {
		return m.RepoCreds
	}
	return nil
}

func (m *AllCredsWrapper) GetVcsCreds() *CredWrapper {
	if m != nil {
		return m.VcsCreds
	}
	return nil
}

// just a container for a list of VCSCreds
type CredWrapper struct {
	Vcs []*VCSCreds `protobuf:"bytes,2,rep,name=vcs" json:"vcs,omitempty"`
}

func (m *CredWrapper) Reset()                    { *m = CredWrapper{} }
func (m *CredWrapper) String() string            { return proto.CompactTextString(m) }
func (*CredWrapper) ProtoMessage()               {}
func (*CredWrapper) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *CredWrapper) GetVcs() []*VCSCreds {
	if m != nil {
		return m.Vcs
	}
	return nil
}

type SSHKeyWrapper struct {
	// account name to associate ssh key with
	AcctName string `protobuf:"bytes,1,opt,name=acctName" json:"acctName,omitempty"`
	// the contents of the private key
	PrivateKey []byte `protobuf:"bytes,2,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	// There is only one subType taht is valid for SSHKeyWrapper, and it is SSHKEY
	SubType SubCredType `protobuf:"varint,10,opt,name=subType,enum=models.SubCredType" json:"subType,omitempty"`
	// identifier is the unique identifier for when an ssh key is not associated with a VCS account.
	Identifier string `protobuf:"bytes,11,opt,name=identifier" json:"identifier,omitempty"`
}

func (m *SSHKeyWrapper) Reset()                    { *m = SSHKeyWrapper{} }
func (m *SSHKeyWrapper) String() string            { return proto.CompactTextString(m) }
func (*SSHKeyWrapper) ProtoMessage()               {}
func (*SSHKeyWrapper) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *SSHKeyWrapper) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *SSHKeyWrapper) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *SSHKeyWrapper) GetSubType() SubCredType {
	if m != nil {
		return m.SubType
	}
	return SubCredType_NIL_SCT
}

func (m *SSHKeyWrapper) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

type SSHWrap struct {
	Keys []*SSHKeyWrapper `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *SSHWrap) Reset()                    { *m = SSHWrap{} }
func (m *SSHWrap) String() string            { return proto.CompactTextString(m) }
func (*SSHWrap) ProtoMessage()               {}
func (*SSHWrap) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *SSHWrap) GetKeys() []*SSHKeyWrapper {
	if m != nil {
		return m.Keys
	}
	return nil
}

type VCSCreds struct {
	// clientId is generated by creating an oAuth consumer in bitbucket. it is required to generate tokens.
	// @inject_tag: yaml:"clientId"
	ClientId string `protobuf:"bytes,1,opt,name=clientId" json:"clientId,omitempty" yaml:"clientId"`
	// clientSecret is generated by creating an oAuth consumer in bitbucket. it is required to generate tokens.
	// @inject_tag: yaml:"clientSecret"
	ClientSecret string `protobuf:"bytes,2,opt,name=clientSecret" json:"clientSecret,omitempty" yaml:"clientSecret"`
	// identifier is the name the user calls teh credential set
	Identifier string `protobuf:"bytes,8,opt,name=identifier" json:"identifier,omitempty"`
	// tokenUrl is the url at which to retrieve the token
	// @inject_tag: yaml:"tokenURL"
	TokenURL string `protobuf:"bytes,3,opt,name=tokenURL" json:"tokenURL,omitempty" yaml:"tokenURL"`
	// @inject_tag: yaml:"acctName"
	// acctName is the account to associate the VCSCred with. Must be the account name of the owner of the repository they wish to track (ie level11consulting)
	AcctName string `protobuf:"bytes,4,opt,name=acctName" json:"acctName,omitempty" yaml:"acctName"`
	// just a string that says whether or not there is an ssh key on file
	// @inject_tag: yaml:"sshFileLoc"
	SshFileLoc string `protobuf:"bytes,6,opt,name=sshFileLoc" json:"sshFileLoc,omitempty" yaml:"sshFileLoc"`
	// there is only one subtype that is valid for VCS creds at this time, and it is BITBUCKET
	// @inject_tag: yaml:"subType"
	SubType SubCredType `protobuf:"varint,10,opt,name=subType,enum=models.SubCredType" json:"subType,omitempty" yaml:"subType"`
}

func (m *VCSCreds) Reset()                    { *m = VCSCreds{} }
func (m *VCSCreds) String() string            { return proto.CompactTextString(m) }
func (*VCSCreds) ProtoMessage()               {}
func (*VCSCreds) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *VCSCreds) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *VCSCreds) GetClientSecret() string {
	if m != nil {
		return m.ClientSecret
	}
	return ""
}

func (m *VCSCreds) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *VCSCreds) GetTokenURL() string {
	if m != nil {
		return m.TokenURL
	}
	return ""
}

func (m *VCSCreds) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *VCSCreds) GetSshFileLoc() string {
	if m != nil {
		return m.SshFileLoc
	}
	return ""
}

func (m *VCSCreds) GetSubType() SubCredType {
	if m != nil {
		return m.SubType
	}
	return SubCredType_NIL_SCT
}

// container for list of repo creds
type RepoCredWrapper struct {
	Repo []*RepoCreds `protobuf:"bytes,3,rep,name=repo" json:"repo,omitempty"`
}

func (m *RepoCredWrapper) Reset()                    { *m = RepoCredWrapper{} }
func (m *RepoCredWrapper) String() string            { return proto.CompactTextString(m) }
func (*RepoCredWrapper) ProtoMessage()               {}
func (*RepoCredWrapper) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *RepoCredWrapper) GetRepo() []*RepoCreds {
	if m != nil {
		return m.Repo
	}
	return nil
}

type RepoCreds struct {
	// username of repository
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	// password of repository
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	// @inject_tag: yaml:"repoUrl"
	RepoUrl    string `protobuf:"bytes,6,opt,name=repoUrl" json:"repoUrl,omitempty" yaml:"repoUrl"`
	Identifier string `protobuf:"bytes,8,opt,name=identifier" json:"identifier,omitempty"`
	// @inject_tag: yaml:"acctName"
	// account name (same as from vcs)
	AcctName string `protobuf:"bytes,4,opt,name=acctName" json:"acctName,omitempty" yaml:"acctName"`
	// there are two subtypes that are valid for RepoCreds: DOCKER, NEXUS
	// @inject_tag: yaml:"subType"
	SubType SubCredType `protobuf:"varint,10,opt,name=subType,enum=models.SubCredType" json:"subType,omitempty" yaml:"subType"`
}

func (m *RepoCreds) Reset()                    { *m = RepoCreds{} }
func (m *RepoCreds) String() string            { return proto.CompactTextString(m) }
func (*RepoCreds) ProtoMessage()               {}
func (*RepoCreds) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *RepoCreds) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RepoCreds) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RepoCreds) GetRepoUrl() string {
	if m != nil {
		return m.RepoUrl
	}
	return ""
}

func (m *RepoCreds) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *RepoCreds) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *RepoCreds) GetSubType() SubCredType {
	if m != nil {
		return m.SubType
	}
	return SubCredType_NIL_SCT
}

type K8SCreds struct {
	// account name to associate this credential with
	AcctName string `protobuf:"bytes,1,opt,name=acctName" json:"acctName,omitempty"`
	// k8scontents is the contents of the kubeconfig file
	K8SContents string `protobuf:"bytes,2,opt,name=k8sContents" json:"k8sContents,omitempty"`
	// identifier in K8s creds is currently irrelevant, as there can only be one per account
	Identifier string `protobuf:"bytes,3,opt,name=identifier" json:"identifier,omitempty"`
	// there is currently only one subtype for k8SCreds, and it is KUBECONF
	// @inject_tag: yaml:"subType"
	SubType SubCredType `protobuf:"varint,5,opt,name=subType,enum=models.SubCredType" json:"subType,omitempty" yaml:"subType"`
}

func (m *K8SCreds) Reset()                    { *m = K8SCreds{} }
func (m *K8SCreds) String() string            { return proto.CompactTextString(m) }
func (*K8SCreds) ProtoMessage()               {}
func (*K8SCreds) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *K8SCreds) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *K8SCreds) GetK8SContents() string {
	if m != nil {
		return m.K8SContents
	}
	return ""
}

func (m *K8SCreds) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *K8SCreds) GetSubType() SubCredType {
	if m != nil {
		return m.SubType
	}
	return SubCredType_NIL_SCT
}

type K8SCredsWrapper struct {
	K8SCreds []*K8SCreds `protobuf:"bytes,2,rep,name=K8SCreds" json:"K8SCreds,omitempty"`
}

func (m *K8SCredsWrapper) Reset()                    { *m = K8SCredsWrapper{} }
func (m *K8SCredsWrapper) String() string            { return proto.CompactTextString(m) }
func (*K8SCredsWrapper) ProtoMessage()               {}
func (*K8SCredsWrapper) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *K8SCredsWrapper) GetK8SCreds() []*K8SCreds {
	if m != nil {
		return m.K8SCreds
	}
	return nil
}

type StatusQuery struct {
	// hash is the git hash to get status of
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	// acctName is the corresponding account that the hash is attached to
	AcctName string `protobuf:"bytes,2,opt,name=acctName" json:"acctName,omitempty"`
	// repoName is the corresponding repo name that the hash is attached to
	RepoName string `protobuf:"bytes,3,opt,name=repoName" json:"repoName,omitempty"`
	// partialRepo is just the first n letters of repo
	PartialRepo string `protobuf:"bytes,4,opt,name=partialRepo" json:"partialRepo,omitempty"`
}

func (m *StatusQuery) Reset()                    { *m = StatusQuery{} }
func (m *StatusQuery) String() string            { return proto.CompactTextString(m) }
func (*StatusQuery) ProtoMessage()               {}
func (*StatusQuery) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *StatusQuery) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *StatusQuery) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *StatusQuery) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *StatusQuery) GetPartialRepo() string {
	if m != nil {
		return m.PartialRepo
	}
	return ""
}

type BuildQuery struct {
	Hash    string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	BuildId int64  `protobuf:"varint,2,opt,name=buildId" json:"buildId,omitempty"`
}

func (m *BuildQuery) Reset()                    { *m = BuildQuery{} }
func (m *BuildQuery) String() string            { return proto.CompactTextString(m) }
func (*BuildQuery) ProtoMessage()               {}
func (*BuildQuery) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *BuildQuery) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildQuery) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

type Builds struct {
	Builds map[string]*BuildRuntimeInfo `protobuf:"bytes,1,rep,name=builds" json:"builds,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Builds) Reset()                    { *m = Builds{} }
func (m *Builds) String() string            { return proto.CompactTextString(m) }
func (*Builds) ProtoMessage()               {}
func (*Builds) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *Builds) GetBuilds() map[string]*BuildRuntimeInfo {
	if m != nil {
		return m.Builds
	}
	return nil
}

type BuildRuntimeInfo struct {
	// done says whether or not the build has completed
	Done bool `protobuf:"varint,1,opt,name=done" json:"done,omitempty"`
	// ip is the ip of the werker node that is running the build
	Ip string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	// grpcPort is the grpc port of the werker running the build
	GrpcPort string `protobuf:"bytes,3,opt,name=grpcPort" json:"grpcPort,omitempty"`
	// hash is the hash
	Hash     string `protobuf:"bytes,4,opt,name=hash" json:"hash,omitempty"`
	AcctName string `protobuf:"bytes,5,opt,name=acctName" json:"acctName,omitempty"`
	RepoName string `protobuf:"bytes,6,opt,name=repoName" json:"repoName,omitempty"`
	WsPort   string `protobuf:"bytes,7,opt,name=wsPort" json:"wsPort,omitempty"`
}

func (m *BuildRuntimeInfo) Reset()                    { *m = BuildRuntimeInfo{} }
func (m *BuildRuntimeInfo) String() string            { return proto.CompactTextString(m) }
func (*BuildRuntimeInfo) ProtoMessage()               {}
func (*BuildRuntimeInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *BuildRuntimeInfo) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func (m *BuildRuntimeInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *BuildRuntimeInfo) GetGrpcPort() string {
	if m != nil {
		return m.GrpcPort
	}
	return ""
}

func (m *BuildRuntimeInfo) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildRuntimeInfo) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *BuildRuntimeInfo) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *BuildRuntimeInfo) GetWsPort() string {
	if m != nil {
		return m.WsPort
	}
	return ""
}

type LineResponse struct {
	OutputLine string `protobuf:"bytes,1,opt,name=outputLine" json:"outputLine,omitempty"`
}

func (m *LineResponse) Reset()                    { *m = LineResponse{} }
func (m *LineResponse) String() string            { return proto.CompactTextString(m) }
func (*LineResponse) ProtoMessage()               {}
func (*LineResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *LineResponse) GetOutputLine() string {
	if m != nil {
		return m.OutputLine
	}
	return ""
}

type RepoAccount struct {
	Repo    string `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Account string `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	Limit   int32  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
}

func (m *RepoAccount) Reset()                    { *m = RepoAccount{} }
func (m *RepoAccount) String() string            { return proto.CompactTextString(m) }
func (*RepoAccount) ProtoMessage()               {}
func (*RepoAccount) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *RepoAccount) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *RepoAccount) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RepoAccount) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type Status struct {
	BuildSum   *BuildSummary  `protobuf:"bytes,1,opt,name=buildSum" json:"buildSum,omitempty"`
	Stages     []*StageStatus `protobuf:"bytes,2,rep,name=stages" json:"stages,omitempty"`
	IsInConsul bool           `protobuf:"varint,3,opt,name=isInConsul" json:"isInConsul,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *Status) GetBuildSum() *BuildSummary {
	if m != nil {
		return m.BuildSum
	}
	return nil
}

func (m *Status) GetStages() []*StageStatus {
	if m != nil {
		return m.Stages
	}
	return nil
}

func (m *Status) GetIsInConsul() bool {
	if m != nil {
		return m.IsInConsul
	}
	return false
}

type StageStatus struct {
	StageStatus   string                      `protobuf:"bytes,1,opt,name=StageStatus" json:"StageStatus,omitempty"`
	Error         string                      `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Status        int32                       `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	Messages      []string                    `protobuf:"bytes,4,rep,name=messages" json:"messages,omitempty"`
	StartTime     *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=startTime" json:"startTime,omitempty"`
	StageDuration float64                     `protobuf:"fixed64,6,opt,name=stageDuration" json:"stageDuration,omitempty"`
}

func (m *StageStatus) Reset()                    { *m = StageStatus{} }
func (m *StageStatus) String() string            { return proto.CompactTextString(m) }
func (*StageStatus) ProtoMessage()               {}
func (*StageStatus) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *StageStatus) GetStageStatus() string {
	if m != nil {
		return m.StageStatus
	}
	return ""
}

func (m *StageStatus) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *StageStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *StageStatus) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *StageStatus) GetStartTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *StageStatus) GetStageDuration() float64 {
	if m != nil {
		return m.StageDuration
	}
	return 0
}

type BuildSummary struct {
	Hash          string                      `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Failed        bool                        `protobuf:"varint,2,opt,name=failed" json:"failed,omitempty"`
	BuildTime     *google_protobuf2.Timestamp `protobuf:"bytes,3,opt,name=buildTime" json:"buildTime,omitempty"`
	Account       string                      `protobuf:"bytes,4,opt,name=account" json:"account,omitempty"`
	BuildDuration float64                     `protobuf:"fixed64,5,opt,name=buildDuration" json:"buildDuration,omitempty"`
	Repo          string                      `protobuf:"bytes,6,opt,name=repo" json:"repo,omitempty"`
	Branch        string                      `protobuf:"bytes,7,opt,name=branch" json:"branch,omitempty"`
	BuildId       int64                       `protobuf:"varint,8,opt,name=buildId" json:"buildId,omitempty"`
	QueueTime     *google_protobuf2.Timestamp `protobuf:"bytes,9,opt,name=queueTime" json:"queueTime,omitempty"`
}

func (m *BuildSummary) Reset()                    { *m = BuildSummary{} }
func (m *BuildSummary) String() string            { return proto.CompactTextString(m) }
func (*BuildSummary) ProtoMessage()               {}
func (*BuildSummary) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *BuildSummary) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildSummary) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

func (m *BuildSummary) GetBuildTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.BuildTime
	}
	return nil
}

func (m *BuildSummary) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *BuildSummary) GetBuildDuration() float64 {
	if m != nil {
		return m.BuildDuration
	}
	return 0
}

func (m *BuildSummary) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *BuildSummary) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *BuildSummary) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

func (m *BuildSummary) GetQueueTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.QueueTime
	}
	return nil
}

type Summaries struct {
	Sums []*BuildSummary `protobuf:"bytes,1,rep,name=sums" json:"sums,omitempty"`
}

func (m *Summaries) Reset()                    { *m = Summaries{} }
func (m *Summaries) String() string            { return proto.CompactTextString(m) }
func (*Summaries) ProtoMessage()               {}
func (*Summaries) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *Summaries) GetSums() []*BuildSummary {
	if m != nil {
		return m.Sums
	}
	return nil
}

type PollRequest struct {
	Account      string                      `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Repo         string                      `protobuf:"bytes,2,opt,name=repo" json:"repo,omitempty"`
	Cron         string                      `protobuf:"bytes,4,opt,name=cron" json:"cron,omitempty"`
	Branches     string                      `protobuf:"bytes,5,opt,name=branches" json:"branches,omitempty"`
	LastCronTime *google_protobuf2.Timestamp `protobuf:"bytes,6,opt,name=lastCronTime" json:"lastCronTime,omitempty"`
	LastHashes   map[string]string           `protobuf:"bytes,7,rep,name=lastHashes" json:"lastHashes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PollRequest) Reset()                    { *m = PollRequest{} }
func (m *PollRequest) String() string            { return proto.CompactTextString(m) }
func (*PollRequest) ProtoMessage()               {}
func (*PollRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func (m *PollRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *PollRequest) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *PollRequest) GetCron() string {
	if m != nil {
		return m.Cron
	}
	return ""
}

func (m *PollRequest) GetBranches() string {
	if m != nil {
		return m.Branches
	}
	return ""
}

func (m *PollRequest) GetLastCronTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.LastCronTime
	}
	return nil
}

func (m *PollRequest) GetLastHashes() map[string]string {
	if m != nil {
		return m.LastHashes
	}
	return nil
}

type Polls struct {
	Polls []*PollRequest `protobuf:"bytes,1,rep,name=polls" json:"polls,omitempty"`
}

func (m *Polls) Reset()                    { *m = Polls{} }
func (m *Polls) String() string            { return proto.CompactTextString(m) }
func (*Polls) ProtoMessage()               {}
func (*Polls) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *Polls) GetPolls() []*PollRequest {
	if m != nil {
		return m.Polls
	}
	return nil
}

type Exists struct {
	Exists bool `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
}

func (m *Exists) Reset()                    { *m = Exists{} }
func (m *Exists) String() string            { return proto.CompactTextString(m) }
func (*Exists) ProtoMessage()               {}
func (*Exists) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

func (m *Exists) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

type AcctRepo struct {
	Account string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Repo    string `protobuf:"bytes,2,opt,name=repo" json:"repo,omitempty"`
}

func (m *AcctRepo) Reset()                    { *m = AcctRepo{} }
func (m *AcctRepo) String() string            { return proto.CompactTextString(m) }
func (*AcctRepo) ProtoMessage()               {}
func (*AcctRepo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *AcctRepo) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *AcctRepo) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

type AcctRepos struct {
	AcctRepos []*AcctRepo `protobuf:"bytes,1,rep,name=acctRepos" json:"acctRepos,omitempty"`
}

func (m *AcctRepos) Reset()                    { *m = AcctRepos{} }
func (m *AcctRepos) String() string            { return proto.CompactTextString(m) }
func (*AcctRepos) ProtoMessage()               {}
func (*AcctRepos) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

func (m *AcctRepos) GetAcctRepos() []*AcctRepo {
	if m != nil {
		return m.AcctRepos
	}
	return nil
}

func init() {
	proto.RegisterType((*BuildReq)(nil), "models.BuildReq")
	proto.RegisterType((*AllCredsWrapper)(nil), "models.AllCredsWrapper")
	proto.RegisterType((*CredWrapper)(nil), "models.CredWrapper")
	proto.RegisterType((*SSHKeyWrapper)(nil), "models.SSHKeyWrapper")
	proto.RegisterType((*SSHWrap)(nil), "models.SSHWrap")
	proto.RegisterType((*VCSCreds)(nil), "models.VCSCreds")
	proto.RegisterType((*RepoCredWrapper)(nil), "models.RepoCredWrapper")
	proto.RegisterType((*RepoCreds)(nil), "models.RepoCreds")
	proto.RegisterType((*K8SCreds)(nil), "models.K8SCreds")
	proto.RegisterType((*K8SCredsWrapper)(nil), "models.K8SCredsWrapper")
	proto.RegisterType((*StatusQuery)(nil), "models.StatusQuery")
	proto.RegisterType((*BuildQuery)(nil), "models.BuildQuery")
	proto.RegisterType((*Builds)(nil), "models.Builds")
	proto.RegisterType((*BuildRuntimeInfo)(nil), "models.BuildRuntimeInfo")
	proto.RegisterType((*LineResponse)(nil), "models.LineResponse")
	proto.RegisterType((*RepoAccount)(nil), "models.RepoAccount")
	proto.RegisterType((*Status)(nil), "models.Status")
	proto.RegisterType((*StageStatus)(nil), "models.StageStatus")
	proto.RegisterType((*BuildSummary)(nil), "models.BuildSummary")
	proto.RegisterType((*Summaries)(nil), "models.Summaries")
	proto.RegisterType((*PollRequest)(nil), "models.PollRequest")
	proto.RegisterType((*Polls)(nil), "models.Polls")
	proto.RegisterType((*Exists)(nil), "models.Exists")
	proto.RegisterType((*AcctRepo)(nil), "models.AcctRepo")
	proto.RegisterType((*AcctRepos)(nil), "models.AcctRepos")
	proto.RegisterEnum("models.CredType", CredType_name, CredType_value)
	proto.RegisterEnum("models.SubCredType", SubCredType_name, SubCredType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GuideOcelot service

type GuideOcelotClient interface {
	GetVCSCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*CredWrapper, error)
	GetVCSCred(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*VCSCreds, error)
	SetVCSCreds(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	UpdateVCSCreds(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	//    account,identifier,cred_sub_type
	VCSCredExists(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*Exists, error)
	CheckConn(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	SetVCSPrivateKey(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetRepoCred(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*RepoCreds, error)
	UpdateRepoCreds(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	RepoCredExists(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*Exists, error)
	GetK8SCred(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*K8SCreds, error)
	UpdateK8SCreds(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	K8SCredExists(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*Exists, error)
	UpdateSSHCreds(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetSSHCred(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*SSHKeyWrapper, error)
	SSHCredExists(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*Exists, error)
	SetSSHCreds(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetSSHCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*SSHWrap, error)
	GetRepoCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*RepoCredWrapper, error)
	SetRepoCreds(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	SetK8SCreds(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetK8SCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*K8SCredsWrapper, error)
	GetAllCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*AllCredsWrapper, error)
	BuildRuntime(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (*Builds, error)
	Logs(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (GuideOcelot_LogsClient, error)
	LastFewSummaries(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*Summaries, error)
	GetStatus(ctx context.Context, in *StatusQuery, opts ...grpc.CallOption) (*Status, error)
	WatchRepo(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	BuildRepoAndHash(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (GuideOcelot_BuildRepoAndHashClient, error)
	PollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	DeletePollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	ListPolledRepos(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Polls, error)
	FindWerker(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (*BuildRuntimeInfo, error)
	GetTrackedRepos(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*AcctRepos, error)
}

type guideOcelotClient struct {
	cc *grpc.ClientConn
}

func NewGuideOcelotClient(cc *grpc.ClientConn) GuideOcelotClient {
	return &guideOcelotClient{cc}
}

func (c *guideOcelotClient) GetVCSCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*CredWrapper, error) {
	out := new(CredWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetVCSCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetVCSCred(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*VCSCreds, error) {
	out := new(VCSCreds)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetVCSCred", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetVCSCreds(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetVCSCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) UpdateVCSCreds(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/UpdateVCSCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) VCSCredExists(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/VCSCredExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) CheckConn(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/CheckConn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetVCSPrivateKey(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetVCSPrivateKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetRepoCred(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*RepoCreds, error) {
	out := new(RepoCreds)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetRepoCred", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) UpdateRepoCreds(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/UpdateRepoCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) RepoCredExists(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/RepoCredExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetK8SCred(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*K8SCreds, error) {
	out := new(K8SCreds)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetK8SCred", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) UpdateK8SCreds(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/UpdateK8SCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) K8SCredExists(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/K8SCredExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) UpdateSSHCreds(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/UpdateSSHCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetSSHCred(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*SSHKeyWrapper, error) {
	out := new(SSHKeyWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetSSHCred", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SSHCredExists(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SSHCredExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetSSHCreds(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetSSHCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetSSHCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*SSHWrap, error) {
	out := new(SSHWrap)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetSSHCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetRepoCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*RepoCredWrapper, error) {
	out := new(RepoCredWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetRepoCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetRepoCreds(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetRepoCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetK8SCreds(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetK8SCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetK8SCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*K8SCredsWrapper, error) {
	out := new(K8SCredsWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetK8SCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetAllCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*AllCredsWrapper, error) {
	out := new(AllCredsWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetAllCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) BuildRuntime(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (*Builds, error) {
	out := new(Builds)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/BuildRuntime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) Logs(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (GuideOcelot_LogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GuideOcelot_serviceDesc.Streams[0], c.cc, "/models.GuideOcelot/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &guideOcelotLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GuideOcelot_LogsClient interface {
	Recv() (*LineResponse, error)
	grpc.ClientStream
}

type guideOcelotLogsClient struct {
	grpc.ClientStream
}

func (x *guideOcelotLogsClient) Recv() (*LineResponse, error) {
	m := new(LineResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *guideOcelotClient) LastFewSummaries(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*Summaries, error) {
	out := new(Summaries)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/LastFewSummaries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetStatus(ctx context.Context, in *StatusQuery, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) WatchRepo(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/WatchRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) BuildRepoAndHash(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (GuideOcelot_BuildRepoAndHashClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GuideOcelot_serviceDesc.Streams[1], c.cc, "/models.GuideOcelot/BuildRepoAndHash", opts...)
	if err != nil {
		return nil, err
	}
	x := &guideOcelotBuildRepoAndHashClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GuideOcelot_BuildRepoAndHashClient interface {
	Recv() (*LineResponse, error)
	grpc.ClientStream
}

type guideOcelotBuildRepoAndHashClient struct {
	grpc.ClientStream
}

func (x *guideOcelotBuildRepoAndHashClient) Recv() (*LineResponse, error) {
	m := new(LineResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *guideOcelotClient) PollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/PollRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) DeletePollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/DeletePollRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) ListPolledRepos(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Polls, error) {
	out := new(Polls)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/ListPolledRepos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) FindWerker(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (*BuildRuntimeInfo, error) {
	out := new(BuildRuntimeInfo)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/FindWerker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetTrackedRepos(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*AcctRepos, error) {
	out := new(AcctRepos)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetTrackedRepos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GuideOcelot service

type GuideOcelotServer interface {
	GetVCSCreds(context.Context, *google_protobuf.Empty) (*CredWrapper, error)
	GetVCSCred(context.Context, *VCSCreds) (*VCSCreds, error)
	SetVCSCreds(context.Context, *VCSCreds) (*google_protobuf.Empty, error)
	UpdateVCSCreds(context.Context, *VCSCreds) (*google_protobuf.Empty, error)
	//    account,identifier,cred_sub_type
	VCSCredExists(context.Context, *VCSCreds) (*Exists, error)
	CheckConn(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
	SetVCSPrivateKey(context.Context, *SSHKeyWrapper) (*google_protobuf.Empty, error)
	GetRepoCred(context.Context, *RepoCreds) (*RepoCreds, error)
	UpdateRepoCreds(context.Context, *RepoCreds) (*google_protobuf.Empty, error)
	RepoCredExists(context.Context, *RepoCreds) (*Exists, error)
	GetK8SCred(context.Context, *K8SCreds) (*K8SCreds, error)
	UpdateK8SCreds(context.Context, *K8SCreds) (*google_protobuf.Empty, error)
	K8SCredExists(context.Context, *K8SCreds) (*Exists, error)
	UpdateSSHCreds(context.Context, *SSHKeyWrapper) (*google_protobuf.Empty, error)
	GetSSHCred(context.Context, *SSHKeyWrapper) (*SSHKeyWrapper, error)
	SSHCredExists(context.Context, *SSHKeyWrapper) (*Exists, error)
	SetSSHCreds(context.Context, *SSHKeyWrapper) (*google_protobuf.Empty, error)
	GetSSHCreds(context.Context, *google_protobuf.Empty) (*SSHWrap, error)
	GetRepoCreds(context.Context, *google_protobuf.Empty) (*RepoCredWrapper, error)
	SetRepoCreds(context.Context, *RepoCreds) (*google_protobuf.Empty, error)
	SetK8SCreds(context.Context, *K8SCreds) (*google_protobuf.Empty, error)
	GetK8SCreds(context.Context, *google_protobuf.Empty) (*K8SCredsWrapper, error)
	GetAllCreds(context.Context, *google_protobuf.Empty) (*AllCredsWrapper, error)
	BuildRuntime(context.Context, *BuildQuery) (*Builds, error)
	Logs(*BuildQuery, GuideOcelot_LogsServer) error
	LastFewSummaries(context.Context, *RepoAccount) (*Summaries, error)
	GetStatus(context.Context, *StatusQuery) (*Status, error)
	WatchRepo(context.Context, *RepoAccount) (*google_protobuf.Empty, error)
	BuildRepoAndHash(*BuildReq, GuideOcelot_BuildRepoAndHashServer) error
	PollRepo(context.Context, *PollRequest) (*google_protobuf.Empty, error)
	DeletePollRepo(context.Context, *PollRequest) (*google_protobuf.Empty, error)
	ListPolledRepos(context.Context, *google_protobuf.Empty) (*Polls, error)
	FindWerker(context.Context, *BuildReq) (*BuildRuntimeInfo, error)
	GetTrackedRepos(context.Context, *google_protobuf.Empty) (*AcctRepos, error)
}

func RegisterGuideOcelotServer(s *grpc.Server, srv GuideOcelotServer) {
	s.RegisterService(&_GuideOcelot_serviceDesc, srv)
}

func _GuideOcelot_GetVCSCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetVCSCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetVCSCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetVCSCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetVCSCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCSCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetVCSCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetVCSCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetVCSCred(ctx, req.(*VCSCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetVCSCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCSCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetVCSCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetVCSCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetVCSCreds(ctx, req.(*VCSCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_UpdateVCSCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCSCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).UpdateVCSCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/UpdateVCSCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).UpdateVCSCreds(ctx, req.(*VCSCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_VCSCredExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCSCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).VCSCredExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/VCSCredExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).VCSCredExists(ctx, req.(*VCSCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_CheckConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).CheckConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/CheckConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).CheckConn(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetVCSPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKeyWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetVCSPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetVCSPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetVCSPrivateKey(ctx, req.(*SSHKeyWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetRepoCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetRepoCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetRepoCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetRepoCred(ctx, req.(*RepoCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_UpdateRepoCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).UpdateRepoCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/UpdateRepoCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).UpdateRepoCreds(ctx, req.(*RepoCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_RepoCredExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).RepoCredExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/RepoCredExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).RepoCredExists(ctx, req.(*RepoCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetK8SCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetK8SCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetK8SCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetK8SCred(ctx, req.(*K8SCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_UpdateK8SCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).UpdateK8SCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/UpdateK8SCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).UpdateK8SCreds(ctx, req.(*K8SCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_K8SCredExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).K8SCredExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/K8SCredExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).K8SCredExists(ctx, req.(*K8SCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_UpdateSSHCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKeyWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).UpdateSSHCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/UpdateSSHCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).UpdateSSHCreds(ctx, req.(*SSHKeyWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetSSHCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKeyWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetSSHCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetSSHCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetSSHCred(ctx, req.(*SSHKeyWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SSHCredExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKeyWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SSHCredExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SSHCredExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SSHCredExists(ctx, req.(*SSHKeyWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetSSHCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKeyWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetSSHCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetSSHCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetSSHCreds(ctx, req.(*SSHKeyWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetSSHCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetSSHCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetSSHCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetSSHCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetRepoCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetRepoCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetRepoCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetRepoCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetRepoCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetRepoCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetRepoCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetRepoCreds(ctx, req.(*RepoCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetK8SCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetK8SCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetK8SCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetK8SCreds(ctx, req.(*K8SCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetK8SCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetK8SCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetK8SCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetK8SCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetAllCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetAllCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetAllCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetAllCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_BuildRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).BuildRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/BuildRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).BuildRuntime(ctx, req.(*BuildQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GuideOcelotServer).Logs(m, &guideOcelotLogsServer{stream})
}

type GuideOcelot_LogsServer interface {
	Send(*LineResponse) error
	grpc.ServerStream
}

type guideOcelotLogsServer struct {
	grpc.ServerStream
}

func (x *guideOcelotLogsServer) Send(m *LineResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GuideOcelot_LastFewSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).LastFewSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/LastFewSummaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).LastFewSummaries(ctx, req.(*RepoAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetStatus(ctx, req.(*StatusQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_WatchRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).WatchRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/WatchRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).WatchRepo(ctx, req.(*RepoAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_BuildRepoAndHash_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GuideOcelotServer).BuildRepoAndHash(m, &guideOcelotBuildRepoAndHashServer{stream})
}

type GuideOcelot_BuildRepoAndHashServer interface {
	Send(*LineResponse) error
	grpc.ServerStream
}

type guideOcelotBuildRepoAndHashServer struct {
	grpc.ServerStream
}

func (x *guideOcelotBuildRepoAndHashServer) Send(m *LineResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GuideOcelot_PollRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).PollRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/PollRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).PollRepo(ctx, req.(*PollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_DeletePollRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).DeletePollRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/DeletePollRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).DeletePollRepo(ctx, req.(*PollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_ListPolledRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).ListPolledRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/ListPolledRepos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).ListPolledRepos(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_FindWerker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).FindWerker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/FindWerker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).FindWerker(ctx, req.(*BuildReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetTrackedRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetTrackedRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetTrackedRepos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetTrackedRepos(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _GuideOcelot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "models.GuideOcelot",
	HandlerType: (*GuideOcelotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVCSCreds",
			Handler:    _GuideOcelot_GetVCSCreds_Handler,
		},
		{
			MethodName: "GetVCSCred",
			Handler:    _GuideOcelot_GetVCSCred_Handler,
		},
		{
			MethodName: "SetVCSCreds",
			Handler:    _GuideOcelot_SetVCSCreds_Handler,
		},
		{
			MethodName: "UpdateVCSCreds",
			Handler:    _GuideOcelot_UpdateVCSCreds_Handler,
		},
		{
			MethodName: "VCSCredExists",
			Handler:    _GuideOcelot_VCSCredExists_Handler,
		},
		{
			MethodName: "CheckConn",
			Handler:    _GuideOcelot_CheckConn_Handler,
		},
		{
			MethodName: "SetVCSPrivateKey",
			Handler:    _GuideOcelot_SetVCSPrivateKey_Handler,
		},
		{
			MethodName: "GetRepoCred",
			Handler:    _GuideOcelot_GetRepoCred_Handler,
		},
		{
			MethodName: "UpdateRepoCreds",
			Handler:    _GuideOcelot_UpdateRepoCreds_Handler,
		},
		{
			MethodName: "RepoCredExists",
			Handler:    _GuideOcelot_RepoCredExists_Handler,
		},
		{
			MethodName: "GetK8SCred",
			Handler:    _GuideOcelot_GetK8SCred_Handler,
		},
		{
			MethodName: "UpdateK8SCreds",
			Handler:    _GuideOcelot_UpdateK8SCreds_Handler,
		},
		{
			MethodName: "K8SCredExists",
			Handler:    _GuideOcelot_K8SCredExists_Handler,
		},
		{
			MethodName: "UpdateSSHCreds",
			Handler:    _GuideOcelot_UpdateSSHCreds_Handler,
		},
		{
			MethodName: "GetSSHCred",
			Handler:    _GuideOcelot_GetSSHCred_Handler,
		},
		{
			MethodName: "SSHCredExists",
			Handler:    _GuideOcelot_SSHCredExists_Handler,
		},
		{
			MethodName: "SetSSHCreds",
			Handler:    _GuideOcelot_SetSSHCreds_Handler,
		},
		{
			MethodName: "GetSSHCreds",
			Handler:    _GuideOcelot_GetSSHCreds_Handler,
		},
		{
			MethodName: "GetRepoCreds",
			Handler:    _GuideOcelot_GetRepoCreds_Handler,
		},
		{
			MethodName: "SetRepoCreds",
			Handler:    _GuideOcelot_SetRepoCreds_Handler,
		},
		{
			MethodName: "SetK8SCreds",
			Handler:    _GuideOcelot_SetK8SCreds_Handler,
		},
		{
			MethodName: "GetK8SCreds",
			Handler:    _GuideOcelot_GetK8SCreds_Handler,
		},
		{
			MethodName: "GetAllCreds",
			Handler:    _GuideOcelot_GetAllCreds_Handler,
		},
		{
			MethodName: "BuildRuntime",
			Handler:    _GuideOcelot_BuildRuntime_Handler,
		},
		{
			MethodName: "LastFewSummaries",
			Handler:    _GuideOcelot_LastFewSummaries_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _GuideOcelot_GetStatus_Handler,
		},
		{
			MethodName: "WatchRepo",
			Handler:    _GuideOcelot_WatchRepo_Handler,
		},
		{
			MethodName: "PollRepo",
			Handler:    _GuideOcelot_PollRepo_Handler,
		},
		{
			MethodName: "DeletePollRepo",
			Handler:    _GuideOcelot_DeletePollRepo_Handler,
		},
		{
			MethodName: "ListPolledRepos",
			Handler:    _GuideOcelot_ListPolledRepos_Handler,
		},
		{
			MethodName: "FindWerker",
			Handler:    _GuideOcelot_FindWerker_Handler,
		},
		{
			MethodName: "GetTrackedRepos",
			Handler:    _GuideOcelot_GetTrackedRepos_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _GuideOcelot_Logs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BuildRepoAndHash",
			Handler:       _GuideOcelot_BuildRepoAndHash_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "guideocelot.proto",
}

func init() { proto.RegisterFile("guideocelot.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 3651 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x3a, 0x4b, 0x8c, 0x1c, 0x49,
	0x56, 0x93, 0xd5, 0x1f, 0x57, 0x47, 0xb7, 0xdd, 0xe5, 0xb0, 0xf1, 0xf4, 0xd6, 0x7e, 0x08, 0x25,
	0x3b, 0xe0, 0xf1, 0xb4, 0xab, 0xc7, 0x5e, 0x46, 0xf4, 0x7a, 0xb4, 0x30, 0xe9, 0x9e, 0x1e, 0x77,
	0xcb, 0xbd, 0xf6, 0x4c, 0x56, 0x7b, 0x66, 0x19, 0xc1, 0x2e, 0x51, 0x59, 0xaf, 0xaa, 0xd2, 0x95,
	0x95, 0x99, 0xce, 0x88, 0xec, 0x9e, 0xc2, 0x6b, 0xa1, 0x05, 0xb1, 0x0b, 0x12, 0x2b, 0x44, 0x71,
	0x00, 0xed, 0x8a, 0x9f, 0xe0, 0x8a, 0x06, 0xa1, 0xd5, 0x20, 0x84, 0x40, 0x08, 0x38, 0x20, 0xae,
	0x23, 0x21, 0xe0, 0xb0, 0xa7, 0x81, 0x1b, 0x68, 0x39, 0xc0, 0x81, 0x13, 0x7a, 0xf1, 0xc9, 0xca,
	0xaa, 0xea, 0x6a, 0xdb, 0x2d, 0x8e, 0x9c, 0xba, 0xe2, 0xc5, 0xcb, 0x17, 0xef, 0xff, 0x89, 0x68,
	0x72, 0xb1, 0x9b, 0x87, 0x6d, 0x48, 0x02, 0x88, 0x12, 0xd9, 0x48, 0xb3, 0x44, 0x26, 0x74, 0x79,
	0x90, 0xb4, 0x21, 0x12, 0xf5, 0x4f, 0x77, 0x93, 0xa4, 0x1b, 0xc1, 0x96, 0x82, 0xb6, 0xf2, 0xce,
	0x16, 0x0c, 0x52, 0x39, 0xd4, 0x48, 0xf5, 0xcf, 0x98, 0x4d, 0x9e, 0x86, 0x5b, 0x3c, 0x8e, 0x13,
	0xc9, 0x65, 0x98, 0xc4, 0xc2, 0xec, 0xfe, 0xf0, 0xf4, 0xa7, 0x32, 0x1c, 0x80, 0x90, 0x7c, 0x90,
	0x1a, 0x84, 0x4d, 0xf5, 0x27, 0xb8, 0xde, 0x85, 0xf8, 0xba, 0x38, 0xe6, 0xdd, 0x2e, 0x64, 0x5b,
	0x49, 0xaa, 0x48, 0xcc, 0x92, 0x73, 0x7d, 0x52, 0xbd, 0x9d, 0x87, 0x51, 0xdb, 0x87, 0x47, 0xb4,
	0x4e, 0xaa, 0x3c, 0x08, 0xa4, 0x0f, 0x69, 0xb2, 0xe1, 0x30, 0xe7, 0xea, 0x8a, 0x5f, 0xac, 0x29,
	0x25, 0x8b, 0x3d, 0x2e, 0x7a, 0x1b, 0x15, 0x05, 0x57, 0xbf, 0xe9, 0x15, 0xb2, 0xdc, 0xca, 0x78,
	0x1c, 0xf4, 0x36, 0x16, 0x14, 0xd4, 0xac, 0xdc, 0x21, 0x59, 0xf7, 0xa2, 0x68, 0x27, 0x83, 0xb6,
	0x78, 0x2f, 0xe3, 0x69, 0x0a, 0x19, 0x7d, 0x8d, 0xac, 0x64, 0x90, 0x26, 0x0a, 0xa6, 0x68, 0xaf,
	0xde, 0x7c, 0xb1, 0xa1, 0x95, 0xd1, 0xf0, 0xcd, 0x86, 0xc1, 0xf5, 0xc7, 0x98, 0x74, 0x8b, 0x54,
	0x8f, 0x02, 0xa1, 0xbf, 0x5a, 0x50, 0x5f, 0x5d, 0xb2, 0x5f, 0x95, 0xbf, 0x28, 0x90, 0xdc, 0x1b,
	0x64, 0xb5, 0xb4, 0x41, 0x5d, 0xb2, 0x70, 0x14, 0x88, 0x8d, 0x0a, 0x5b, 0xb8, 0xba, 0x7a, 0xb3,
	0x66, 0x3f, 0x7d, 0x77, 0xa7, 0xa9, 0xb0, 0x7d, 0xdc, 0x74, 0xbf, 0xe3, 0x90, 0xf3, 0xcd, 0xe6,
	0xde, 0x5d, 0x18, 0xda, 0xaf, 0x8c, 0x1e, 0xee, 0xf1, 0x01, 0x94, 0xf5, 0x80, 0x6b, 0xfa, 0x39,
	0x42, 0xd2, 0x2c, 0x3c, 0xe2, 0x12, 0xee, 0xc2, 0x50, 0x69, 0x63, 0xcd, 0x2f, 0x41, 0xe8, 0x75,
	0x72, 0x4e, 0xe4, 0xad, 0xc3, 0x61, 0x0a, 0x1b, 0x84, 0x39, 0x57, 0x2f, 0x8c, 0x19, 0x6e, 0xe6,
	0x2d, 0x3c, 0x15, 0xb7, 0x7c, 0x8b, 0x83, 0xe4, 0xc2, 0x36, 0xc4, 0x32, 0xec, 0x84, 0x90, 0x6d,
	0xac, 0xaa, 0xc3, 0x4a, 0x10, 0xf7, 0xc7, 0xc9, 0xb9, 0x66, 0x73, 0x0f, 0x19, 0xa3, 0x2f, 0x93,
	0xc5, 0x3e, 0x0c, 0x51, 0x7b, 0x28, 0xcc, 0x0f, 0x15, 0x64, 0xcb, 0xac, 0xfb, 0x0a, 0xc5, 0xfd,
	0x4f, 0x87, 0x54, 0xad, 0x90, 0x28, 0x4d, 0x10, 0x85, 0x10, 0xcb, 0xfd, 0xb6, 0x95, 0xc6, 0xae,
	0xa9, 0x4b, 0xd6, 0xf4, 0xef, 0x26, 0x04, 0x19, 0x48, 0x63, 0xdd, 0x09, 0xd8, 0x14, 0x8b, 0xd5,
	0x69, 0x16, 0x91, 0xbe, 0x4c, 0xfa, 0x10, 0x3f, 0xf0, 0x0f, 0x8c, 0x1f, 0x14, 0xeb, 0x09, 0x4d,
	0x2e, 0xce, 0x6a, 0x52, 0x88, 0xde, 0x5b, 0x61, 0x04, 0x07, 0x49, 0xb0, 0xb1, 0xac, 0xe9, 0x8e,
	0x21, 0xcf, 0xa9, 0x49, 0x77, 0x9b, 0xac, 0x4f, 0x39, 0x12, 0x7d, 0x89, 0x2c, 0xa2, 0x2b, 0x6d,
	0x2c, 0x28, 0x8d, 0x5d, 0x9c, 0xf6, 0x37, 0xe1, 0xab, 0x6d, 0xf7, 0xef, 0x1d, 0xb2, 0x52, 0xc0,
	0x90, 0xe5, 0x5c, 0x40, 0x16, 0x97, 0x8c, 0x6f, 0xd7, 0xb8, 0x97, 0x72, 0x21, 0x8e, 0x93, 0xac,
	0x6d, 0x54, 0x55, 0xac, 0xe9, 0x06, 0x39, 0x87, 0xd4, 0x1e, 0x64, 0x91, 0x91, 0xc5, 0x2e, 0x9f,
	0x45, 0x81, 0x73, 0x95, 0xf4, 0x9c, 0x4a, 0xf8, 0x2d, 0x87, 0x54, 0xef, 0x6e, 0x8f, 0x0d, 0x3f,
	0xd7, 0x8d, 0x19, 0x59, 0xed, 0x6f, 0x8b, 0x9d, 0x24, 0x96, 0x10, 0x4b, 0x61, 0x84, 0x29, 0x83,
	0xa6, 0xb8, 0x5e, 0x98, 0xe1, 0xba, 0xc4, 0xd9, 0xd2, 0x33, 0x70, 0xf6, 0x53, 0x64, 0xdd, 0x32,
	0x66, 0xcd, 0xb3, 0x39, 0xe6, 0x75, 0x3a, 0x42, 0x2d, 0xdc, 0x2f, 0x30, 0xdc, 0xc7, 0x64, 0xb5,
	0x29, 0xb9, 0xcc, 0xc5, 0x3b, 0x39, 0x64, 0xc3, 0x22, 0x1f, 0x39, 0xa5, 0x7c, 0x54, 0x16, 0xb8,
	0x32, 0x25, 0x70, 0x9d, 0x54, 0xd1, 0x1e, 0x6a, 0xcf, 0x78, 0xa9, 0x5d, 0xa3, 0x32, 0x52, 0x9e,
	0xc9, 0x90, 0x47, 0x2a, 0xf5, 0x69, 0x1b, 0x94, 0x41, 0xee, 0x2d, 0x42, 0x54, 0x96, 0x9c, 0x7f,
	0xf6, 0x06, 0x39, 0xd7, 0x42, 0x8c, 0x7d, 0xed, 0x19, 0x0b, 0xbe, 0x5d, 0xba, 0xbf, 0xe1, 0x90,
	0x65, 0xf5, 0xb1, 0xa0, 0x37, 0xc9, 0xb2, 0x82, 0xda, 0x20, 0xae, 0x5b, 0x79, 0xf5, 0xbe, 0xf9,
	0xb3, 0x1b, 0xcb, 0x6c, 0xe8, 0x1b, 0xcc, 0x7a, 0x93, 0xac, 0x96, 0xc0, 0xb4, 0x46, 0x16, 0xfa,
	0x30, 0x34, 0x47, 0xe3, 0x4f, 0xda, 0x20, 0x4b, 0x47, 0x3c, 0xca, 0xb5, 0xc8, 0xab, 0x37, 0x37,
	0x26, 0x68, 0xfa, 0x79, 0x8c, 0xf5, 0x61, 0x3f, 0xee, 0x24, 0xbe, 0x46, 0xbb, 0x55, 0xd9, 0x76,
	0xdc, 0x8f, 0x1c, 0x52, 0x9b, 0xde, 0x47, 0xb1, 0xda, 0x49, 0xac, 0x7d, 0xa5, 0xea, 0xab, 0xdf,
	0xf4, 0x02, 0xa9, 0x84, 0xa9, 0x51, 0x66, 0x25, 0x4c, 0x51, 0x8d, 0xdd, 0x2c, 0x0d, 0xde, 0x4e,
	0x32, 0x69, 0xd5, 0x68, 0xd7, 0x85, 0x5a, 0x16, 0xe7, 0x98, 0x64, 0xe9, 0x14, 0x93, 0x2c, 0x4f,
	0x99, 0xe4, 0x0a, 0x59, 0x3e, 0x16, 0xea, 0x94, 0x73, 0xba, 0xb4, 0xe8, 0x95, 0xdb, 0x20, 0x6b,
	0x07, 0x61, 0x0c, 0x3e, 0x88, 0x34, 0x89, 0x85, 0x4a, 0x22, 0x49, 0x2e, 0xd3, 0x5c, 0x22, 0xd4,
	0x68, 0xa5, 0x04, 0x71, 0xdf, 0x21, 0xab, 0x68, 0x40, 0x2f, 0x08, 0x92, 0x3c, 0x56, 0x2c, 0x66,
	0xe3, 0xea, 0xa6, 0x7e, 0xa3, 0xe5, 0xb8, 0xde, 0x36, 0x72, 0xda, 0x25, 0xbd, 0x4c, 0x96, 0xa2,
	0x70, 0x10, 0x6a, 0x49, 0x97, 0x7c, 0xbd, 0x70, 0xbf, 0xe5, 0x90, 0x65, 0xed, 0x89, 0xf4, 0x55,
	0x52, 0x55, 0x56, 0x6a, 0xe6, 0x03, 0x53, 0xd4, 0x2e, 0x4f, 0x68, 0xbf, 0x99, 0x0f, 0x06, 0x3c,
	0x1b, 0xfa, 0x05, 0x16, 0x7d, 0x85, 0x2c, 0x0b, 0xc9, 0xbb, 0x60, 0x3d, 0x7e, 0x1c, 0x34, 0x08,
	0xd5, 0x64, 0x7d, 0x83, 0xa2, 0x42, 0x50, 0xec, 0xc7, 0x3b, 0x49, 0x2c, 0xf2, 0x48, 0x31, 0x51,
	0xf5, 0x4b, 0x10, 0xf7, 0x9f, 0x1d, 0x15, 0x13, 0xf6, 0x3b, 0xf4, 0xe3, 0xd2, 0xd2, 0x08, 0x39,
	0x81, 0x71, 0x99, 0x2c, 0x41, 0x96, 0x25, 0x99, 0x91, 0x54, 0x2f, 0x50, 0xd9, 0x42, 0x7f, 0xa2,
	0x05, 0x35, 0x2b, 0x34, 0xd0, 0x00, 0x84, 0x50, 0xec, 0x2e, 0xb2, 0x05, 0x34, 0x90, 0x5d, 0xd3,
	0x6d, 0xb2, 0x22, 0x24, 0xcf, 0xe4, 0x61, 0x68, 0x2c, 0x8b, 0xde, 0xac, 0x5b, 0x93, 0x86, 0x6d,
	0x4d, 0x1a, 0x87, 0xb6, 0x35, 0xf1, 0xc7, 0xc8, 0xf4, 0xf3, 0xe4, 0xbc, 0x92, 0xef, 0xcd, 0x3c,
	0x53, 0x9d, 0x88, 0xb2, 0xbd, 0xe3, 0x4f, 0x02, 0xdd, 0xef, 0x55, 0xc8, 0x5a, 0x59, 0x87, 0x27,
	0x06, 0xdd, 0x15, 0xb2, 0xdc, 0xe1, 0x61, 0x04, 0x3a, 0xe6, 0xaa, 0xbe, 0x59, 0x21, 0x73, 0x4a,
	0xe3, 0x8a, 0xb9, 0x85, 0xa7, 0x33, 0x57, 0x20, 0x97, 0x9d, 0x61, 0x71, 0xd2, 0x19, 0x3e, 0x4f,
	0xce, 0x2b, 0xb4, 0x82, 0xed, 0x25, 0xcd, 0xf6, 0x04, 0xb0, 0x70, 0xb0, 0xe5, 0x92, 0x83, 0x8d,
	0xdb, 0xa4, 0x73, 0xe5, 0x36, 0xa9, 0x9c, 0x32, 0xaa, 0x13, 0x29, 0x03, 0xf9, 0x7f, 0x94, 0x43,
	0x0e, 0x8a, 0xff, 0x95, 0xa7, 0xf3, 0x5f, 0x20, 0xbb, 0xaf, 0x91, 0x15, 0xad, 0xb0, 0x10, 0x04,
	0xbd, 0x4a, 0x16, 0x45, 0x3e, 0xb0, 0xc9, 0xe6, 0x64, 0xd7, 0x54, 0x18, 0xee, 0x87, 0x15, 0xb2,
	0xfa, 0x76, 0x12, 0x45, 0x3e, 0x3c, 0xca, 0x41, 0xc8, 0xb2, 0x1a, 0x9c, 0x49, 0x35, 0x58, 0x01,
	0x2b, 0x25, 0x01, 0x29, 0x59, 0x0c, 0xb2, 0x24, 0xb6, 0x81, 0x8f, 0xbf, 0xd1, 0x77, 0xb4, 0x98,
	0x20, 0x6c, 0xe0, 0xdb, 0x35, 0xfd, 0x49, 0xb2, 0x16, 0x71, 0x21, 0x77, 0xb2, 0x24, 0x56, 0x12,
	0x2e, 0x3f, 0x55, 0xc2, 0x09, 0x7c, 0xba, 0x43, 0x08, 0xae, 0xf7, 0xb8, 0x40, 0xea, 0xe7, 0x94,
	0x74, 0x3f, 0x62, 0xa5, 0x2b, 0x89, 0xd1, 0x38, 0x28, 0xb0, 0x74, 0x4e, 0x2d, 0x7d, 0x56, 0xff,
	0x12, 0x59, 0x9f, 0xda, 0x3e, 0x21, 0xb7, 0x5e, 0x2e, 0xe7, 0xd6, 0x95, 0x72, 0x06, 0xbd, 0x49,
	0x96, 0xf0, 0x24, 0x41, 0x5f, 0x26, 0x4b, 0x29, 0xfe, 0x30, 0x5a, 0xbe, 0x74, 0x02, 0x1f, 0xbe,
	0xc6, 0x70, 0x19, 0x59, 0xde, 0xfd, 0x20, 0x14, 0x52, 0xa0, 0x4b, 0x80, 0xfa, 0x65, 0x92, 0xad,
	0x59, 0xb9, 0xdb, 0xa4, 0xea, 0xd9, 0x8e, 0xfb, 0xb9, 0x6c, 0xe0, 0xbe, 0x4e, 0x56, 0xec, 0x97,
	0x82, 0x36, 0xc8, 0x8a, 0x6d, 0xdc, 0x2d, 0x5f, 0x45, 0x69, 0xb5, 0x58, 0xfe, 0x18, 0xe5, 0xda,
	0xeb, 0xa4, 0x6a, 0x2b, 0x36, 0x25, 0x64, 0xf9, 0xde, 0xfe, 0xc1, 0xd7, 0x76, 0x0e, 0x6b, 0x2f,
	0xd0, 0x73, 0x64, 0xe1, 0xdd, 0x9d, 0x66, 0xcd, 0xa1, 0x55, 0xb2, 0xe8, 0xef, 0xbe, 0x7d, 0xbf,
	0x56, 0x41, 0xd0, 0xdd, 0xed, 0x66, 0x6d, 0x01, 0x7f, 0x34, 0x9b, 0x7b, 0xb5, 0xa5, 0x6b, 0x8f,
	0xc8, 0x6a, 0xa9, 0xe2, 0xd3, 0x55, 0x72, 0x0e, 0xbf, 0x6f, 0x2a, 0x02, 0xe7, 0xc9, 0xca, 0xed,
	0xfd, 0xc3, 0xdb, 0x0f, 0x76, 0xee, 0xee, 0x1e, 0xd6, 0x1c, 0xa4, 0x7d, 0x67, 0xff, 0x70, 0xef,
	0xc1, 0xed, 0x5a, 0x85, 0xae, 0x90, 0xa5, 0x7b, 0xbb, 0x5f, 0x79, 0x80, 0xa4, 0x56, 0xc8, 0xd2,
	0x97, 0xbd, 0x77, 0x77, 0xef, 0xd5, 0x16, 0x11, 0xe3, 0xcd, 0xfb, 0x3b, 0x77, 0x77, 0xfd, 0xda,
	0x12, 0x5d, 0x23, 0xd5, 0xbb, 0x0f, 0x6e, 0xef, 0xee, 0xdc, 0xbf, 0xf7, 0x56, 0x6d, 0x19, 0x77,
	0xb0, 0xd5, 0xdd, 0xfd, 0xe9, 0x5a, 0xf5, 0xe6, 0x27, 0xaf, 0x91, 0xd5, 0x3b, 0x38, 0x5c, 0xdd,
	0x57, 0xc3, 0x15, 0xfd, 0x2b, 0x87, 0xac, 0xde, 0x01, 0x59, 0xb4, 0xbc, 0x57, 0x66, 0x5c, 0x69,
	0x17, 0xe7, 0xab, 0xfa, 0x49, 0xc3, 0x83, 0xfb, 0x0d, 0x67, 0xe4, 0x85, 0xf4, 0xb2, 0x0f, 0x32,
	0xcf, 0x62, 0xc6, 0xa3, 0x88, 0x1d, 0x05, 0x82, 0x05, 0x48, 0xa8, 0xfe, 0x8e, 0x86, 0x0a, 0x05,
	0x7e, 0x77, 0xa7, 0xa9, 0xc1, 0x4c, 0xf6, 0xb8, 0x64, 0x7a, 0xb0, 0x63, 0x3d, 0x2e, 0x18, 0x8f,
	0xdb, 0x2c, 0xe0, 0x31, 0xcb, 0x05, 0xb0, 0x4e, 0x92, 0xb1, 0xa0, 0x07, 0x41, 0x3f, 0x8c, 0xbb,
	0x2c, 0xc9, 0x25, 0x0b, 0x92, 0x36, 0x30, 0x99, 0x30, 0x15, 0xdc, 0x8d, 0x5f, 0xfc, 0xf8, 0x93,
	0xdf, 0xac, 0xac, 0xd3, 0xf3, 0x5b, 0x47, 0x37, 0xb6, 0x14, 0xb1, 0xad, 0xa3, 0x40, 0xd0, 0x1f,
	0x38, 0x84, 0x8c, 0x05, 0xa0, 0x33, 0x93, 0x4a, 0x7d, 0x06, 0xe2, 0xfe, 0xa5, 0x33, 0xf2, 0x7e,
	0xcd, 0xa1, 0x1b, 0x3e, 0xc8, 0x2c, 0x84, 0x23, 0x60, 0x22, 0x8c, 0xbb, 0x11, 0x14, 0x5c, 0xd6,
	0x53, 0xcb, 0xbb, 0x15, 0x87, 0x85, 0x1d, 0x16, 0x4a, 0xa6, 0x5d, 0xad, 0xc1, 0x44, 0xde, 0x92,
	0xc3, 0x14, 0x58, 0x28, 0x18, 0x67, 0x19, 0x3c, 0xca, 0x43, 0xc4, 0x79, 0x84, 0x1d, 0x0e, 0x4b,
	0x79, 0xc6, 0x07, 0x0d, 0x46, 0x7c, 0xe8, 0x40, 0x86, 0xcc, 0xeb, 0xd3, 0xed, 0xe1, 0x4a, 0x48,
	0xd9, 0x03, 0x96, 0xb4, 0x1e, 0x42, 0x20, 0x59, 0x27, 0x84, 0xa8, 0x2d, 0x94, 0x68, 0x3f, 0x46,
	0x5f, 0x9a, 0x10, 0x6d, 0xeb, 0xb1, 0xad, 0xf7, 0x4f, 0xb6, 0x1e, 0x8f, 0xdb, 0xc7, 0x27, 0xf4,
	0xfb, 0x58, 0xbc, 0x4a, 0x36, 0x9b, 0x95, 0x79, 0x8e, 0x15, 0xdd, 0x3f, 0x72, 0x46, 0xde, 0xaf,
	0x38, 0x94, 0x7a, 0xed, 0xb6, 0x92, 0x16, 0xb1, 0x91, 0x2e, 0x8f, 0xea, 0x19, 0xc2, 0x38, 0x8b,
	0xe1, 0xb8, 0xd0, 0x83, 0xde, 0x61, 0x41, 0x12, 0x77, 0xc2, 0xae, 0x49, 0xd3, 0x28, 0x91, 0x31,
	0x9f, 0x32, 0x17, 0x5a, 0x48, 0xd9, 0x2c, 0xc9, 0xe5, 0x99, 0xa4, 0xa6, 0xee, 0xa4, 0x41, 0x6f,
	0x39, 0xd7, 0xe8, 0xdf, 0x55, 0xc8, 0x85, 0x07, 0x69, 0x9b, 0x4b, 0x38, 0x83, 0x8c, 0xdf, 0xaa,
	0x8c, 0xbc, 0x8f, 0x1d, 0xfa, 0xa2, 0x26, 0xc0, 0xf8, 0xb4, 0xa0, 0x7f, 0xe6, 0xec, 0xc6, 0xed,
	0x34, 0x09, 0x63, 0x2d, 0x41, 0x8e, 0x68, 0xe8, 0x70, 0x7c, 0x5a, 0xee, 0x30, 0x36, 0x92, 0x36,
	0xd8, 0x61, 0x2f, 0x14, 0x4c, 0xf4, 0x92, 0x3c, 0x6a, 0xb3, 0x24, 0x8e, 0x86, 0xac, 0x05, 0x2c,
	0xe0, 0x51, 0xa4, 0x3d, 0xa3, 0x27, 0xa1, 0xfc, 0x5d, 0xc9, 0x4b, 0x0e, 0x4f, 0xf5, 0x92, 0xb3,
	0xa8, 0xeb, 0x5a, 0xfd, 0xd9, 0x9c, 0x04, 0xd5, 0xf8, 0x05, 0x72, 0xde, 0x50, 0x34, 0xb9, 0x73,
	0x56, 0x89, 0x17, 0x2c, 0x44, 0x63, 0xb8, 0x2f, 0xd0, 0x2f, 0x91, 0x95, 0x1d, 0xb4, 0xe7, 0x4e,
	0x12, 0xc7, 0x73, 0xb3, 0xc1, 0x3c, 0xdd, 0xbf, 0x40, 0xff, 0xbb, 0x42, 0x6a, 0xda, 0x37, 0xdf,
	0x1e, 0x4f, 0xf6, 0x27, 0x4f, 0xdc, 0x73, 0xa9, 0xfc, 0x69, 0x65, 0xe4, 0xfd, 0x8f, 0x43, 0x3f,
	0xeb, 0x49, 0xc9, 0x83, 0x1e, 0x13, 0xa2, 0xc7, 0xfa, 0x30, 0x44, 0x35, 0xa1, 0x85, 0x4c, 0x43,
	0x5a, 0xff, 0x27, 0xc7, 0xec, 0xa3, 0xa2, 0x02, 0x33, 0x7b, 0xb1, 0xa4, 0xc3, 0x78, 0xac, 0x3e,
	0xe9, 0x84, 0x91, 0x4a, 0x1e, 0x5c, 0x45, 0xb1, 0x29, 0x00, 0xc6, 0x94, 0x6a, 0xef, 0x38, 0x8c,
	0x22, 0x34, 0x24, 0x57, 0x64, 0xa0, 0x8d, 0xc8, 0x48, 0x4b, 0x65, 0x1b, 0x45, 0x91, 0x87, 0x31,
	0x64, 0xda, 0xcf, 0xa3, 0x24, 0x46, 0x27, 0xc1, 0x7d, 0x2c, 0x1a, 0x22, 0x94, 0x49, 0x36, 0x3c,
	0x8b, 0x8d, 0x27, 0x54, 0x70, 0x8a, 0xa1, 0x1b, 0xee, 0xcb, 0xcf, 0x64, 0xe8, 0x2d, 0x21, 0x7a,
	0x68, 0xec, 0xbf, 0xd5, 0x89, 0xdc, 0x4e, 0xe3, 0x74, 0x76, 0x66, 0xaf, 0xcf, 0x82, 0xdc, 0x6f,
	0x3b, 0x23, 0xef, 0x67, 0xe8, 0x8b, 0x99, 0xce, 0xe0, 0x26, 0x0f, 0xa2, 0x80, 0x3a, 0x11, 0x7a,
	0x36, 0x11, 0x16, 0xa0, 0xd9, 0x4c, 0x78, 0xba, 0xfc, 0x4a, 0x96, 0xab, 0xf4, 0x47, 0xc7, 0xb2,
	0x20, 0xa9, 0xb9, 0xa9, 0xed, 0x1b, 0x15, 0xb2, 0xae, 0x03, 0x77, 0x7c, 0xad, 0x70, 0x82, 0x24,
	0xf3, 0x3c, 0xe7, 0x6f, 0x9c, 0x91, 0xf7, 0x6d, 0x87, 0xd6, 0x4c, 0xec, 0x8f, 0x05, 0x19, 0x1a,
	0x08, 0xa6, 0xb7, 0x67, 0x4c, 0x6d, 0x63, 0x33, 0xb3, 0x30, 0x96, 0xd0, 0xd5, 0x48, 0xb3, 0x39,
	0xae, 0xe0, 0xea, 0x14, 0x63, 0xbe, 0x52, 0x7f, 0x46, 0x05, 0xa0, 0x25, 0x5f, 0x23, 0x17, 0x2c,
	0x4d, 0x13, 0xb7, 0x27, 0x68, 0x60, 0x36, 0x70, 0xff, 0x5a, 0x17, 0x42, 0x33, 0xf5, 0xd3, 0x99,
	0x0b, 0x81, 0xfa, 0x0c, 0x44, 0x59, 0xff, 0x67, 0xe9, 0xa7, 0xee, 0x80, 0x64, 0x77, 0xf3, 0x16,
	0x64, 0x31, 0x48, 0x10, 0x25, 0xfd, 0xd4, 0xdf, 0xb0, 0xf6, 0xef, 0x6f, 0x9f, 0xad, 0x10, 0xce,
	0x16, 0xb6, 0xfe, 0xf6, 0xfc, 0xc2, 0xf6, 0x2f, 0x8e, 0xcd, 0xfb, 0xc5, 0x4d, 0xcc, 0xac, 0x18,
	0xf3, 0x6c, 0xff, 0x3b, 0xce, 0xc8, 0x7b, 0x48, 0x7b, 0x45, 0xda, 0xef, 0xe7, 0x2d, 0xd0, 0xf6,
	0x1d, 0x67, 0x72, 0x65, 0xa2, 0xfe, 0x58, 0xd4, 0x53, 0x0d, 0x6b, 0x4f, 0x7c, 0xd6, 0x6c, 0x7c,
	0x8a, 0x64, 0x26, 0x1b, 0x1b, 0x8a, 0xd3, 0xd9, 0xb8, 0x10, 0x6d, 0xd6, 0xa8, 0xff, 0x5a, 0x68,
	0xa4, 0xd9, 0xdc, 0xd3, 0x1a, 0x79, 0xce, 0x64, 0xfa, 0x87, 0xce, 0xc8, 0x4b, 0xa9, 0x21, 0x62,
	0x73, 0x69, 0xfd, 0xab, 0x85, 0x9a, 0x6c, 0x76, 0x55, 0xb5, 0x50, 0x00, 0xea, 0x4a, 0x27, 0x40,
	0x11, 0x64, 0x61, 0x8a, 0x46, 0x3e, 0x6b, 0x06, 0x9b, 0x50, 0x8e, 0x10, 0xbd, 0xd3, 0x94, 0xf3,
	0x17, 0xda, 0x79, 0x8d, 0x90, 0xf3, 0x64, 0x3c, 0x19, 0xec, 0xfe, 0xc2, 0xc8, 0xbb, 0x4f, 0x31,
	0xf9, 0x15, 0xe2, 0x15, 0x7e, 0x8b, 0x80, 0xff, 0x1b, 0xbf, 0x3d, 0x45, 0x00, 0xba, 0xad, 0xae,
	0xc1, 0x4b, 0xa6, 0x9d, 0xc3, 0xff, 0xac, 0x7d, 0xff, 0x4b, 0xb7, 0x72, 0x67, 0x35, 0xee, 0x47,
	0xce, 0xc8, 0xfb, 0xce, 0xb8, 0x52, 0x62, 0x76, 0x6b, 0x36, 0xf7, 0x6c, 0xb5, 0x34, 0x35, 0xaf,
	0x3e, 0x1c, 0xb7, 0x76, 0xa5, 0x5a, 0xca, 0x63, 0x8b, 0xc0, 0x84, 0x69, 0xb1, 0x85, 0x6a, 0xc5,
	0x79, 0x10, 0x80, 0xc0, 0x4e, 0x1d, 0x06, 0x8c, 0x4b, 0x96, 0xe9, 0x7b, 0xae, 0xb3, 0xfb, 0xc1,
	0x44, 0x87, 0x67, 0xaa, 0xd5, 0xd7, 0x55, 0xb1, 0x2a, 0xc4, 0x9e, 0xd7, 0x67, 0xac, 0x97, 0xd4,
	0x81, 0x07, 0xb9, 0x6f, 0x8e, 0xbc, 0x4d, 0x7a, 0x0d, 0x4d, 0x8d, 0x63, 0x45, 0x3f, 0x4e, 0x8e,
	0x63, 0x25, 0x71, 0x29, 0x90, 0x4b, 0xf9, 0x4b, 0x9c, 0x30, 0x33, 0x08, 0xd1, 0xa3, 0xdf, 0x73,
	0xc8, 0x5a, 0xa9, 0x56, 0xce, 0x3f, 0x7f, 0xde, 0x43, 0x8b, 0x2b, 0x46, 0xde, 0xfb, 0xf4, 0x95,
	0x49, 0x3e, 0x54, 0xb5, 0x99, 0xc7, 0x48, 0xfd, 0x79, 0x90, 0x15, 0xd7, 0x35, 0x7a, 0x61, 0xb2,
	0x66, 0xd0, 0x5f, 0xaf, 0x90, 0xb5, 0x66, 0x99, 0xed, 0xe7, 0xa8, 0x8c, 0x1f, 0x3b, 0x23, 0xef,
	0x23, 0x87, 0x5e, 0x44, 0x57, 0x40, 0x47, 0xf0, 0x8b, 0xd2, 0xf8, 0xfb, 0x8e, 0x85, 0x15, 0xe5,
	0x52, 0xf3, 0xd1, 0x60, 0xf6, 0x86, 0x7e, 0x93, 0x99, 0x0b, 0xf9, 0x4d, 0x66, 0x23, 0x60, 0x93,
	0xd9, 0xab, 0x7d, 0x35, 0xc2, 0xa9, 0x68, 0xe2, 0x19, 0x14, 0xc1, 0xd4, 0xd0, 0xa0, 0x41, 0x2e,
	0x24, 0xf6, 0x58, 0x31, 0x7c, 0x90, 0x8b, 0xaf, 0xb7, 0x93, 0xa0, 0x0f, 0xd9, 0xd9, 0x4a, 0xe8,
	0x25, 0x77, 0x4a, 0x1d, 0xb6, 0xe9, 0x69, 0x16, 0x35, 0xef, 0x79, 0xaa, 0xc5, 0xaf, 0x3a, 0x23,
	0x2f, 0xa6, 0x9f, 0xb5, 0xa2, 0x97, 0xca, 0x5f, 0x69, 0x54, 0xf8, 0x32, 0x6e, 0xdf, 0x83, 0xe3,
	0x72, 0xc9, 0x28, 0xeb, 0xe7, 0x0c, 0x15, 0x63, 0x22, 0x18, 0xfa, 0xdb, 0x6a, 0xdc, 0xf9, 0x65,
	0xdd, 0xba, 0x15, 0x52, 0x3c, 0xd5, 0x1b, 0xa7, 0x9e, 0x03, 0xdc, 0xdd, 0x91, 0x77, 0x9d, 0xbe,
	0x52, 0x8c, 0xb3, 0xca, 0xcb, 0xc6, 0x1c, 0x67, 0x10, 0x71, 0x09, 0xed, 0xb2, 0x87, 0xcd, 0x86,
	0x45, 0x7f, 0x5b, 0xd0, 0x37, 0x14, 0x1b, 0xf6, 0xfd, 0xf1, 0xe9, 0x6c, 0x4c, 0xbd, 0x54, 0xba,
	0x2f, 0xd0, 0xef, 0x2e, 0x98, 0xab, 0x47, 0x73, 0x39, 0x4e, 0xe9, 0xc4, 0xcd, 0x99, 0x7a, 0x03,
	0x18, 0x67, 0x41, 0x7d, 0x39, 0xef, 0xfe, 0x5b, 0x65, 0xe4, 0xfd, 0x43, 0x85, 0x5e, 0xef, 0x42,
	0x91, 0x6c, 0x98, 0x48, 0x21, 0x08, 0x3b, 0x61, 0xa0, 0x63, 0x03, 0x9b, 0xfa, 0x02, 0xa4, 0x53,
	0x55, 0xfd, 0xb7, 0x2b, 0x88, 0x2f, 0x64, 0x06, 0x7c, 0x80, 0x08, 0x51, 0xd2, 0xd5, 0x7a, 0x9f,
	0xc6, 0x6c, 0xa8, 0xa4, 0x06, 0xa1, 0xec, 0x41, 0x66, 0x52, 0x7c, 0x6b, 0xc8, 0xcc, 0x7d, 0x21,
	0x4b, 0x32, 0xd6, 0xe3, 0xa2, 0xb7, 0x89, 0x05, 0xc2, 0xc2, 0x70, 0xd6, 0xd3, 0x24, 0xb0, 0x70,
	0x48, 0x26, 0x79, 0x1f, 0x04, 0x4b, 0x33, 0x08, 0x20, 0x6e, 0x43, 0x1c, 0x00, 0x4b, 0x8e, 0x40,
	0x7f, 0xd7, 0x50, 0xf3, 0x1f, 0x17, 0xbd, 0xc9, 0x8f, 0x54, 0x48, 0xf4, 0x20, 0xd3, 0x31, 0x31,
	0xc8, 0x23, 0x19, 0xa6, 0x11, 0xd8, 0x24, 0x7b, 0x1c, 0x4a, 0x3d, 0xb5, 0x08, 0x0c, 0x1f, 0x73,
	0xbc, 0x64, 0xe1, 0x71, 0x14, 0x59, 0x81, 0x70, 0x17, 0xad, 0x26, 0x24, 0x4b, 0xe2, 0x13, 0x72,
	0xef, 0x58, 0x9d, 0x4a, 0xe6, 0x13, 0xfc, 0x8c, 0xd6, 0xd0, 0xb8, 0xea, 0x44, 0xa3, 0x54, 0xfa,
	0x49, 0x85, 0x2c, 0x1e, 0x24, 0x5d, 0x71, 0xa2, 0x55, 0x8a, 0x3b, 0xce, 0xf2, 0x23, 0x81, 0xfb,
	0x61, 0x65, 0xe4, 0x7d, 0xb7, 0xf2, 0xff, 0xca, 0x3e, 0x5d, 0xd9, 0x84, 0x56, 0x51, 0xd9, 0xa8,
	0x95, 0x57, 0x1d, 0xfa, 0x7d, 0x87, 0xd4, 0x0e, 0xb8, 0x90, 0x6f, 0xc1, 0xf1, 0xf8, 0x42, 0xf9,
	0x52, 0x39, 0x55, 0xdb, 0x11, 0xf6, 0xe2, 0xf8, 0xdd, 0xcf, 0xe0, 0xb9, 0x7f, 0xe0, 0x8c, 0xbc,
	0x9f, 0xaf, 0x7f, 0xa0, 0x66, 0x53, 0x3b, 0x95, 0xd9, 0x4d, 0xd4, 0x7c, 0x31, 0xa0, 0x8e, 0x93,
	0x4c, 0x90, 0x64, 0x99, 0xb2, 0x57, 0x1b, 0x27, 0x54, 0x35, 0x5d, 0x14, 0xd3, 0xae, 0x7a, 0x77,
	0xd1, 0x93, 0xae, 0x00, 0xc9, 0x7a, 0xc9, 0x31, 0x1b, 0xf0, 0x78, 0xc8, 0x20, 0x96, 0x8a, 0xa2,
	0x9d, 0x81, 0xf5, 0x51, 0xd0, 0x56, 0xe2, 0x7c, 0x8e, 0x7e, 0x06, 0xc5, 0xd1, 0xe7, 0x0e, 0x55,
	0xd7, 0x83, 0xd4, 0x9e, 0x6c, 0x3d, 0x46, 0xe2, 0x4f, 0xe8, 0x9f, 0x2f, 0x90, 0x15, 0xac, 0xde,
	0xfa, 0xa9, 0xa3, 0xfc, 0x0e, 0x63, 0xdf, 0x18, 0xc7, 0x31, 0xae, 0x81, 0xee, 0x37, 0x17, 0x46,
	0xde, 0x0f, 0x2a, 0xf5, 0x7f, 0xaf, 0x14, 0xdf, 0xb1, 0xb2, 0x88, 0xca, 0x3e, 0x1a, 0x7c, 0x42,
	0xac, 0x37, 0xd8, 0x5e, 0x08, 0x19, 0xcf, 0x82, 0x9e, 0x36, 0x80, 0x69, 0x60, 0xa2, 0x24, 0xe9,
	0xe7, 0xa9, 0x32, 0xf0, 0xad, 0xc2, 0x33, 0x44, 0x9e, 0xa6, 0x51, 0x08, 0xed, 0x4d, 0x4d, 0x5f,
	0x5d, 0xd6, 0x08, 0xc0, 0x6f, 0xd1, 0x11, 0xb5, 0x17, 0xed, 0x77, 0x8a, 0x32, 0xa6, 0x9c, 0xc7,
	0x3e, 0x9d, 0x29, 0xff, 0xb1, 0x04, 0xd4, 0x4e, 0xac, 0x6f, 0x29, 0x7b, 0x9b, 0x8c, 0x58, 0x35,
	0xb6, 0x00, 0x2b, 0x5f, 0x9b, 0x71, 0x6c, 0x1d, 0x6d, 0xe3, 0x8c, 0xac, 0xa0, 0xf2, 0xf3, 0xd4,
	0x88, 0xa1, 0x0e, 0x51, 0x87, 0x97, 0xde, 0x42, 0xd1, 0x6d, 0xbb, 0xe1, 0x11, 0xc4, 0xd8, 0x64,
	0xeb, 0x9b, 0x04, 0x75, 0xc9, 0xbd, 0x69, 0xa7, 0x13, 0x75, 0x00, 0x97, 0x12, 0x06, 0xa9, 0x44,
	0x09, 0x3b, 0x61, 0x8c, 0x8d, 0xdb, 0x80, 0xcb, 0xa0, 0x67, 0x38, 0x2d, 0xd4, 0x65, 0x1c, 0xd6,
	0xf4, 0xea, 0x92, 0x77, 0x81, 0xb5, 0x41, 0xf2, 0x30, 0xb2, 0x8e, 0xc1, 0xa5, 0xee, 0x23, 0xd6,
	0x28, 0x51, 0xd6, 0xd4, 0xd6, 0xfa, 0x3d, 0x87, 0xac, 0xbc, 0x87, 0xf4, 0xd4, 0x45, 0xf9, 0x89,
	0x5e, 0x39, 0xaf, 0x64, 0xc2, 0xc8, 0xbb, 0x57, 0x3f, 0x38, 0x56, 0xcc, 0x14, 0x1e, 0x95, 0xa7,
	0x8c, 0xb3, 0x63, 0x68, 0xf5, 0x92, 0xa4, 0x5f, 0x78, 0xa4, 0x16, 0x72, 0xd2, 0x13, 0xb1, 0x28,
	0xe9, 0x90, 0x19, 0xf7, 0x08, 0x8a, 0xbf, 0x0b, 0xee, 0x0a, 0xf2, 0xa7, 0xe8, 0x62, 0x35, 0xfc,
	0xe3, 0x8a, 0x7d, 0x60, 0x45, 0x9e, 0xe2, 0xf6, 0x1e, 0x17, 0xbd, 0x71, 0x61, 0xb7, 0xff, 0x71,
	0x33, 0x27, 0x5f, 0xfd, 0x87, 0x33, 0xf2, 0xfe, 0xd1, 0xa9, 0x7f, 0xec, 0x68, 0xbd, 0x4c, 0x2b,
	0x54, 0x66, 0x61, 0xb7, 0x0b, 0x98, 0xb6, 0x8c, 0x63, 0xed, 0x77, 0x0c, 0xc3, 0xda, 0xce, 0xfa,
	0x4a, 0x3a, 0xca, 0x80, 0xb7, 0x87, 0xac, 0x05, 0xa0, 0x67, 0x21, 0xec, 0x60, 0x3a, 0x49, 0x06,
	0x2a, 0x71, 0x60, 0x7e, 0x6b, 0x81, 0xa5, 0x04, 0x6d, 0x9d, 0x60, 0x1e, 0x62, 0x9f, 0x63, 0x5f,
	0x05, 0x94, 0xa9, 0x14, 0x39, 0x2d, 0xb0, 0x3a, 0x46, 0x9f, 0xa0, 0x3c, 0xea, 0x04, 0xc2, 0x2a,
	0xac, 0xd5, 0x23, 0x0f, 0xeb, 0x44, 0xbc, 0x8b, 0x9e, 0x52, 0x8c, 0x25, 0x5c, 0xb0, 0x63, 0x88,
	0xa2, 0x09, 0x6d, 0x29, 0xf6, 0x6f, 0x39, 0xd7, 0x5e, 0x75, 0xe8, 0x87, 0x0e, 0xa9, 0xea, 0x17,
	0x93, 0xb2, 0x41, 0x4b, 0x6f, 0x28, 0x73, 0x0d, 0x7a, 0x34, 0xf2, 0x7e, 0xae, 0xfe, 0xd5, 0x34,
	0x89, 0xa2, 0x29, 0x7b, 0x22, 0x48, 0xe7, 0x12, 0xfd, 0x18, 0x64, 0x07, 0x05, 0xdd, 0x07, 0x6e,
	0xb2, 0x20, 0x4b, 0xe2, 0x4d, 0x25, 0xa5, 0x7d, 0x98, 0x52, 0xa1, 0xc3, 0x55, 0x40, 0x1b, 0xae,
	0x8d, 0xe8, 0x8a, 0xe9, 0xf3, 0xae, 0xca, 0x8f, 0x48, 0x16, 0x2d, 0xfc, 0xbb, 0x0e, 0xb9, 0xf0,
	0x26, 0x44, 0x20, 0xe1, 0x6c, 0x7c, 0x7f, 0x6d, 0xe4, 0xbd, 0x5e, 0xff, 0x62, 0x5b, 0x51, 0x28,
	0x78, 0xd5, 0xd5, 0x08, 0xf9, 0x2b, 0xd8, 0x2d, 0x82, 0x7b, 0xb2, 0x33, 0x55, 0x2c, 0x7d, 0xfa,
	0xda, 0xa7, 0x2c, 0x4b, 0xb3, 0x09, 0xee, 0x9b, 0x0e, 0x59, 0x3f, 0x08, 0x85, 0x44, 0x66, 0xa0,
	0xad, 0x1f, 0x86, 0xe6, 0x75, 0x43, 0xe7, 0xcb, 0x9c, 0x0b, 0xf7, 0x60, 0xe4, 0x7d, 0xb1, 0xfe,
	0x13, 0x51, 0x28, 0xa4, 0x51, 0x87, 0xb9, 0x44, 0xc2, 0x64, 0xab, 0xde, 0x3e, 0x90, 0x95, 0x16,
	0x20, 0xc7, 0xa9, 0xa2, 0x6e, 0x5e, 0x3d, 0x78, 0xdc, 0x85, 0x89, 0x62, 0x82, 0xbb, 0xf4, 0x4f,
	0x1c, 0x42, 0xde, 0x0a, 0xe3, 0xf6, 0x7b, 0x90, 0xf5, 0x21, 0x3b, 0x21, 0x0a, 0xe6, 0xfe, 0xcb,
	0x02, 0x1a, 0xf7, 0xfd, 0xfa, 0x57, 0xb0, 0x6c, 0xc7, 0x20, 0x8f, 0x93, 0xac, 0xcf, 0xa2, 0x64,
	0xdc, 0x4e, 0x1d, 0x2b, 0x82, 0x9a, 0xa3, 0x50, 0xb0, 0x20, 0xcf, 0xb2, 0x0c, 0x62, 0x19, 0x0d,
	0x19, 0x7c, 0x00, 0x41, 0x6e, 0x2e, 0xc4, 0x75, 0x10, 0x25, 0x26, 0x3f, 0xab, 0x9c, 0x0c, 0xda,
	0xb3, 0x75, 0x4b, 0x4e, 0x2f, 0xaa, 0xc8, 0x55, 0xb4, 0xb6, 0x1e, 0x23, 0xfc, 0x09, 0xfd, 0x25,
	0x87, 0xac, 0xdf, 0x01, 0x79, 0x98, 0xf1, 0xa0, 0xff, 0x34, 0xdd, 0x5d, 0x9c, 0x7e, 0x59, 0x13,
	0xa6, 0x95, 0x45, 0xb6, 0x95, 0x0e, 0x93, 0x8e, 0xe2, 0x4d, 0xb3, 0x26, 0x35, 0x4d, 0x6b, 0x5e,
	0x35, 0x05, 0x4c, 0xb4, 0xb2, 0xc5, 0xb3, 0xdc, 0xed, 0x6c, 0xe4, 0xf5, 0xa9, 0x47, 0x2e, 0xa9,
	0xa7, 0x2e, 0xa6, 0xdf, 0xba, 0x58, 0x13, 0xb2, 0x23, 0xc8, 0xdc, 0x97, 0xc8, 0xea, 0x43, 0x10,
	0x22, 0x64, 0xa2, 0xc7, 0xe3, 0x7e, 0xfd, 0x8a, 0x5a, 0xa8, 0xdf, 0x6f, 0x44, 0x70, 0x04, 0xd1,
	0x8d, 0x1b, 0x8d, 0x20, 0x19, 0xdc, 0x5c, 0xb8, 0xd1, 0x78, 0xf5, 0x5a, 0xc5, 0xa9, 0xdc, 0xac,
	0x71, 0xac, 0x08, 0x5a, 0x77, 0x5b, 0x0f, 0x45, 0x12, 0xdf, 0x9a, 0x81, 0xbc, 0x5f, 0x49, 0x5b,
	0xad, 0x65, 0x25, 0xdd, 0x17, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0xb8, 0xcb, 0x99, 0xca, 0xbd,
	0x28, 0x00, 0x00,
}
