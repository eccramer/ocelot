// Code generated by protoc-gen-go. DO NOT EDIT.
// source: guideocelot.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf2 "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BuildReq struct {
	// acctRepo is the ocelot account to which the creds are uploaded and the repository you wish to operate on, in the form account/repo
	AcctRepo string `protobuf:"bytes,1,opt,name=acctRepo" json:"acctRepo,omitempty"`
	// hash is the git hash to trigger.
	Hash string `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
	// branch is the branch that corresponds to the git hash. if the git hash has never been built by ocelot, this field is required.
	Branch string `protobuf:"bytes,3,opt,name=branch" json:"branch,omitempty"`
}

func (m *BuildReq) Reset()                    { *m = BuildReq{} }
func (m *BuildReq) String() string            { return proto.CompactTextString(m) }
func (*BuildReq) ProtoMessage()               {}
func (*BuildReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *BuildReq) GetAcctRepo() string {
	if m != nil {
		return m.AcctRepo
	}
	return ""
}

func (m *BuildReq) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildReq) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

type StatusQuery struct {
	// hash is the git hash to get status of
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	// acctName is the corresponding account that the hash is attached to
	AcctName string `protobuf:"bytes,2,opt,name=acctName" json:"acctName,omitempty"`
	// repoName is the corresponding repo name that the hash is attached to
	RepoName string `protobuf:"bytes,3,opt,name=repoName" json:"repoName,omitempty"`
	// partialRepo is just the first n letters of repo
	PartialRepo string `protobuf:"bytes,4,opt,name=partialRepo" json:"partialRepo,omitempty"`
}

func (m *StatusQuery) Reset()                    { *m = StatusQuery{} }
func (m *StatusQuery) String() string            { return proto.CompactTextString(m) }
func (*StatusQuery) ProtoMessage()               {}
func (*StatusQuery) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *StatusQuery) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *StatusQuery) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *StatusQuery) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *StatusQuery) GetPartialRepo() string {
	if m != nil {
		return m.PartialRepo
	}
	return ""
}

// BuildQuery is the message that is used for getting data on a specific build.
// You can query by hash, in which case if there are multiple of the same commit it will pick the latest,
// or you can query by build-id which in the case of log retrieval is only allowed if the build is completed.
type BuildQuery struct {
	// hash is the git hash that corresponds to a commit you wish to get information on
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	// build id is the build number given by ocelot that is associated with the commit
	BuildId int64 `protobuf:"varint,2,opt,name=buildId" json:"buildId,omitempty"`
}

func (m *BuildQuery) Reset()                    { *m = BuildQuery{} }
func (m *BuildQuery) String() string            { return proto.CompactTextString(m) }
func (*BuildQuery) ProtoMessage()               {}
func (*BuildQuery) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *BuildQuery) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildQuery) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

type Builds struct {
	Builds map[string]*BuildRuntimeInfo `protobuf:"bytes,1,rep,name=builds" json:"builds,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Builds) Reset()                    { *m = Builds{} }
func (m *Builds) String() string            { return proto.CompactTextString(m) }
func (*Builds) ProtoMessage()               {}
func (*Builds) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *Builds) GetBuilds() map[string]*BuildRuntimeInfo {
	if m != nil {
		return m.Builds
	}
	return nil
}

type BuildRuntimeInfo struct {
	// done says whether or not the build has completed
	Done bool `protobuf:"varint,1,opt,name=done" json:"done,omitempty"`
	// ip is the ip of the werker node that is running the build
	Ip string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	// grpcPort is the grpc port of the werker running the build
	GrpcPort string `protobuf:"bytes,3,opt,name=grpcPort" json:"grpcPort,omitempty"`
	// hash is the git hash that is currently being built
	Hash string `protobuf:"bytes,4,opt,name=hash" json:"hash,omitempty"`
	// acctName is the vcs account that this build is assocated with
	AcctName string `protobuf:"bytes,5,opt,name=acctName" json:"acctName,omitempty"`
	// repoName is the name of the git repository that is associated with this commit/build
	RepoName string `protobuf:"bytes,6,opt,name=repoName" json:"repoName,omitempty"`
	WsPort   string `protobuf:"bytes,7,opt,name=wsPort" json:"wsPort,omitempty"`
}

func (m *BuildRuntimeInfo) Reset()                    { *m = BuildRuntimeInfo{} }
func (m *BuildRuntimeInfo) String() string            { return proto.CompactTextString(m) }
func (*BuildRuntimeInfo) ProtoMessage()               {}
func (*BuildRuntimeInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *BuildRuntimeInfo) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func (m *BuildRuntimeInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *BuildRuntimeInfo) GetGrpcPort() string {
	if m != nil {
		return m.GrpcPort
	}
	return ""
}

func (m *BuildRuntimeInfo) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildRuntimeInfo) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *BuildRuntimeInfo) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *BuildRuntimeInfo) GetWsPort() string {
	if m != nil {
		return m.WsPort
	}
	return ""
}

type LineResponse struct {
	OutputLine string `protobuf:"bytes,1,opt,name=outputLine" json:"outputLine,omitempty"`
}

func (m *LineResponse) Reset()                    { *m = LineResponse{} }
func (m *LineResponse) String() string            { return proto.CompactTextString(m) }
func (*LineResponse) ProtoMessage()               {}
func (*LineResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *LineResponse) GetOutputLine() string {
	if m != nil {
		return m.OutputLine
	}
	return ""
}

type RepoAccount struct {
	// repo is the VCS repository
	Repo string `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	// account is the VCS account
	Account string `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	// limit is the number of summary records desired to be returned
	Limit int32 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
}

func (m *RepoAccount) Reset()                    { *m = RepoAccount{} }
func (m *RepoAccount) String() string            { return proto.CompactTextString(m) }
func (*RepoAccount) ProtoMessage()               {}
func (*RepoAccount) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *RepoAccount) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *RepoAccount) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RepoAccount) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type Status struct {
	// buildSum is the BuildSummary object that correlates to the build in question
	BuildSum *BuildSummary `protobuf:"bytes,1,opt,name=buildSum" json:"buildSum,omitempty"`
	// stages is a all the StageStatus objects associated to the build in question
	Stages []*StageStatus `protobuf:"bytes,2,rep,name=stages" json:"stages,omitempty"`
	// isInConsul is a boolean that is used for determining if the build is "running" or not. if isInConsul=true, the build is still running
	IsInConsul bool `protobuf:"varint,3,opt,name=isInConsul" json:"isInConsul,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *Status) GetBuildSum() *BuildSummary {
	if m != nil {
		return m.BuildSum
	}
	return nil
}

func (m *Status) GetStages() []*StageStatus {
	if m != nil {
		return m.Stages
	}
	return nil
}

func (m *Status) GetIsInConsul() bool {
	if m != nil {
		return m.IsInConsul
	}
	return false
}

// StageStatus is the detailed information about a specific stage that was executed during the build
type StageStatus struct {
	StageStatus string `protobuf:"bytes,1,opt,name=StageStatus" json:"StageStatus,omitempty"`
	// error is the error message; will either be populated by a stage not returning exit code 0 or an error handled in the code during the build
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	// status is whether or not hte build failed; 0 for pass; 1 for failed
	Status int32 `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	// messages are some descriptions of each stage that are generated at runtime
	Messages []string `protobuf:"bytes,4,rep,name=messages" json:"messages,omitempty"`
	// startTime is when this stage began execution
	StartTime *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=startTime" json:"startTime,omitempty"`
	// stageDuration is how long the stage took to execute
	StageDuration float64 `protobuf:"fixed64,6,opt,name=stageDuration" json:"stageDuration,omitempty"`
}

func (m *StageStatus) Reset()                    { *m = StageStatus{} }
func (m *StageStatus) String() string            { return proto.CompactTextString(m) }
func (*StageStatus) ProtoMessage()               {}
func (*StageStatus) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *StageStatus) GetStageStatus() string {
	if m != nil {
		return m.StageStatus
	}
	return ""
}

func (m *StageStatus) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *StageStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *StageStatus) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *StageStatus) GetStartTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *StageStatus) GetStageDuration() float64 {
	if m != nil {
		return m.StageDuration
	}
	return 0
}

// BuildSummary represents the build_summary table in postgres
// it is a top level view of how a repository is "doing" in ocelot, ie build times, fail status..
type BuildSummary struct {
	// hash is the git commit hash that corresponds with this build information
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	// failed is whether or not the build failed
	Failed bool `protobuf:"varint,2,opt,name=failed" json:"failed,omitempty"`
	// buildTime is the datetime that the build was picked up off the queue by the werker
	BuildTime *google_protobuf2.Timestamp `protobuf:"bytes,3,opt,name=buildTime" json:"buildTime,omitempty"`
	// account is the VCS account associated with the repository / commit
	Account string `protobuf:"bytes,4,opt,name=account" json:"account,omitempty"`
	// buildDuration is the length of time the whole build took to execute
	BuildDuration float64 `protobuf:"fixed64,5,opt,name=buildDuration" json:"buildDuration,omitempty"`
	// repo is the repository associated with the account / commit
	Repo string `protobuf:"bytes,6,opt,name=repo" json:"repo,omitempty"`
	// branch is the branch associated with the commit when it was pushed
	Branch string `protobuf:"bytes,7,opt,name=branch" json:"branch,omitempty"`
	// buildId is the id given to the build entry by postgres. it is unique
	BuildId int64 `protobuf:"varint,8,opt,name=buildId" json:"buildId,omitempty"`
	// queueTime is the datetime that either a tracking component or the admin put the build request on the queue to be processed by the werker node
	QueueTime *google_protobuf2.Timestamp `protobuf:"bytes,9,opt,name=queueTime" json:"queueTime,omitempty"`
}

func (m *BuildSummary) Reset()                    { *m = BuildSummary{} }
func (m *BuildSummary) String() string            { return proto.CompactTextString(m) }
func (*BuildSummary) ProtoMessage()               {}
func (*BuildSummary) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *BuildSummary) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildSummary) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

func (m *BuildSummary) GetBuildTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.BuildTime
	}
	return nil
}

func (m *BuildSummary) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *BuildSummary) GetBuildDuration() float64 {
	if m != nil {
		return m.BuildDuration
	}
	return 0
}

func (m *BuildSummary) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *BuildSummary) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *BuildSummary) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

func (m *BuildSummary) GetQueueTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.QueueTime
	}
	return nil
}

// summaries is a wrapper for a list of BuildSummary objects because protobuf can be dumb
type Summaries struct {
	Sums []*BuildSummary `protobuf:"bytes,1,rep,name=sums" json:"sums,omitempty"`
}

func (m *Summaries) Reset()                    { *m = Summaries{} }
func (m *Summaries) String() string            { return proto.CompactTextString(m) }
func (*Summaries) ProtoMessage()               {}
func (*Summaries) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *Summaries) GetSums() []*BuildSummary {
	if m != nil {
		return m.Sums
	}
	return nil
}

// PollRequest encompasses all the data necessary to set up poll tracking in ocelot.
type PollRequest struct {
	// account is the VCS account
	Account string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// repo is the VCS repository name
	Repo string `protobuf:"bytes,2,opt,name=repo" json:"repo,omitempty"`
	// cron is the cron string that will determine how often a check for changes should occur
	Cron string `protobuf:"bytes,4,opt,name=cron" json:"cron,omitempty"`
	// branches tells ocelot which branches should be checked for changes
	Branches string `protobuf:"bytes,5,opt,name=branches" json:"branches,omitempty"`
	// internal use only
	LastCronTime *google_protobuf2.Timestamp `protobuf:"bytes,6,opt,name=lastCronTime" json:"lastCronTime,omitempty"`
	// internal use only
	LastHashes map[string]string `protobuf:"bytes,7,rep,name=lastHashes" json:"lastHashes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PollRequest) Reset()                    { *m = PollRequest{} }
func (m *PollRequest) String() string            { return proto.CompactTextString(m) }
func (*PollRequest) ProtoMessage()               {}
func (*PollRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *PollRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *PollRequest) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *PollRequest) GetCron() string {
	if m != nil {
		return m.Cron
	}
	return ""
}

func (m *PollRequest) GetBranches() string {
	if m != nil {
		return m.Branches
	}
	return ""
}

func (m *PollRequest) GetLastCronTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.LastCronTime
	}
	return nil
}

func (m *PollRequest) GetLastHashes() map[string]string {
	if m != nil {
		return m.LastHashes
	}
	return nil
}

// polls is a wrapper for a PollRequest list because protobuf can be dumb
type Polls struct {
	Polls []*PollRequest `protobuf:"bytes,1,rep,name=polls" json:"polls,omitempty"`
}

func (m *Polls) Reset()                    { *m = Polls{} }
func (m *Polls) String() string            { return proto.CompactTextString(m) }
func (*Polls) ProtoMessage()               {}
func (*Polls) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *Polls) GetPolls() []*PollRequest {
	if m != nil {
		return m.Polls
	}
	return nil
}

type Exists struct {
	Exists bool `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
}

func (m *Exists) Reset()                    { *m = Exists{} }
func (m *Exists) String() string            { return proto.CompactTextString(m) }
func (*Exists) ProtoMessage()               {}
func (*Exists) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *Exists) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

// Used in displaying all repos that are tracked by ocelot
type AcctRepo struct {
	// VCS Account
	Account string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// VCS Repository
	Repo string `protobuf:"bytes,2,opt,name=repo" json:"repo,omitempty"`
}

func (m *AcctRepo) Reset()                    { *m = AcctRepo{} }
func (m *AcctRepo) String() string            { return proto.CompactTextString(m) }
func (*AcctRepo) ProtoMessage()               {}
func (*AcctRepo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *AcctRepo) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *AcctRepo) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

// AcctRepos is used in the response to /v1/tracked-repositories, it is an array of AcctRepo objects. have to wrap it cuz proto -_-
type AcctRepos struct {
	AcctRepos []*AcctRepo `protobuf:"bytes,1,rep,name=acctRepos" json:"acctRepos,omitempty"`
}

func (m *AcctRepos) Reset()                    { *m = AcctRepos{} }
func (m *AcctRepos) String() string            { return proto.CompactTextString(m) }
func (*AcctRepos) ProtoMessage()               {}
func (*AcctRepos) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *AcctRepos) GetAcctRepos() []*AcctRepo {
	if m != nil {
		return m.AcctRepos
	}
	return nil
}

func init() {
	proto.RegisterType((*BuildReq)(nil), "models.BuildReq")
	proto.RegisterType((*StatusQuery)(nil), "models.StatusQuery")
	proto.RegisterType((*BuildQuery)(nil), "models.BuildQuery")
	proto.RegisterType((*Builds)(nil), "models.Builds")
	proto.RegisterType((*BuildRuntimeInfo)(nil), "models.BuildRuntimeInfo")
	proto.RegisterType((*LineResponse)(nil), "models.LineResponse")
	proto.RegisterType((*RepoAccount)(nil), "models.RepoAccount")
	proto.RegisterType((*Status)(nil), "models.Status")
	proto.RegisterType((*StageStatus)(nil), "models.StageStatus")
	proto.RegisterType((*BuildSummary)(nil), "models.BuildSummary")
	proto.RegisterType((*Summaries)(nil), "models.Summaries")
	proto.RegisterType((*PollRequest)(nil), "models.PollRequest")
	proto.RegisterType((*Polls)(nil), "models.Polls")
	proto.RegisterType((*Exists)(nil), "models.Exists")
	proto.RegisterType((*AcctRepo)(nil), "models.AcctRepo")
	proto.RegisterType((*AcctRepos)(nil), "models.AcctRepos")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GuideOcelot service

type GuideOcelotClient interface {
	GetVCSCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*CredWrapper, error)
	GetVCSCred(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*VCSCreds, error)
	SetVCSCreds(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	UpdateVCSCreds(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	//    account,identifier,cred_sub_type
	VCSCredExists(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*Exists, error)
	CheckConn(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	SetVCSPrivateKey(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetRepoCred(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*RepoCreds, error)
	UpdateRepoCreds(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	RepoCredExists(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*Exists, error)
	GetK8SCred(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*K8SCreds, error)
	UpdateK8SCreds(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	K8SCredExists(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*Exists, error)
	UpdateSSHCreds(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetSSHCred(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*SSHKeyWrapper, error)
	SSHCredExists(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*Exists, error)
	SetSSHCreds(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetSSHCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*SSHWrap, error)
	GetRepoCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*RepoCredWrapper, error)
	SetRepoCreds(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	SetK8SCreds(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetK8SCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*K8SCredsWrapper, error)
	SetAppleCreds(ctx context.Context, in *AppleCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetAppleCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*AppleCredsWrapper, error)
	GetAppleCred(ctx context.Context, in *AppleCreds, opts ...grpc.CallOption) (*AppleCreds, error)
	UpdateAppleCreds(ctx context.Context, in *AppleCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	AppleCredExists(ctx context.Context, in *AppleCreds, opts ...grpc.CallOption) (*Exists, error)
	GetAllCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*AllCredsWrapper, error)
	BuildRuntime(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (*Builds, error)
	Logs(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (GuideOcelot_LogsClient, error)
	LastFewSummaries(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*Summaries, error)
	GetStatus(ctx context.Context, in *StatusQuery, opts ...grpc.CallOption) (*Status, error)
	WatchRepo(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	BuildRepoAndHash(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (GuideOcelot_BuildRepoAndHashClient, error)
	PollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	DeletePollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	ListPolledRepos(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Polls, error)
	FindWerker(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (*BuildRuntimeInfo, error)
	GetTrackedRepos(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*AcctRepos, error)
}

type guideOcelotClient struct {
	cc *grpc.ClientConn
}

func NewGuideOcelotClient(cc *grpc.ClientConn) GuideOcelotClient {
	return &guideOcelotClient{cc}
}

func (c *guideOcelotClient) GetVCSCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*CredWrapper, error) {
	out := new(CredWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetVCSCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetVCSCred(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*VCSCreds, error) {
	out := new(VCSCreds)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetVCSCred", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetVCSCreds(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetVCSCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) UpdateVCSCreds(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/UpdateVCSCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) VCSCredExists(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/VCSCredExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) CheckConn(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/CheckConn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetVCSPrivateKey(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetVCSPrivateKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetRepoCred(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*RepoCreds, error) {
	out := new(RepoCreds)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetRepoCred", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) UpdateRepoCreds(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/UpdateRepoCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) RepoCredExists(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/RepoCredExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetK8SCred(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*K8SCreds, error) {
	out := new(K8SCreds)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetK8SCred", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) UpdateK8SCreds(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/UpdateK8SCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) K8SCredExists(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/K8SCredExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) UpdateSSHCreds(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/UpdateSSHCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetSSHCred(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*SSHKeyWrapper, error) {
	out := new(SSHKeyWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetSSHCred", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SSHCredExists(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SSHCredExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetSSHCreds(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetSSHCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetSSHCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*SSHWrap, error) {
	out := new(SSHWrap)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetSSHCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetRepoCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*RepoCredWrapper, error) {
	out := new(RepoCredWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetRepoCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetRepoCreds(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetRepoCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetK8SCreds(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetK8SCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetK8SCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*K8SCredsWrapper, error) {
	out := new(K8SCredsWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetK8SCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetAppleCreds(ctx context.Context, in *AppleCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetAppleCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetAppleCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*AppleCredsWrapper, error) {
	out := new(AppleCredsWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetAppleCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetAppleCred(ctx context.Context, in *AppleCreds, opts ...grpc.CallOption) (*AppleCreds, error) {
	out := new(AppleCreds)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetAppleCred", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) UpdateAppleCreds(ctx context.Context, in *AppleCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/UpdateAppleCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) AppleCredExists(ctx context.Context, in *AppleCreds, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/AppleCredExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetAllCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*AllCredsWrapper, error) {
	out := new(AllCredsWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetAllCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) BuildRuntime(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (*Builds, error) {
	out := new(Builds)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/BuildRuntime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) Logs(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (GuideOcelot_LogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GuideOcelot_serviceDesc.Streams[0], c.cc, "/models.GuideOcelot/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &guideOcelotLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GuideOcelot_LogsClient interface {
	Recv() (*LineResponse, error)
	grpc.ClientStream
}

type guideOcelotLogsClient struct {
	grpc.ClientStream
}

func (x *guideOcelotLogsClient) Recv() (*LineResponse, error) {
	m := new(LineResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *guideOcelotClient) LastFewSummaries(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*Summaries, error) {
	out := new(Summaries)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/LastFewSummaries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetStatus(ctx context.Context, in *StatusQuery, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) WatchRepo(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/WatchRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) BuildRepoAndHash(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (GuideOcelot_BuildRepoAndHashClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GuideOcelot_serviceDesc.Streams[1], c.cc, "/models.GuideOcelot/BuildRepoAndHash", opts...)
	if err != nil {
		return nil, err
	}
	x := &guideOcelotBuildRepoAndHashClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GuideOcelot_BuildRepoAndHashClient interface {
	Recv() (*LineResponse, error)
	grpc.ClientStream
}

type guideOcelotBuildRepoAndHashClient struct {
	grpc.ClientStream
}

func (x *guideOcelotBuildRepoAndHashClient) Recv() (*LineResponse, error) {
	m := new(LineResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *guideOcelotClient) PollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/PollRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) DeletePollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/DeletePollRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) ListPolledRepos(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Polls, error) {
	out := new(Polls)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/ListPolledRepos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) FindWerker(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (*BuildRuntimeInfo, error) {
	out := new(BuildRuntimeInfo)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/FindWerker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetTrackedRepos(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*AcctRepos, error) {
	out := new(AcctRepos)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetTrackedRepos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GuideOcelot service

type GuideOcelotServer interface {
	GetVCSCreds(context.Context, *google_protobuf.Empty) (*CredWrapper, error)
	GetVCSCred(context.Context, *VCSCreds) (*VCSCreds, error)
	SetVCSCreds(context.Context, *VCSCreds) (*google_protobuf.Empty, error)
	UpdateVCSCreds(context.Context, *VCSCreds) (*google_protobuf.Empty, error)
	//    account,identifier,cred_sub_type
	VCSCredExists(context.Context, *VCSCreds) (*Exists, error)
	CheckConn(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
	SetVCSPrivateKey(context.Context, *SSHKeyWrapper) (*google_protobuf.Empty, error)
	GetRepoCred(context.Context, *RepoCreds) (*RepoCreds, error)
	UpdateRepoCreds(context.Context, *RepoCreds) (*google_protobuf.Empty, error)
	RepoCredExists(context.Context, *RepoCreds) (*Exists, error)
	GetK8SCred(context.Context, *K8SCreds) (*K8SCreds, error)
	UpdateK8SCreds(context.Context, *K8SCreds) (*google_protobuf.Empty, error)
	K8SCredExists(context.Context, *K8SCreds) (*Exists, error)
	UpdateSSHCreds(context.Context, *SSHKeyWrapper) (*google_protobuf.Empty, error)
	GetSSHCred(context.Context, *SSHKeyWrapper) (*SSHKeyWrapper, error)
	SSHCredExists(context.Context, *SSHKeyWrapper) (*Exists, error)
	SetSSHCreds(context.Context, *SSHKeyWrapper) (*google_protobuf.Empty, error)
	GetSSHCreds(context.Context, *google_protobuf.Empty) (*SSHWrap, error)
	GetRepoCreds(context.Context, *google_protobuf.Empty) (*RepoCredWrapper, error)
	SetRepoCreds(context.Context, *RepoCreds) (*google_protobuf.Empty, error)
	SetK8SCreds(context.Context, *K8SCreds) (*google_protobuf.Empty, error)
	GetK8SCreds(context.Context, *google_protobuf.Empty) (*K8SCredsWrapper, error)
	SetAppleCreds(context.Context, *AppleCreds) (*google_protobuf.Empty, error)
	GetAppleCreds(context.Context, *google_protobuf.Empty) (*AppleCredsWrapper, error)
	GetAppleCred(context.Context, *AppleCreds) (*AppleCreds, error)
	UpdateAppleCreds(context.Context, *AppleCreds) (*google_protobuf.Empty, error)
	AppleCredExists(context.Context, *AppleCreds) (*Exists, error)
	GetAllCreds(context.Context, *google_protobuf.Empty) (*AllCredsWrapper, error)
	BuildRuntime(context.Context, *BuildQuery) (*Builds, error)
	Logs(*BuildQuery, GuideOcelot_LogsServer) error
	LastFewSummaries(context.Context, *RepoAccount) (*Summaries, error)
	GetStatus(context.Context, *StatusQuery) (*Status, error)
	WatchRepo(context.Context, *RepoAccount) (*google_protobuf.Empty, error)
	BuildRepoAndHash(*BuildReq, GuideOcelot_BuildRepoAndHashServer) error
	PollRepo(context.Context, *PollRequest) (*google_protobuf.Empty, error)
	DeletePollRepo(context.Context, *PollRequest) (*google_protobuf.Empty, error)
	ListPolledRepos(context.Context, *google_protobuf.Empty) (*Polls, error)
	FindWerker(context.Context, *BuildReq) (*BuildRuntimeInfo, error)
	GetTrackedRepos(context.Context, *google_protobuf.Empty) (*AcctRepos, error)
}

func RegisterGuideOcelotServer(s *grpc.Server, srv GuideOcelotServer) {
	s.RegisterService(&_GuideOcelot_serviceDesc, srv)
}

func _GuideOcelot_GetVCSCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetVCSCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetVCSCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetVCSCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetVCSCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCSCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetVCSCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetVCSCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetVCSCred(ctx, req.(*VCSCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetVCSCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCSCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetVCSCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetVCSCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetVCSCreds(ctx, req.(*VCSCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_UpdateVCSCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCSCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).UpdateVCSCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/UpdateVCSCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).UpdateVCSCreds(ctx, req.(*VCSCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_VCSCredExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCSCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).VCSCredExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/VCSCredExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).VCSCredExists(ctx, req.(*VCSCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_CheckConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).CheckConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/CheckConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).CheckConn(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetVCSPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKeyWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetVCSPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetVCSPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetVCSPrivateKey(ctx, req.(*SSHKeyWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetRepoCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetRepoCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetRepoCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetRepoCred(ctx, req.(*RepoCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_UpdateRepoCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).UpdateRepoCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/UpdateRepoCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).UpdateRepoCreds(ctx, req.(*RepoCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_RepoCredExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).RepoCredExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/RepoCredExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).RepoCredExists(ctx, req.(*RepoCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetK8SCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetK8SCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetK8SCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetK8SCred(ctx, req.(*K8SCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_UpdateK8SCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).UpdateK8SCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/UpdateK8SCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).UpdateK8SCreds(ctx, req.(*K8SCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_K8SCredExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).K8SCredExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/K8SCredExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).K8SCredExists(ctx, req.(*K8SCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_UpdateSSHCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKeyWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).UpdateSSHCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/UpdateSSHCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).UpdateSSHCreds(ctx, req.(*SSHKeyWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetSSHCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKeyWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetSSHCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetSSHCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetSSHCred(ctx, req.(*SSHKeyWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SSHCredExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKeyWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SSHCredExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SSHCredExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SSHCredExists(ctx, req.(*SSHKeyWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetSSHCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKeyWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetSSHCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetSSHCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetSSHCreds(ctx, req.(*SSHKeyWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetSSHCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetSSHCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetSSHCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetSSHCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetRepoCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetRepoCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetRepoCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetRepoCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetRepoCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetRepoCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetRepoCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetRepoCreds(ctx, req.(*RepoCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetK8SCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetK8SCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetK8SCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetK8SCreds(ctx, req.(*K8SCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetK8SCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetK8SCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetK8SCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetK8SCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetAppleCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppleCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetAppleCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetAppleCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetAppleCreds(ctx, req.(*AppleCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetAppleCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetAppleCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetAppleCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetAppleCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetAppleCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppleCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetAppleCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetAppleCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetAppleCred(ctx, req.(*AppleCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_UpdateAppleCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppleCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).UpdateAppleCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/UpdateAppleCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).UpdateAppleCreds(ctx, req.(*AppleCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_AppleCredExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppleCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).AppleCredExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/AppleCredExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).AppleCredExists(ctx, req.(*AppleCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetAllCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetAllCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetAllCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetAllCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_BuildRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).BuildRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/BuildRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).BuildRuntime(ctx, req.(*BuildQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GuideOcelotServer).Logs(m, &guideOcelotLogsServer{stream})
}

type GuideOcelot_LogsServer interface {
	Send(*LineResponse) error
	grpc.ServerStream
}

type guideOcelotLogsServer struct {
	grpc.ServerStream
}

func (x *guideOcelotLogsServer) Send(m *LineResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GuideOcelot_LastFewSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).LastFewSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/LastFewSummaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).LastFewSummaries(ctx, req.(*RepoAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetStatus(ctx, req.(*StatusQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_WatchRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).WatchRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/WatchRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).WatchRepo(ctx, req.(*RepoAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_BuildRepoAndHash_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GuideOcelotServer).BuildRepoAndHash(m, &guideOcelotBuildRepoAndHashServer{stream})
}

type GuideOcelot_BuildRepoAndHashServer interface {
	Send(*LineResponse) error
	grpc.ServerStream
}

type guideOcelotBuildRepoAndHashServer struct {
	grpc.ServerStream
}

func (x *guideOcelotBuildRepoAndHashServer) Send(m *LineResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GuideOcelot_PollRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).PollRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/PollRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).PollRepo(ctx, req.(*PollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_DeletePollRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).DeletePollRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/DeletePollRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).DeletePollRepo(ctx, req.(*PollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_ListPolledRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).ListPolledRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/ListPolledRepos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).ListPolledRepos(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_FindWerker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).FindWerker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/FindWerker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).FindWerker(ctx, req.(*BuildReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetTrackedRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetTrackedRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetTrackedRepos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetTrackedRepos(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _GuideOcelot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "models.GuideOcelot",
	HandlerType: (*GuideOcelotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVCSCreds",
			Handler:    _GuideOcelot_GetVCSCreds_Handler,
		},
		{
			MethodName: "GetVCSCred",
			Handler:    _GuideOcelot_GetVCSCred_Handler,
		},
		{
			MethodName: "SetVCSCreds",
			Handler:    _GuideOcelot_SetVCSCreds_Handler,
		},
		{
			MethodName: "UpdateVCSCreds",
			Handler:    _GuideOcelot_UpdateVCSCreds_Handler,
		},
		{
			MethodName: "VCSCredExists",
			Handler:    _GuideOcelot_VCSCredExists_Handler,
		},
		{
			MethodName: "CheckConn",
			Handler:    _GuideOcelot_CheckConn_Handler,
		},
		{
			MethodName: "SetVCSPrivateKey",
			Handler:    _GuideOcelot_SetVCSPrivateKey_Handler,
		},
		{
			MethodName: "GetRepoCred",
			Handler:    _GuideOcelot_GetRepoCred_Handler,
		},
		{
			MethodName: "UpdateRepoCreds",
			Handler:    _GuideOcelot_UpdateRepoCreds_Handler,
		},
		{
			MethodName: "RepoCredExists",
			Handler:    _GuideOcelot_RepoCredExists_Handler,
		},
		{
			MethodName: "GetK8SCred",
			Handler:    _GuideOcelot_GetK8SCred_Handler,
		},
		{
			MethodName: "UpdateK8SCreds",
			Handler:    _GuideOcelot_UpdateK8SCreds_Handler,
		},
		{
			MethodName: "K8SCredExists",
			Handler:    _GuideOcelot_K8SCredExists_Handler,
		},
		{
			MethodName: "UpdateSSHCreds",
			Handler:    _GuideOcelot_UpdateSSHCreds_Handler,
		},
		{
			MethodName: "GetSSHCred",
			Handler:    _GuideOcelot_GetSSHCred_Handler,
		},
		{
			MethodName: "SSHCredExists",
			Handler:    _GuideOcelot_SSHCredExists_Handler,
		},
		{
			MethodName: "SetSSHCreds",
			Handler:    _GuideOcelot_SetSSHCreds_Handler,
		},
		{
			MethodName: "GetSSHCreds",
			Handler:    _GuideOcelot_GetSSHCreds_Handler,
		},
		{
			MethodName: "GetRepoCreds",
			Handler:    _GuideOcelot_GetRepoCreds_Handler,
		},
		{
			MethodName: "SetRepoCreds",
			Handler:    _GuideOcelot_SetRepoCreds_Handler,
		},
		{
			MethodName: "SetK8SCreds",
			Handler:    _GuideOcelot_SetK8SCreds_Handler,
		},
		{
			MethodName: "GetK8SCreds",
			Handler:    _GuideOcelot_GetK8SCreds_Handler,
		},
		{
			MethodName: "SetAppleCreds",
			Handler:    _GuideOcelot_SetAppleCreds_Handler,
		},
		{
			MethodName: "GetAppleCreds",
			Handler:    _GuideOcelot_GetAppleCreds_Handler,
		},
		{
			MethodName: "GetAppleCred",
			Handler:    _GuideOcelot_GetAppleCred_Handler,
		},
		{
			MethodName: "UpdateAppleCreds",
			Handler:    _GuideOcelot_UpdateAppleCreds_Handler,
		},
		{
			MethodName: "AppleCredExists",
			Handler:    _GuideOcelot_AppleCredExists_Handler,
		},
		{
			MethodName: "GetAllCreds",
			Handler:    _GuideOcelot_GetAllCreds_Handler,
		},
		{
			MethodName: "BuildRuntime",
			Handler:    _GuideOcelot_BuildRuntime_Handler,
		},
		{
			MethodName: "LastFewSummaries",
			Handler:    _GuideOcelot_LastFewSummaries_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _GuideOcelot_GetStatus_Handler,
		},
		{
			MethodName: "WatchRepo",
			Handler:    _GuideOcelot_WatchRepo_Handler,
		},
		{
			MethodName: "PollRepo",
			Handler:    _GuideOcelot_PollRepo_Handler,
		},
		{
			MethodName: "DeletePollRepo",
			Handler:    _GuideOcelot_DeletePollRepo_Handler,
		},
		{
			MethodName: "ListPolledRepos",
			Handler:    _GuideOcelot_ListPolledRepos_Handler,
		},
		{
			MethodName: "FindWerker",
			Handler:    _GuideOcelot_FindWerker_Handler,
		},
		{
			MethodName: "GetTrackedRepos",
			Handler:    _GuideOcelot_GetTrackedRepos_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _GuideOcelot_Logs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BuildRepoAndHash",
			Handler:       _GuideOcelot_BuildRepoAndHash_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "guideocelot.proto",
}

func init() { proto.RegisterFile("guideocelot.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 3947 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x5a, 0x4b, 0x8c, 0x1c, 0xc7,
	0x79, 0x56, 0xcf, 0x3e, 0xb4, 0x5b, 0xcb, 0xc7, 0xb2, 0xc9, 0x50, 0xab, 0xf1, 0x43, 0x85, 0x8e,
	0xad, 0x07, 0xb5, 0x9c, 0x95, 0xe8, 0x38, 0x5e, 0xd0, 0x70, 0xa0, 0xd6, 0x4a, 0x22, 0x09, 0x51,
	0x36, 0x35, 0x4b, 0x59, 0x41, 0x0e, 0xc1, 0xd6, 0x74, 0xd7, 0xcc, 0x34, 0xb7, 0xa7, 0xab, 0x59,
	0x55, 0xbd, 0xc3, 0x01, 0x4d, 0xc0, 0xd6, 0x21, 0x0e, 0x02, 0x04, 0x41, 0x46, 0x02, 0xec, 0x04,
	0x7e, 0xc8, 0x97, 0x00, 0x46, 0x60, 0x24, 0x40, 0x84, 0x18, 0xc8, 0x21, 0x07, 0xe7, 0x64, 0x5d,
	0x12, 0xc0, 0x09, 0xf2, 0x40, 0x90, 0x18, 0x42, 0x90, 0x43, 0x80, 0xe4, 0x1e, 0x20, 0x48, 0x82,
	0xff, 0xaf, 0xaa, 0x9e, 0xee, 0x79, 0x2c, 0xa9, 0x85, 0x4f, 0x33, 0xf5, 0xfe, 0xbf, 0xff, 0xff,
	0xea, 0xff, 0xff, 0xaa, 0x6a, 0x72, 0xae, 0x57, 0x24, 0x31, 0x17, 0x11, 0x4f, 0x85, 0x6e, 0xe5,
	0x52, 0x68, 0xe1, 0xaf, 0x0e, 0x44, 0xcc, 0x53, 0xd5, 0xdc, 0x88, 0x24, 0x8f, 0x95, 0xa9, 0x6c,
	0x7e, 0xa2, 0x27, 0x44, 0x2f, 0xe5, 0x3b, 0x58, 0xea, 0x14, 0xdd, 0x1d, 0x3e, 0xc8, 0xf5, 0xc8,
	0x36, 0x7e, 0xd2, 0x36, 0xb2, 0x3c, 0xd9, 0x61, 0x59, 0x26, 0x34, 0xd3, 0x89, 0xc8, 0xdc, 0xd0,
	0xa7, 0xa6, 0x87, 0xea, 0x64, 0xc0, 0x95, 0x66, 0x83, 0xdc, 0x76, 0xd8, 0xc6, 0x9f, 0xe8, 0x72,
	0x8f, 0x67, 0x97, 0xd5, 0x90, 0xf5, 0x7a, 0x5c, 0xee, 0x88, 0x1c, 0xa7, 0x98, 0x9d, 0x2e, 0x68,
	0x93, 0xb5, 0x97, 0x8b, 0x24, 0x8d, 0xdb, 0xfc, 0xae, 0xdf, 0x24, 0x6b, 0x2c, 0x8a, 0x74, 0x9b,
	0xe7, 0x62, 0xcb, 0xa3, 0xde, 0xb3, 0xeb, 0xed, 0xb2, 0xec, 0xfb, 0x64, 0xb9, 0xcf, 0x54, 0x7f,
	0xab, 0x81, 0xf5, 0xf8, 0xdf, 0xbf, 0x48, 0x56, 0x3b, 0x92, 0x65, 0x51, 0x7f, 0x6b, 0x09, 0x6b,
	0x6d, 0x29, 0xb8, 0x4f, 0x36, 0xf6, 0x35, 0xd3, 0x85, 0x7a, 0xb3, 0xe0, 0x72, 0x54, 0x0e, 0xf5,
	0x2a, 0x43, 0xed, 0x52, 0x5f, 0x66, 0x03, 0x6e, 0xa7, 0x2c, 0xcb, 0xd0, 0x26, 0x79, 0x2e, 0xb0,
	0xcd, 0x4c, 0x5c, 0x96, 0x7d, 0x4a, 0x36, 0x72, 0x26, 0x75, 0xc2, 0x52, 0x94, 0x72, 0x19, 0x9b,
	0xab, 0x55, 0xc1, 0x55, 0x42, 0x10, 0xd0, 0xe2, 0xb5, 0xb7, 0xc8, 0xe3, 0x1d, 0xe8, 0x71, 0x23,
	0xc6, 0xa5, 0x97, 0xda, 0xae, 0x18, 0xfc, 0xbe, 0x47, 0x56, 0x71, 0xb0, 0xf2, 0xaf, 0x90, 0x55,
	0xac, 0x55, 0x5b, 0x1e, 0x5d, 0x7a, 0x76, 0xe3, 0x4a, 0xb3, 0x65, 0xec, 0xd8, 0x32, 0xed, 0xf6,
	0xe7, 0xd5, 0x4c, 0xcb, 0x51, 0xdb, 0xf6, 0x6c, 0xee, 0x93, 0x8d, 0x4a, 0xb5, 0xbf, 0x49, 0x96,
	0x0e, 0xf9, 0xc8, 0x2e, 0x0d, 0x7f, 0xfd, 0x16, 0x59, 0x39, 0x62, 0x69, 0x61, 0x20, 0x6f, 0x5c,
	0xd9, 0xaa, 0xcd, 0xd9, 0x2e, 0x32, 0x30, 0xe5, 0x8d, 0xac, 0x2b, 0xda, 0xa6, 0xdb, 0xd5, 0xc6,
	0xae, 0x17, 0xfc, 0xb9, 0x47, 0x36, 0xa7, 0xdb, 0x01, 0x56, 0x2c, 0x32, 0x8e, 0x73, 0xaf, 0xb5,
	0xf1, 0xbf, 0x7f, 0x86, 0x34, 0x92, 0xdc, 0x2a, 0xb3, 0x91, 0xe4, 0xa0, 0xc6, 0x9e, 0xcc, 0xa3,
	0x5b, 0x42, 0x6a, 0xa7, 0x46, 0x57, 0x2e, 0xd5, 0xb2, 0xbc, 0xc0, 0x24, 0x2b, 0xc7, 0x98, 0x64,
	0x75, 0xca, 0x24, 0x17, 0xc9, 0xea, 0x50, 0xe1, 0x2a, 0x8f, 0x1b, 0x16, 0x98, 0x52, 0xd0, 0x22,
	0xa7, 0x6e, 0x26, 0x19, 0x6f, 0x73, 0x95, 0x8b, 0x4c, 0x71, 0xff, 0xd3, 0x84, 0x88, 0x42, 0xe7,
	0x85, 0x86, 0x5a, 0xab, 0x95, 0x4a, 0x4d, 0xf0, 0x26, 0xd9, 0x00, 0x03, 0x86, 0x51, 0x24, 0x8a,
	0x0c, 0x45, 0x94, 0x13, 0x22, 0xe2, 0x7f, 0xb0, 0x1c, 0x33, 0xcd, 0x16, 0xa7, 0x2b, 0xfa, 0x17,
	0xc8, 0x4a, 0x9a, 0x0c, 0x12, 0x83, 0x74, 0xa5, 0x6d, 0x0a, 0xc1, 0x37, 0x3d, 0xb2, 0x6a, 0x98,
	0xe8, 0xbf, 0x40, 0xd6, 0xd0, 0x4a, 0xfb, 0xc5, 0x00, 0xa7, 0xdc, 0xb8, 0x72, 0xa1, 0xa6, 0xfd,
	0xfd, 0x62, 0x30, 0x60, 0x72, 0xd4, 0x2e, 0x7b, 0xf9, 0xcf, 0x93, 0x55, 0xa5, 0x59, 0x8f, 0xab,
	0xad, 0x06, 0x32, 0xe0, 0xbc, 0xeb, 0xbf, 0x0f, 0xb5, 0x66, 0xda, 0xb6, 0xed, 0x02, 0xe0, 0x12,
	0x75, 0x23, 0xdb, 0x13, 0x99, 0x2a, 0x52, 0x14, 0x62, 0xad, 0x5d, 0xa9, 0x09, 0xfe, 0xd1, 0xc3,
	0x3d, 0xe1, 0xc6, 0x01, 0x8f, 0x2b, 0x45, 0x0b, 0xb2, 0xd6, 0xe3, 0x02, 0x59, 0xe1, 0x52, 0x0a,
	0x69, 0x91, 0x9a, 0x02, 0x28, 0x5b, 0x99, 0x21, 0x06, 0xa8, 0x2d, 0x81, 0x81, 0x06, 0x5c, 0x29,
	0x14, 0x77, 0x99, 0x2e, 0x81, 0x81, 0x5c, 0xd9, 0xdf, 0x25, 0xeb, 0x4a, 0x33, 0xa9, 0x6f, 0x27,
	0xd6, 0xb2, 0xc0, 0x66, 0xe3, 0x45, 0x5a, 0xce, 0x8b, 0xb4, 0x6e, 0x3b, 0x2f, 0xd2, 0x9e, 0x74,
	0xf6, 0x3f, 0x43, 0x4e, 0x23, 0xbe, 0x57, 0x0a, 0x89, 0x4e, 0x03, 0x6d, 0xef, 0xb5, 0xeb, 0x95,
	0xc1, 0x07, 0x0d, 0x72, 0xaa, 0xaa, 0xc3, 0xb9, 0x9b, 0xee, 0x22, 0x59, 0xed, 0xb2, 0x24, 0xe5,
	0x66, 0xcf, 0xad, 0xb5, 0x6d, 0x09, 0x84, 0x43, 0x8d, 0xa3, 0x70, 0x4b, 0x0f, 0x17, 0xae, 0xec,
	0x5c, 0x25, 0xc3, 0x72, 0x9d, 0x0c, 0x9f, 0x21, 0xa7, 0xb1, 0x5b, 0x29, 0xf6, 0x8a, 0x11, 0xbb,
	0x56, 0x59, 0x12, 0x6c, 0xb5, 0x42, 0xb0, 0x89, 0x47, 0x7b, 0xbc, 0xea, 0xd1, 0xaa, 0x2e, 0x63,
	0xad, 0xe6, 0x32, 0x40, 0xfe, 0xbb, 0x05, 0x2f, 0x38, 0xca, 0xbf, 0xfe, 0x70, 0xf9, 0xcb, 0xce,
	0xc1, 0xe7, 0xc9, 0xba, 0x51, 0x58, 0xc2, 0x95, 0xff, 0x2c, 0x59, 0x56, 0xc5, 0xc0, 0x39, 0x9b,
	0xf9, 0xd4, 0xc4, 0x1e, 0xc1, 0x9f, 0x34, 0xc8, 0xc6, 0x2d, 0x91, 0xa6, 0x6d, 0x7e, 0xb7, 0xe0,
	0x4a, 0x57, 0xd5, 0xe0, 0xd5, 0xd5, 0xe0, 0x00, 0x36, 0x2a, 0x00, 0x7d, 0xb2, 0x1c, 0x49, 0x91,
	0xb9, 0x8d, 0x0f, 0xff, 0x81, 0x3b, 0x06, 0x26, 0x57, 0x6e, 0xe3, 0xbb, 0xb2, 0xff, 0x6b, 0xe4,
	0x54, 0xca, 0x94, 0xde, 0x93, 0x22, 0x43, 0x84, 0xab, 0x0f, 0x45, 0x58, 0xeb, 0xef, 0xef, 0x11,
	0x02, 0xe5, 0xeb, 0x4c, 0xc1, 0xec, 0x8f, 0x23, 0xba, 0x5f, 0x76, 0xe8, 0x2a, 0x30, 0x5a, 0x37,
	0xcb, 0x5e, 0xc6, 0xa7, 0x56, 0x86, 0x35, 0xbf, 0x44, 0xce, 0x4e, 0x35, 0xcf, 0xf1, 0xad, 0x17,
	0xaa, 0xbe, 0x75, 0xbd, 0xea, 0x41, 0xaf, 0x90, 0x15, 0x58, 0x49, 0xf9, 0xcf, 0x91, 0x95, 0x1c,
	0xfe, 0x58, 0x2d, 0x9f, 0x9f, 0x23, 0x47, 0xdb, 0xf4, 0x08, 0x28, 0x59, 0x7d, 0xf5, 0x5e, 0xa2,
	0xb4, 0x02, 0x4a, 0x70, 0xfc, 0x67, 0x9d, 0xad, 0x2d, 0x05, 0xbb, 0x64, 0x2d, 0x74, 0xc1, 0xf1,
	0x63, 0xd9, 0x20, 0xf8, 0x22, 0x59, 0x77, 0x23, 0x95, 0xdf, 0x22, 0xeb, 0x2e, 0xc6, 0x3a, 0xb9,
	0x36, 0x9d, 0x5c, 0xae, 0x57, 0x7b, 0xd2, 0xe5, 0xca, 0x0f, 0xaf, 0x91, 0x8d, 0x6b, 0x90, 0x64,
	0x7c, 0x05, 0x93, 0x0c, 0xff, 0x43, 0x8f, 0x6c, 0x5c, 0xe3, 0xfa, 0xab, 0x7b, 0xfb, 0x7b, 0x90,
	0x5f, 0xf8, 0x17, 0x67, 0x4c, 0xf3, 0x2a, 0xa4, 0x16, 0xcd, 0x12, 0x2c, 0x74, 0x7b, 0x5b, 0xb2,
	0x3c, 0xe7, 0x32, 0xf8, 0x5d, 0x6f, 0x1c, 0x16, 0x64, 0x05, 0x33, 0x13, 0xb2, 0x74, 0x14, 0x29,
	0xff, 0x42, 0x9b, 0xeb, 0x42, 0x66, 0x94, 0xa5, 0x29, 0x3d, 0x8a, 0x14, 0xc5, 0xa6, 0xe6, 0x9b,
	0xa6, 0x56, 0x61, 0xf5, 0x57, 0xf7, 0xf6, 0x4d, 0x35, 0xd5, 0x7d, 0xa6, 0xa9, 0x49, 0x76, 0x68,
	0x9f, 0x29, 0xca, 0xb2, 0x98, 0x46, 0x2c, 0xa3, 0x85, 0xe2, 0xb4, 0x2b, 0x24, 0x8d, 0xfa, 0x3c,
	0x3a, 0x4c, 0xb2, 0x1e, 0x15, 0x85, 0xa6, 0x91, 0x88, 0x39, 0xd5, 0x82, 0xe2, 0xc6, 0x69, 0xbd,
	0xf3, 0xb3, 0x7f, 0x7b, 0xb7, 0x71, 0xd6, 0x3f, 0xbd, 0x73, 0xf4, 0xe2, 0x0e, 0x4e, 0xb6, 0x03,
	0xab, 0xff, 0x8f, 0x47, 0xc8, 0x04, 0x8c, 0x5f, 0x2a, 0xc2, 0xa1, 0x6b, 0xce, 0xd4, 0x04, 0x3f,
	0xf5, 0xc6, 0xe1, 0xb7, 0xbd, 0x1a, 0x86, 0xad, 0x36, 0xd7, 0x32, 0xe1, 0x47, 0x9c, 0xaa, 0x24,
	0xeb, 0xa5, 0xbc, 0x94, 0xb8, 0x99, 0x3b, 0x1c, 0x0e, 0x1a, 0x4d, 0xba, 0x34, 0xd1, 0xd4, 0x98,
	0xb4, 0x45, 0x55, 0xd1, 0xd1, 0xa3, 0x9c, 0xd3, 0x44, 0x51, 0x46, 0x25, 0xbf, 0x5b, 0x24, 0xd0,
	0xe7, 0x2e, 0x64, 0x12, 0x34, 0x67, 0x92, 0x0d, 0x5a, 0x94, 0xb4, 0x79, 0x97, 0x4b, 0x00, 0x62,
	0x24, 0x71, 0x82, 0x20, 0x60, 0xdd, 0xe7, 0x54, 0x74, 0xee, 0xf0, 0x48, 0xd3, 0x6e, 0xc2, 0xd3,
	0x58, 0x21, 0xcc, 0x67, 0xfc, 0xcf, 0xd6, 0x60, 0xee, 0xdc, 0x77, 0x71, 0xf5, 0xc1, 0xce, 0xfd,
	0x24, 0xe6, 0x99, 0x4e, 0xba, 0x09, 0x97, 0x0f, 0xfc, 0xff, 0x80, 0x20, 0x51, 0xb1, 0xe5, 0x2c,
	0xfe, 0x05, 0xd6, 0x0d, 0xfe, 0xd4, 0x1b, 0x87, 0xef, 0xd5, 0xb5, 0xe0, 0x87, 0x71, 0x8c, 0xc8,
	0x61, 0x24, 0xac, 0xc1, 0xd2, 0xa6, 0x84, 0x3a, 0x46, 0x33, 0x3e, 0x2c, 0x75, 0x62, 0x5a, 0x68,
	0x24, 0xb2, 0x6e, 0xd2, 0xb3, 0xae, 0x11, 0xd0, 0x59, 0xb3, 0xa2, 0x19, 0xc1, 0x72, 0x68, 0x4b,
	0x51, 0xe8, 0x13, 0x69, 0xc0, 0x0f, 0xea, 0x86, 0xbe, 0xea, 0x5d, 0xf2, 0xff, 0xa6, 0x41, 0xce,
	0xbc, 0x95, 0xc7, 0x4c, 0xf3, 0x13, 0xe0, 0x7d, 0xb7, 0x31, 0x0e, 0xff, 0xb5, 0x8e, 0xf7, 0x09,
	0x33, 0x19, 0x65, 0xd3, 0xa0, 0x7f, 0xec, 0xbd, 0x9a, 0xc5, 0xb9, 0x48, 0x32, 0x83, 0xa6, 0x80,
	0x6e, 0x40, 0x4a, 0x36, 0xad, 0x83, 0x24, 0xb3, 0xa8, 0x5b, 0xf4, 0x76, 0x3f, 0x51, 0x54, 0xf5,
	0x45, 0x91, 0xc6, 0x54, 0x64, 0xe9, 0x88, 0x76, 0x38, 0x8d, 0x58, 0x9a, 0x1a, 0xc6, 0xf4, 0x35,
	0xaf, 0x8e, 0xab, 0xb0, 0xe7, 0xf6, 0xb1, 0xec, 0x39, 0x89, 0xea, 0x2e, 0x35, 0x1f, 0x8d, 0x3c,
	0xa0, 0xd2, 0xcf, 0x91, 0xd3, 0x76, 0x46, 0xeb, 0xbb, 0x66, 0x15, 0x7a, 0xc6, 0xd5, 0x98, 0x1e,
	0xc1, 0x63, 0xfe, 0x97, 0xc8, 0xfa, 0x1e, 0xd8, 0x76, 0x4f, 0x64, 0xd9, 0x42, 0xef, 0xb1, 0xc8,
	0x0e, 0x8f, 0xf9, 0xef, 0x2c, 0x91, 0x4d, 0xc3, 0xd9, 0x5b, 0x32, 0x39, 0x62, 0x9a, 0xbf, 0xce,
	0x47, 0xfe, 0x2f, 0x95, 0xa9, 0xd2, 0xfe, 0xf5, 0xd7, 0xf9, 0xc8, 0xba, 0x9b, 0x85, 0xb3, 0xfc,
	0x65, 0x63, 0x1c, 0xfe, 0x56, 0xa3, 0x66, 0xcd, 0x4f, 0x85, 0x5a, 0xb3, 0xa8, 0x4f, 0x95, 0xea,
	0xd3, 0x43, 0x3e, 0x02, 0x95, 0x81, 0xb5, 0x6c, 0x72, 0xd8, 0xfc, 0x07, 0xcf, 0xb6, 0x83, 0xd2,
	0x22, 0x91, 0x69, 0x9e, 0x69, 0x45, 0x45, 0x97, 0xb2, 0x0c, 0x87, 0x74, 0x93, 0x14, 0x9d, 0x0d,
	0xc3, 0x9d, 0x6e, 0x9d, 0xb1, 0x35, 0x2b, 0xb6, 0x0d, 0x93, 0x34, 0x05, 0xa3, 0x32, 0x9c, 0x86,
	0xc7, 0xd0, 0x19, 0xe6, 0x42, 0xef, 0x84, 0x33, 0xb2, 0x24, 0xe3, 0xd2, 0xf0, 0x3f, 0x15, 0x19,
	0x10, 0x06, 0xda, 0xc1, 0x81, 0xab, 0x44, 0x0b, 0x39, 0x3a, 0x89, 0xbd, 0x6b, 0xea, 0x38, 0xc6,
	0xe8, 0xad, 0xe0, 0xb9, 0x47, 0x32, 0xfa, 0x8e, 0x52, 0x7d, 0xdc, 0x4b, 0x26, 0x08, 0x40, 0x84,
	0x40, 0xc7, 0x79, 0xce, 0xe9, 0xdf, 0xd5, 0xa8, 0xe6, 0x6c, 0x55, 0xf0, 0x87, 0xde, 0x38, 0x4c,
	0x9c, 0xd6, 0x4d, 0x7a, 0xf0, 0x84, 0x34, 0xee, 0xdf, 0x3a, 0x4e, 0xa8, 0x33, 0x9e, 0x33, 0x74,
	0x9e, 0xb3, 0xac, 0x9a, 0x75, 0x9d, 0xc7, 0x2b, 0x03, 0x81, 0x3d, 0xeb, 0x3f, 0x3d, 0x01, 0x06,
	0x53, 0x2d, 0xf4, 0x85, 0xef, 0x35, 0xc8, 0x59, 0xb3, 0xa3, 0x4b, 0x81, 0xe7, 0xc1, 0x5a, 0x44,
	0xa9, 0xbf, 0xf3, 0xc6, 0xe1, 0xfb, 0x5e, 0x1d, 0xdc, 0x45, 0xeb, 0x21, 0x4a, 0x08, 0xd6, 0x41,
	0x8c, 0x0a, 0x53, 0x0f, 0x6e, 0xf1, 0x11, 0x5d, 0xe2, 0x84, 0x06, 0x34, 0xc9, 0x34, 0xef, 0x99,
	0x4e, 0xb3, 0xbe, 0xb1, 0x14, 0xf4, 0x18, 0x63, 0x3f, 0xdf, 0x7c, 0x44, 0x9d, 0x80, 0xa5, 0x3f,
	0x4f, 0xce, 0xb8, 0x39, 0xed, 0x1e, 0x9f, 0xa3, 0x94, 0xd9, 0x4d, 0xfe, 0x33, 0x13, 0x58, 0x5f,
	0xdf, 0x9d, 0x0a, 0xac, 0xb6, 0xa2, 0x12, 0x58, 0x5d, 0x4d, 0xf0, 0xbe, 0x37, 0x0e, 0x73, 0xa7,
	0x40, 0x72, 0x58, 0x74, 0xb8, 0xcc, 0xb8, 0xe6, 0xca, 0x7f, 0xb2, 0xc7, 0x35, 0x7d, 0xbd, 0x2c,
	0x57, 0x35, 0xf9, 0x92, 0x63, 0xc9, 0xe1, 0xee, 0xc9, 0xe2, 0xeb, 0x6c, 0xbc, 0x3c, 0xdc, 0x5d,
	0x1c, 0x2f, 0xff, 0xd3, 0x73, 0x21, 0xc4, 0x49, 0x3d, 0x07, 0xd9, 0x71, 0x21, 0xf3, 0xc1, 0x3c,
	0x7c, 0xfd, 0x32, 0x90, 0x40, 0xa5, 0x61, 0xc1, 0x24, 0x36, 0xa0, 0x21, 0x27, 0xbd, 0x8f, 0x37,
	0xbf, 0x13, 0xe2, 0x51, 0xfd, 0xfb, 0x31, 0x60, 0xad, 0x7f, 0xb7, 0x33, 0x4e, 0xfb, 0xf7, 0x12,
	0xed, 0xac, 0xe9, 0xbf, 0x55, 0xc6, 0xd9, 0xfd, 0xfd, 0xeb, 0x46, 0x49, 0x1f, 0xd3, 0x3d, 0xc3,
	0x5e, 0xfa, 0xc1, 0x24, 0xd8, 0x2a, 0xd5, 0xf7, 0xed, 0x8c, 0xce, 0x3d, 0x37, 0xdf, 0xf1, 0x4a,
	0xa5, 0x39, 0x8f, 0x8d, 0xb1, 0x56, 0x71, 0xd0, 0x9c, 0x71, 0xaa, 0x2a, 0x92, 0x49, 0x0e, 0x2c,
	0x78, 0xa3, 0x50, 0x9a, 0xb2, 0x54, 0x72, 0x16, 0x8f, 0x0c, 0x35, 0xa0, 0x13, 0xa8, 0x27, 0x66,
	0x9a, 0x75, 0x98, 0xe2, 0xad, 0x13, 0x7b, 0xce, 0x9a, 0x3a, 0x95, 0xea, 0x1f, 0xa7, 0xce, 0xbf,
	0x35, 0x9b, 0xc2, 0xaa, 0x65, 0x91, 0x56, 0xe6, 0x57, 0x07, 0xdf, 0xf2, 0xc6, 0x61, 0xaf, 0xa6,
	0x13, 0xf0, 0x9d, 0xb5, 0xb4, 0xd3, 0x29, 0xa7, 0xdc, 0x15, 0x50, 0xf1, 0x8b, 0xd9, 0x15, 0xc7,
	0x20, 0xf3, 0x77, 0xc9, 0x69, 0x0b, 0xc9, 0xb2, 0x64, 0x01, 0xb0, 0x59, 0xaa, 0x7c, 0xa3, 0x81,
	0xf9, 0xe7, 0x49, 0x79, 0xf2, 0x13, 0x6f, 0x1c, 0xfe, 0x51, 0x9d, 0x27, 0x2e, 0x8c, 0x83, 0x6b,
	0xdd, 0xdf, 0xbf, 0xee, 0x42, 0xb9, 0x0d, 0xc8, 0xcd, 0xd1, 0x24, 0x1f, 0xad, 0x04, 0x7a, 0x96,
	0xb9, 0x0e, 0x54, 0xd9, 0xf3, 0x82, 0xc2, 0x73, 0x05, 0x8b, 0x22, 0xae, 0xe0, 0xd8, 0xc1, 0x07,
	0x94, 0x69, 0x2a, 0xcd, 0x85, 0xd8, 0xc9, 0xc9, 0x52, 0x4b, 0x4b, 0x6d, 0x28, 0xfd, 0x6d, 0x13,
	0x4a, 0x4b, 0x1d, 0x2c, 0xca, 0x88, 0xce, 0x56, 0x74, 0x03, 0x2b, 0x05, 0xb7, 0xc6, 0xe1, 0x6e,
	0x0d, 0xfb, 0xa5, 0x6b, 0x5c, 0xe3, 0x81, 0xe9, 0x30, 0x13, 0xc3, 0x0c, 0xe1, 0x57, 0x9c, 0x45,
	0xc5, 0x6d, 0xaa, 0x39, 0xa7, 0x21, 0x98, 0xe0, 0x27, 0x1e, 0x39, 0x55, 0x89, 0xea, 0x8b, 0x65,
	0x79, 0x62, 0x3a, 0x04, 0x38, 0x92, 0x7e, 0xbd, 0x4a, 0x52, 0x13, 0x04, 0x9f, 0xaf, 0x4b, 0x85,
	0xb1, 0x70, 0x91, 0x58, 0xcd, 0x8f, 0xd3, 0x19, 0x31, 0x6c, 0xfa, 0x67, 0xea, 0xb1, 0xcc, 0xff,
	0x4e, 0x83, 0x9c, 0xda, 0xaf, 0x82, 0xf8, 0x18, 0x41, 0xfc, 0xe7, 0xde, 0x38, 0xfc, 0xab, 0xa9,
	0x20, 0x7e, 0x0e, 0x28, 0x03, 0x84, 0x69, 0x97, 0xb9, 0xc9, 0xfb, 0x9e, 0xab, 0x9b, 0x8a, 0xec,
	0x2d, 0x9a, 0x33, 0xa5, 0x86, 0x42, 0xc6, 0xdb, 0xd8, 0xf4, 0x96, 0x4c, 0xb7, 0xa9, 0xdb, 0x35,
	0xdb, 0xe0, 0x9d, 0x64, 0xc6, 0x06, 0x1c, 0xcf, 0xad, 0xb8, 0x03, 0x99, 0xe4, 0xe5, 0x06, 0x6c,
	0x99, 0xaa, 0x01, 0x38, 0xab, 0x0e, 0x24, 0x07, 0xf7, 0x0a, 0xf5, 0xb5, 0x58, 0x44, 0x87, 0x5c,
	0x9e, 0x2c, 0xce, 0x9f, 0x0f, 0xa6, 0x74, 0x03, 0x74, 0xfb, 0x7b, 0x73, 0xe4, 0x3b, 0x41, 0xfc,
	0xfa, 0xae, 0x37, 0x0e, 0xbf, 0xe1, 0xcd, 0x0b, 0x60, 0x9f, 0x72, 0xea, 0xa8, 0x04, 0xe9, 0xca,
	0x79, 0xe8, 0x0d, 0x68, 0xfe, 0x32, 0x1f, 0x56, 0xa3, 0x58, 0x55, 0x67, 0x27, 0x08, 0x62, 0xb5,
	0x8d, 0x74, 0xb8, 0x8b, 0xe7, 0xbb, 0x6f, 0x9b, 0x8d, 0x54, 0x22, 0x7b, 0x28, 0x79, 0x5d, 0x4f,
	0x47, 0xde, 0x5f, 0x1f, 0x87, 0x2f, 0xcd, 0x83, 0xf7, 0x7c, 0x79, 0xbc, 0x47, 0x66, 0x4e, 0x40,
	0x48, 0x9e, 0x32, 0xcd, 0xe3, 0x2a, 0x2b, 0x67, 0x37, 0xd6, 0xe1, 0xae, 0xf2, 0xbf, 0xd9, 0x20,
	0xa7, 0xf7, 0xb9, 0x0e, 0xf3, 0x3c, 0xe5, 0x46, 0x38, 0xbf, 0xbc, 0x72, 0x29, 0xeb, 0x16, 0x2a,
	0xfe, 0xa7, 0xde, 0x38, 0xfc, 0xe3, 0x52, 0xf1, 0x2b, 0x0c, 0x46, 0xf8, 0x5b, 0x4e, 0xe7, 0x38,
	0x41, 0x55, 0xdd, 0x5f, 0xf7, 0x9c, 0xbe, 0x4d, 0x53, 0x55, 0xd5, 0x7b, 0x85, 0x94, 0x3c, 0xd3,
	0xe9, 0xc8, 0x1c, 0x32, 0x19, 0xc5, 0xc9, 0x68, 0xcc, 0x8f, 0x78, 0x2a, 0xc0, 0x77, 0xe5, 0x52,
	0xe0, 0x71, 0x05, 0x4e, 0xa3, 0x45, 0x9e, 0x0b, 0x09, 0xf8, 0xa6, 0x0d, 0x34, 0x91, 0xf9, 0x18,
	0x13, 0x5d, 0x08, 0xce, 0x4e, 0x94, 0x80, 0xcb, 0x80, 0x91, 0xde, 0xf3, 0xc8, 0xe9, 0x6b, 0x35,
	0x4d, 0x2c, 0x32, 0xd3, 0x93, 0xb3, 0x1a, 0x72, 0x86, 0xba, 0x35, 0x0e, 0x7f, 0x75, 0x4a, 0x1d,
	0x4f, 0xd7, 0x6c, 0x64, 0x50, 0x2d, 0x32, 0xcf, 0x39, 0x7f, 0x5a, 0x32, 0xd8, 0x15, 0xa7, 0xaa,
	0x62, 0xcd, 0xb5, 0xcf, 0x9c, 0xba, 0xe0, 0x7b, 0xde, 0x38, 0x4c, 0xa7, 0x4d, 0x53, 0x3f, 0xd3,
	0xb0, 0xd2, 0x0a, 0xcd, 0x97, 0xcb, 0x6b, 0xad, 0xb2, 0xee, 0x44, 0xa7, 0x9a, 0xe7, 0xfc, 0x67,
	0xa6, 0x10, 0x2c, 0x0c, 0xce, 0xff, 0xe5, 0x91, 0x4d, 0x93, 0x2a, 0x9d, 0x90, 0x7d, 0x3f, 0xf2,
	0xc6, 0xe1, 0xbd, 0x29, 0x84, 0x65, 0xc6, 0x9a, 0x39, 0x24, 0xf3, 0x92, 0xd6, 0x7b, 0x78, 0x8f,
	0x73, 0x6c, 0xbe, 0xfa, 0x48, 0x4c, 0xda, 0x6e, 0x3e, 0x2a, 0x5a, 0x60, 0xd8, 0x17, 0xc8, 0xd9,
	0x72, 0x56, 0x9b, 0x8f, 0xcc, 0x83, 0x3b, 0x9b, 0x8c, 0xbc, 0x84, 0xee, 0x23, 0x4c, 0xd3, 0x47,
	0x74, 0x1f, 0xae, 0xa7, 0x63, 0xe5, 0x63, 0xfe, 0x9f, 0x2d, 0xdb, 0x77, 0x09, 0xfb, 0x72, 0x36,
	0x59, 0x78, 0xf2, 0x40, 0x38, 0x59, 0xd8, 0xbc, 0xdc, 0x05, 0xff, 0xbb, 0x34, 0x0e, 0x3f, 0x5a,
	0xb2, 0x0f, 0x08, 0x97, 0x6d, 0x8a, 0xe1, 0x5f, 0x86, 0x33, 0x8f, 0x2d, 0x50, 0x95, 0xf3, 0x28,
	0xe9, 0x26, 0x91, 0x89, 0x81, 0xa2, 0x0b, 0x49, 0xaf, 0xad, 0x32, 0xd9, 0x4a, 0xf3, 0x07, 0x4b,
	0x9d, 0xca, 0xba, 0xc0, 0x9e, 0x42, 0xf1, 0x18, 0x75, 0xda, 0xe3, 0x1a, 0x6f, 0x9f, 0x32, 0x30,
	0x46, 0xcc, 0x35, 0x4b, 0x52, 0xa3, 0x6c, 0xcc, 0x6f, 0x74, 0x72, 0x64, 0xef, 0x20, 0x5a, 0xf4,
	0xed, 0x3e, 0xcf, 0xe8, 0x48, 0x14, 0x96, 0x6e, 0x47, 0x09, 0xa3, 0x8c, 0xf6, 0x99, 0xea, 0x6f,
	0x3b, 0xab, 0xe2, 0x25, 0x46, 0x2c, 0x28, 0xa3, 0xa9, 0x10, 0x87, 0x45, 0x0e, 0x06, 0xcf, 0x85,
	0xd2, 0x3d, 0xc9, 0x27, 0x06, 0xd4, 0x22, 0xbf, 0x9c, 0x82, 0x43, 0xb1, 0x69, 0x78, 0x92, 0x75,
	0x85, 0x1c, 0xa0, 0xec, 0xdb, 0xd0, 0x21, 0xc3, 0xc1, 0x30, 0x34, 0xc2, 0xa7, 0x2a, 0x60, 0x43,
	0x37, 0xc9, 0x62, 0xdc, 0xb9, 0xa2, 0x6b, 0x6e, 0x3d, 0x2c, 0x10, 0xc8, 0xcf, 0xb7, 0x69, 0xc2,
	0xb1, 0x72, 0xc8, 0xe5, 0x21, 0x97, 0x08, 0xe4, 0x19, 0x45, 0x93, 0x1c, 0xc3, 0x28, 0xb8, 0x28,
	0x5c, 0x5a, 0x69, 0xc9, 0xd9, 0x00, 0x90, 0x9a, 0x65, 0x53, 0xd1, 0x53, 0x2d, 0x4a, 0xe8, 0x8d,
	0x6e, 0xe5, 0x9e, 0x05, 0x6f, 0x63, 0xb2, 0x44, 0xf5, 0x79, 0x8c, 0xa3, 0x27, 0x83, 0xa0, 0xbb,
	0xbb, 0x80, 0x33, 0xf8, 0x61, 0x14, 0x8b, 0x07, 0x49, 0x46, 0x93, 0x4c, 0x69, 0xce, 0x62, 0x27,
	0x5c, 0x45, 0x0e, 0x65, 0x11, 0xe1, 0x0a, 0x42, 0xa4, 0x86, 0xb6, 0xf4, 0xe0, 0x15, 0x91, 0xf1,
	0x83, 0xf2, 0xce, 0x47, 0xcb, 0x82, 0x9b, 0x74, 0xc5, 0xf7, 0x37, 0x81, 0xca, 0x28, 0x8c, 0x33,
	0xf5, 0x47, 0xcb, 0x64, 0xf9, 0xa6, 0xe8, 0xa9, 0xb9, 0x6c, 0x29, 0x1f, 0x66, 0xaa, 0x2f, 0x9b,
	0xc1, 0x8f, 0x96, 0xc7, 0xe1, 0x1f, 0x2c, 0x4f, 0x73, 0xe6, 0x29, 0x83, 0xc6, 0x40, 0x41, 0x96,
	0xe4, 0x92, 0x1f, 0x25, 0xa2, 0x50, 0x96, 0x25, 0xff, 0xbe, 0x04, 0xac, 0xb2, 0xbd, 0x44, 0xd7,
	0x74, 0x44, 0x2a, 0x4c, 0xf1, 0xa9, 0x85, 0xd9, 0x2f, 0x4f, 0x74, 0x9f, 0x4b, 0xab, 0x8d, 0xce,
	0x88, 0xda, 0x17, 0x28, 0x2a, 0xa4, 0x65, 0x45, 0xd2, 0x2d, 0xeb, 0x20, 0x5e, 0x98, 0x29, 0xc0,
	0xa5, 0x69, 0xaa, 0xd9, 0x21, 0x57, 0xb0, 0x7e, 0xc4, 0xb3, 0x98, 0x67, 0x11, 0xa7, 0xe2, 0x88,
	0x9b, 0x71, 0x60, 0x14, 0xbc, 0x17, 0x1b, 0x70, 0xdd, 0x17, 0xb1, 0xd1, 0x12, 0x3e, 0x36, 0xe2,
	0xb5, 0x7d, 0x32, 0x65, 0x2f, 0xa5, 0xa1, 0xdd, 0x30, 0xb5, 0x45, 0xc3, 0x0a, 0x63, 0x15, 0x7d,
	0xe3, 0xad, 0xfd, 0xdb, 0xa0, 0x60, 0x03, 0x09, 0x08, 0x2f, 0xc5, 0xa0, 0x62, 0x23, 0x93, 0xba,
	0x2b, 0x9e, 0x1e, 0x81, 0xa5, 0xc0, 0xe0, 0xc8, 0x6f, 0x4c, 0xb1, 0x22, 0xa0, 0xdb, 0xb4, 0x31,
	0x80, 0x8b, 0x78, 0xaa, 0x3a, 0xaa, 0x51, 0x2e, 0x12, 0x59, 0xc6, 0x23, 0xdc, 0x7d, 0x15, 0x36,
	0x53, 0x4a, 0x92, 0x2e, 0x42, 0xaa, 0xc3, 0xc7, 0xec, 0xae, 0xcf, 0xa5, 0x49, 0xef, 0x06, 0x45,
	0xaa, 0x13, 0xf0, 0x91, 0x56, 0xe6, 0x61, 0xa2, 0xcd, 0x2d, 0xa2, 0x82, 0x4c, 0x70, 0x76, 0x7b,
	0x59, 0xf3, 0x40, 0x0f, 0x08, 0x5f, 0x4a, 0x53, 0x91, 0xcd, 0x39, 0x72, 0x4c, 0x38, 0x82, 0x16,
	0x9c, 0xf5, 0x9a, 0xc4, 0x5f, 0x03, 0x74, 0x60, 0xe3, 0x17, 0x3c, 0xff, 0xfb, 0x0d, 0xb2, 0x79,
	0x93, 0x29, 0xfd, 0x1a, 0x1f, 0x4e, 0xde, 0x00, 0xcf, 0x57, 0x33, 0x63, 0x77, 0xd3, 0x59, 0xa6,
	0xcb, 0x65, 0xbf, 0xe0, 0x23, 0x6f, 0x1c, 0xfe, 0x85, 0x47, 0xd6, 0xc0, 0x84, 0x47, 0x09, 0x1f,
	0xfa, 0xbf, 0xe2, 0x74, 0xa4, 0x5c, 0x1f, 0x1a, 0x09, 0x29, 0x91, 0x9e, 0x31, 0xde, 0x5c, 0xd6,
	0x0e, 0x55, 0x4f, 0x63, 0x32, 0xdc, 0xbc, 0x87, 0xf8, 0x5c, 0x70, 0x2c, 0x47, 0x8a, 0x8a, 0xc1,
	0x27, 0x5e, 0xa4, 0x3e, 0x1f, 0xde, 0x52, 0x95, 0xb7, 0xaa, 0xf8, 0xd6, 0x6e, 0xb5, 0xc5, 0x35,
	0xed, 0x8b, 0x21, 0x1d, 0xb0, 0x6c, 0x44, 0x79, 0xa6, 0x71, 0x46, 0xb7, 0xef, 0xcc, 0x52, 0x3c,
	0x46, 0x7d, 0x7c, 0xda, 0xff, 0x24, 0xe8, 0xc3, 0xac, 0x3b, 0xc2, 0x08, 0x02, 0xb3, 0x3d, 0xd8,
	0xb9, 0x0f, 0x93, 0x3f, 0xf0, 0xdf, 0x5d, 0x26, 0xeb, 0x70, 0x0e, 0x33, 0xcf, 0xdb, 0xd5, 0xb7,
	0x77, 0xf7, 0x5d, 0xc9, 0xc4, 0x75, 0x9b, 0xca, 0xe0, 0xe7, 0x4b, 0xe3, 0xf0, 0xc3, 0xa5, 0x89,
	0x5e, 0xe6, 0x3a, 0x71, 0xe3, 0x72, 0x39, 0xf8, 0x1a, 0x18, 0x44, 0x45, 0x46, 0xf9, 0x11, 0x98,
	0x0d, 0xdf, 0xb4, 0xc1, 0x0d, 0x32, 0xbb, 0x3d, 0xff, 0xaf, 0x51, 0xae, 0x4f, 0xab, 0xaa, 0x42,
	0xb2, 0xd8, 0xc1, 0xdd, 0x39, 0x7b, 0xf5, 0x7a, 0xc2, 0x25, 0x93, 0x51, 0xdf, 0x30, 0xc1, 0x9e,
	0x69, 0xad, 0x83, 0x06, 0xb6, 0x5d, 0x85, 0x3d, 0x75, 0x00, 0x4c, 0x3b, 0xc0, 0xa4, 0x2e, 0x4d,
	0x78, 0x5c, 0xe7, 0x1c, 0x26, 0x83, 0xc6, 0x37, 0xe0, 0x32, 0x9d, 0x91, 0xdd, 0xa9, 0x37, 0xba,
	0xf4, 0xc0, 0x85, 0xda, 0x03, 0x24, 0xf6, 0x81, 0xfb, 0x0c, 0xe3, 0x00, 0xd9, 0xed, 0xe6, 0xc3,
	0xb6, 0xcc, 0x3c, 0xcb, 0x81, 0x67, 0xd0, 0xa5, 0x11, 0x30, 0x10, 0x31, 0x48, 0x67, 0xdc, 0x25,
	0x0d, 0x88, 0x06, 0x46, 0x2d, 0x72, 0xbb, 0x1e, 0xae, 0x83, 0x32, 0x1c, 0x54, 0x3e, 0xac, 0x39,
	0x80, 0x5d, 0xd5, 0x4b, 0x8e, 0x78, 0xe6, 0x6e, 0x6b, 0xa4, 0x79, 0x32, 0xad, 0xcb, 0xce, 0xb4,
	0xe6, 0x83, 0x5c, 0x4f, 0xa2, 0x08, 0x1d, 0x30, 0x1d, 0xf5, 0x51, 0xa0, 0x8a, 0x02, 0xed, 0x5e,
	0xb2, 0x37, 0x43, 0xa8, 0xfa, 0x6a, 0x30, 0xd4, 0x7d, 0xa6, 0x8d, 0x8b, 0x3e, 0xe5, 0x13, 0xe4,
	0x89, 0xe1, 0xc1, 0xef, 0x34, 0xc8, 0xfa, 0xdb, 0x30, 0x1f, 0x3e, 0xbb, 0xce, 0xdd, 0x30, 0x8b,
	0x12, 0xa7, 0xbf, 0xf6, 0xc6, 0xe1, 0x8f, 0x3d, 0xb2, 0xa6, 0x25, 0xc3, 0x47, 0x49, 0xbf, 0x15,
	0x49, 0x6e, 0xae, 0xac, 0x86, 0xbc, 0xd3, 0xb7, 0x31, 0xb0, 0x93, 0xe8, 0x4e, 0x11, 0x1d, 0x72,
	0x6d, 0x1d, 0xf1, 0xe4, 0xa2, 0xb7, 0x79, 0x7f, 0x88, 0x40, 0x4a, 0x9e, 0x17, 0x79, 0x65, 0xa8,
	0xdb, 0x27, 0x46, 0x41, 0xf5, 0xfd, 0x81, 0x36, 0x3a, 0xd8, 0x46, 0xd3, 0x41, 0xcd, 0x81, 0xf1,
	0x7d, 0x07, 0xb8, 0x6f, 0x0e, 0x6a, 0x87, 0x4e, 0xeb, 0x31, 0x9c, 0x86, 0x6f, 0x7d, 0x05, 0x1c,
	0xaa, 0x88, 0x47, 0xa8, 0x8a, 0x33, 0xc1, 0x3a, 0xa8, 0x02, 0xc5, 0x80, 0xd4, 0xea, 0x5f, 0x1a,
	0xee, 0xcb, 0x20, 0x80, 0x9f, 0xc5, 0xd7, 0x99, 0xea, 0x4f, 0x0e, 0x90, 0xee, 0xab, 0xae, 0x05,
	0x31, 0xeb, 0xfb, 0x8d, 0x71, 0x08, 0xe7, 0xa0, 0xda, 0x16, 0xa9, 0xf8, 0x94, 0xb3, 0x5a, 0x26,
	0xbd, 0x1e, 0x97, 0xe5, 0x76, 0xf8, 0x27, 0xcf, 0x18, 0x6b, 0xda, 0xca, 0x53, 0xfd, 0x5a, 0x2e,
	0xc2, 0xf7, 0x12, 0xc3, 0x3e, 0xf3, 0x32, 0x6c, 0x6f, 0xfb, 0x3a, 0x9c, 0x9b, 0xeb, 0x40, 0x38,
	0x53, 0x77, 0x85, 0xe4, 0xc8, 0x4d, 0x88, 0x6e, 0x18, 0x97, 0x71, 0x26, 0x1e, 0x1b, 0xa7, 0x7c,
	0x07, 0xc2, 0xc2, 0x81, 0x7b, 0xf9, 0xb6, 0x74, 0x37, 0xdb, 0xc6, 0x68, 0x09, 0x97, 0x32, 0xab,
	0x20, 0xd7, 0xe7, 0x4c, 0x0e, 0x82, 0x1c, 0x98, 0x8f, 0x19, 0xec, 0x28, 0x60, 0x71, 0xa9, 0x6d,
	0xa6, 0xe8, 0x90, 0xa7, 0x69, 0xab, 0xaa, 0x5e, 0x44, 0x71, 0xd5, 0xbb, 0xf4, 0x82, 0x07, 0xc9,
	0xfa, 0x9a, 0xf9, 0x36, 0xa0, 0x4a, 0xb6, 0xca, 0xd7, 0x02, 0x0b, 0xc9, 0xf6, 0x81, 0x37, 0x0e,
	0xbf, 0x5b, 0x25, 0xdb, 0x73, 0x96, 0x31, 0xa0, 0x95, 0x5c, 0xa4, 0x29, 0x75, 0x2d, 0xb3, 0x3c,
	0xeb, 0x62, 0x7b, 0x9d, 0x66, 0x50, 0x65, 0x1c, 0xaf, 0xf9, 0x5a, 0xa2, 0xca, 0xa5, 0x92, 0x5e,
	0x91, 0x14, 0x99, 0xe3, 0x96, 0xfb, 0x80, 0xc3, 0xd0, 0x8b, 0xa1, 0xf7, 0xaa, 0x51, 0xcc, 0x60,
	0x3e, 0x1d, 0x60, 0x54, 0x82, 0xe9, 0x81, 0x51, 0x3f, 0xf4, 0xc8, 0x99, 0x57, 0x78, 0xca, 0x35,
	0x3f, 0x19, 0xec, 0x3b, 0xe3, 0xf0, 0xb5, 0x0a, 0xe8, 0xa7, 0x62, 0x9c, 0x6b, 0x21, 0xe0, 0xe6,
	0x93, 0x95, 0x0e, 0xf5, 0x26, 0x94, 0xee, 0x13, 0x97, 0x9e, 0x74, 0xd2, 0xcd, 0x06, 0x88, 0x0f,
	0x3d, 0x72, 0xf6, 0x66, 0xa2, 0x34, 0xc8, 0xc5, 0x63, 0xf3, 0x31, 0xc5, 0xa2, 0x43, 0xc2, 0xe9,
	0x2a, 0x08, 0x15, 0xfc, 0x9e, 0x37, 0x0e, 0xbf, 0x56, 0x91, 0xf3, 0x0b, 0x69, 0xa2, 0xb4, 0x55,
	0x92, 0x35, 0x03, 0xc4, 0x2d, 0xfc, 0xbc, 0x01, 0xd4, 0xd7, 0xe1, 0x20, 0x5c, 0x8e, 0x0b, 0xd9,
	0x0f, 0x1b, 0x58, 0xd6, 0xe3, 0xaa, 0x79, 0xd2, 0x81, 0xd5, 0x8c, 0x00, 0x5a, 0xfd, 0x0f, 0x1a,
	0x84, 0xbc, 0x96, 0x64, 0xf1, 0xdb, 0x98, 0xe0, 0xcc, 0xd9, 0xc4, 0x0b, 0x3f, 0x15, 0x0c, 0xfe,
	0xdb, 0x1b, 0x87, 0xff, 0xec, 0x4d, 0xc7, 0xba, 0x4b, 0x93, 0x58, 0x87, 0x61, 0x0a, 0x8f, 0x1b,
	0xb2, 0xc8, 0xf0, 0x21, 0x73, 0xea, 0xb4, 0xf2, 0x3d, 0x0f, 0x3a, 0x67, 0x5c, 0x0f, 0x85, 0x3c,
	0xa4, 0xa9, 0x98, 0x1c, 0x6c, 0x6c, 0xbe, 0x85, 0x78, 0x12, 0x45, 0xa3, 0x42, 0xba, 0xfb, 0x0a,
	0x7e, 0x8f, 0x47, 0x85, 0x7d, 0x46, 0x37, 0x7e, 0x41, 0xd8, 0xc8, 0x88, 0x73, 0xf3, 0xd8, 0x46,
	0xac, 0x42, 0x71, 0x3a, 0x74, 0x07, 0x99, 0x21, 0xcb, 0xd0, 0x65, 0x1c, 0xa2, 0x0b, 0x99, 0x12,
	0x03, 0x1a, 0x40, 0x8e, 0x4a, 0x3a, 0x8f, 0xd9, 0x5d, 0x8b, 0x9a, 0xdb, 0x33, 0xff, 0x1c, 0x3a,
	0x3f, 0x6c, 0xdd, 0xb9, 0x0f, 0xb3, 0x3f, 0xf0, 0xbf, 0xe3, 0x91, 0xb3, 0xd7, 0xb8, 0xbe, 0x0d,
	0x86, 0x7c, 0x18, 0x07, 0xce, 0x4d, 0x7f, 0x55, 0xa3, 0x82, 0xdf, 0x1c, 0x87, 0x5f, 0xac, 0xd0,
	0x60, 0x07, 0x96, 0x47, 0x8b, 0x42, 0x5c, 0x4f, 0x53, 0xc4, 0x6b, 0xe0, 0x6a, 0xb3, 0x82, 0x4b,
	0xa1, 0xf0, 0xfa, 0xce, 0x58, 0xb1, 0xe9, 0x6f, 0x81, 0x5c, 0xb6, 0xc3, 0xe5, 0x2a, 0x0f, 0x5e,
	0xbe, 0x3b, 0x0e, 0xef, 0xf8, 0x21, 0x39, 0x8f, 0xdf, 0xeb, 0x50, 0xf3, 0xc1, 0x0e, 0xdd, 0xe7,
	0xf2, 0x88, 0xcb, 0xe0, 0xb3, 0x64, 0xe3, 0x0e, 0x57, 0x2a, 0xa1, 0xaa, 0xcf, 0xb2, 0xc3, 0xe6,
	0x45, 0x2c, 0xe0, 0xff, 0x97, 0xf0, 0xb4, 0xf6, 0xe2, 0x8b, 0xad, 0x48, 0x0c, 0xae, 0x2c, 0xbd,
	0xd8, 0x7a, 0xe1, 0x92, 0xd7, 0xb8, 0xb2, 0x09, 0x07, 0x6d, 0x7b, 0xe4, 0xdc, 0xb9, 0xa3, 0x44,
	0x76, 0x75, 0xa6, 0xe6, 0x37, 0x1a, 0x79, 0xa7, 0xb3, 0x8a, 0xa8, 0x3f, 0xf7, 0xff, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x5b, 0xb5, 0xa1, 0xcb, 0x89, 0x2c, 0x00, 0x00,
}
