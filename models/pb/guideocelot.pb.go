// Code generated by protoc-gen-go. DO NOT EDIT.
// source: guideocelot.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BuildReq struct {
	// acctRepo is the ocelot account to which the creds are uploaded and the repository you wish to operate on, in the form account/repo
	AcctRepo string `protobuf:"bytes,1,opt,name=acctRepo" json:"acctRepo,omitempty"`
	// hash is the git hash to trigger.
	Hash string `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
	// branch is the branch that corresponds to the git hash. if the git hash has never been built by ocelot, this field is required.
	Branch string `protobuf:"bytes,3,opt,name=branch" json:"branch,omitempty"`
	// force is a flag that says to build even if it doesn't match the acceptable branches list and even if there is a "skip" ci message
	Force                bool     `protobuf:"varint,4,opt,name=force" json:"force,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildReq) Reset()         { *m = BuildReq{} }
func (m *BuildReq) String() string { return proto.CompactTextString(m) }
func (*BuildReq) ProtoMessage()    {}
func (*BuildReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_guideocelot_e68d571e8462b0d7, []int{0}
}
func (m *BuildReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildReq.Unmarshal(m, b)
}
func (m *BuildReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildReq.Marshal(b, m, deterministic)
}
func (dst *BuildReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildReq.Merge(dst, src)
}
func (m *BuildReq) XXX_Size() int {
	return xxx_messageInfo_BuildReq.Size(m)
}
func (m *BuildReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildReq.DiscardUnknown(m)
}

var xxx_messageInfo_BuildReq proto.InternalMessageInfo

func (m *BuildReq) GetAcctRepo() string {
	if m != nil {
		return m.AcctRepo
	}
	return ""
}

func (m *BuildReq) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildReq) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *BuildReq) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type StatusQuery struct {
	// hash is the git hash to get status of
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	// acctName is the corresponding account that the hash is attached to
	AcctName string `protobuf:"bytes,2,opt,name=acctName" json:"acctName,omitempty"`
	// repoName is the corresponding repo name that the hash is attached to
	RepoName string `protobuf:"bytes,3,opt,name=repoName" json:"repoName,omitempty"`
	// partialRepo is just the first n letters of repo
	PartialRepo          string   `protobuf:"bytes,4,opt,name=partialRepo" json:"partialRepo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusQuery) Reset()         { *m = StatusQuery{} }
func (m *StatusQuery) String() string { return proto.CompactTextString(m) }
func (*StatusQuery) ProtoMessage()    {}
func (*StatusQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_guideocelot_e68d571e8462b0d7, []int{1}
}
func (m *StatusQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusQuery.Unmarshal(m, b)
}
func (m *StatusQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusQuery.Marshal(b, m, deterministic)
}
func (dst *StatusQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusQuery.Merge(dst, src)
}
func (m *StatusQuery) XXX_Size() int {
	return xxx_messageInfo_StatusQuery.Size(m)
}
func (m *StatusQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusQuery.DiscardUnknown(m)
}

var xxx_messageInfo_StatusQuery proto.InternalMessageInfo

func (m *StatusQuery) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *StatusQuery) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *StatusQuery) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *StatusQuery) GetPartialRepo() string {
	if m != nil {
		return m.PartialRepo
	}
	return ""
}

// BuildQuery is the message that is used for getting data on a specific build.
// You can query by hash, in which case if there are multiple of the same commit it will pick the latest,
// or you can query by build-id which in the case of log retrieval is only allowed if the build is completed.
type BuildQuery struct {
	// hash is the git hash that corresponds to a commit you wish to get information on
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	// build id is the build number given by ocelot that is associated with the commit
	BuildId              int64    `protobuf:"varint,2,opt,name=buildId" json:"buildId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildQuery) Reset()         { *m = BuildQuery{} }
func (m *BuildQuery) String() string { return proto.CompactTextString(m) }
func (*BuildQuery) ProtoMessage()    {}
func (*BuildQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_guideocelot_e68d571e8462b0d7, []int{2}
}
func (m *BuildQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildQuery.Unmarshal(m, b)
}
func (m *BuildQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildQuery.Marshal(b, m, deterministic)
}
func (dst *BuildQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildQuery.Merge(dst, src)
}
func (m *BuildQuery) XXX_Size() int {
	return xxx_messageInfo_BuildQuery.Size(m)
}
func (m *BuildQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildQuery.DiscardUnknown(m)
}

var xxx_messageInfo_BuildQuery proto.InternalMessageInfo

func (m *BuildQuery) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildQuery) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

type Builds struct {
	Builds               map[string]*BuildRuntimeInfo `protobuf:"bytes,1,rep,name=builds" json:"builds,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *Builds) Reset()         { *m = Builds{} }
func (m *Builds) String() string { return proto.CompactTextString(m) }
func (*Builds) ProtoMessage()    {}
func (*Builds) Descriptor() ([]byte, []int) {
	return fileDescriptor_guideocelot_e68d571e8462b0d7, []int{3}
}
func (m *Builds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Builds.Unmarshal(m, b)
}
func (m *Builds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Builds.Marshal(b, m, deterministic)
}
func (dst *Builds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Builds.Merge(dst, src)
}
func (m *Builds) XXX_Size() int {
	return xxx_messageInfo_Builds.Size(m)
}
func (m *Builds) XXX_DiscardUnknown() {
	xxx_messageInfo_Builds.DiscardUnknown(m)
}

var xxx_messageInfo_Builds proto.InternalMessageInfo

func (m *Builds) GetBuilds() map[string]*BuildRuntimeInfo {
	if m != nil {
		return m.Builds
	}
	return nil
}

type BuildRuntimeInfo struct {
	// done says whether or not the build has completed
	Done bool `protobuf:"varint,1,opt,name=done" json:"done,omitempty"`
	// ip is the ip of the werker node that is running the build
	Ip string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	// grpcPort is the grpc port of the werker running the build
	GrpcPort string `protobuf:"bytes,3,opt,name=grpcPort" json:"grpcPort,omitempty"`
	// hash is the git hash that is currently being built
	Hash string `protobuf:"bytes,4,opt,name=hash" json:"hash,omitempty"`
	// acctName is the vcs account that this build is assocated with
	AcctName string `protobuf:"bytes,5,opt,name=acctName" json:"acctName,omitempty"`
	// repoName is the name of the git repository that is associated with this commit/build
	RepoName             string   `protobuf:"bytes,6,opt,name=repoName" json:"repoName,omitempty"`
	WsPort               string   `protobuf:"bytes,7,opt,name=wsPort" json:"wsPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildRuntimeInfo) Reset()         { *m = BuildRuntimeInfo{} }
func (m *BuildRuntimeInfo) String() string { return proto.CompactTextString(m) }
func (*BuildRuntimeInfo) ProtoMessage()    {}
func (*BuildRuntimeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_guideocelot_e68d571e8462b0d7, []int{4}
}
func (m *BuildRuntimeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildRuntimeInfo.Unmarshal(m, b)
}
func (m *BuildRuntimeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildRuntimeInfo.Marshal(b, m, deterministic)
}
func (dst *BuildRuntimeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildRuntimeInfo.Merge(dst, src)
}
func (m *BuildRuntimeInfo) XXX_Size() int {
	return xxx_messageInfo_BuildRuntimeInfo.Size(m)
}
func (m *BuildRuntimeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildRuntimeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BuildRuntimeInfo proto.InternalMessageInfo

func (m *BuildRuntimeInfo) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func (m *BuildRuntimeInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *BuildRuntimeInfo) GetGrpcPort() string {
	if m != nil {
		return m.GrpcPort
	}
	return ""
}

func (m *BuildRuntimeInfo) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildRuntimeInfo) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *BuildRuntimeInfo) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *BuildRuntimeInfo) GetWsPort() string {
	if m != nil {
		return m.WsPort
	}
	return ""
}

type LineResponse struct {
	OutputLine           string   `protobuf:"bytes,1,opt,name=outputLine" json:"outputLine,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LineResponse) Reset()         { *m = LineResponse{} }
func (m *LineResponse) String() string { return proto.CompactTextString(m) }
func (*LineResponse) ProtoMessage()    {}
func (*LineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_guideocelot_e68d571e8462b0d7, []int{5}
}
func (m *LineResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LineResponse.Unmarshal(m, b)
}
func (m *LineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LineResponse.Marshal(b, m, deterministic)
}
func (dst *LineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LineResponse.Merge(dst, src)
}
func (m *LineResponse) XXX_Size() int {
	return xxx_messageInfo_LineResponse.Size(m)
}
func (m *LineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LineResponse proto.InternalMessageInfo

func (m *LineResponse) GetOutputLine() string {
	if m != nil {
		return m.OutputLine
	}
	return ""
}

type RepoAccount struct {
	// repo is the VCS repository
	Repo string `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	// account is the VCS account
	Account string `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	// limit is the number of summary records desired to be returned
	Limit                int32    `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RepoAccount) Reset()         { *m = RepoAccount{} }
func (m *RepoAccount) String() string { return proto.CompactTextString(m) }
func (*RepoAccount) ProtoMessage()    {}
func (*RepoAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_guideocelot_e68d571e8462b0d7, []int{6}
}
func (m *RepoAccount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RepoAccount.Unmarshal(m, b)
}
func (m *RepoAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RepoAccount.Marshal(b, m, deterministic)
}
func (dst *RepoAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepoAccount.Merge(dst, src)
}
func (m *RepoAccount) XXX_Size() int {
	return xxx_messageInfo_RepoAccount.Size(m)
}
func (m *RepoAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_RepoAccount.DiscardUnknown(m)
}

var xxx_messageInfo_RepoAccount proto.InternalMessageInfo

func (m *RepoAccount) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *RepoAccount) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RepoAccount) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type Status struct {
	// buildSum is the BuildSummary object that correlates to the build in question
	BuildSum *BuildSummary `protobuf:"bytes,1,opt,name=buildSum" json:"buildSum,omitempty"`
	// stages is a all the StageStatus objects associated to the build in question
	Stages []*StageStatus `protobuf:"bytes,2,rep,name=stages" json:"stages,omitempty"`
	// isInConsul is a boolean that is used for determining if the build is "running" or not. if isInConsul=true, the build is still running
	IsInConsul           bool     `protobuf:"varint,3,opt,name=isInConsul" json:"isInConsul,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_guideocelot_e68d571e8462b0d7, []int{7}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (dst *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(dst, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetBuildSum() *BuildSummary {
	if m != nil {
		return m.BuildSum
	}
	return nil
}

func (m *Status) GetStages() []*StageStatus {
	if m != nil {
		return m.Stages
	}
	return nil
}

func (m *Status) GetIsInConsul() bool {
	if m != nil {
		return m.IsInConsul
	}
	return false
}

// StageStatus is the detailed information about a specific stage that was executed during the build
type StageStatus struct {
	StageStatus string `protobuf:"bytes,1,opt,name=StageStatus" json:"StageStatus,omitempty"`
	// error is the error message; will either be populated by a stage not returning exit code 0 or an error handled in the code during the build
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	// status is whether or not hte build failed; 0 for pass; 1 for failed
	Status int32 `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	// messages are some descriptions of each stage that are generated at runtime
	Messages []string `protobuf:"bytes,4,rep,name=messages" json:"messages,omitempty"`
	// startTime is when this stage began execution
	StartTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=startTime" json:"startTime,omitempty"`
	// stageDuration is how long the stage took to execute
	StageDuration        float64  `protobuf:"fixed64,6,opt,name=stageDuration" json:"stageDuration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StageStatus) Reset()         { *m = StageStatus{} }
func (m *StageStatus) String() string { return proto.CompactTextString(m) }
func (*StageStatus) ProtoMessage()    {}
func (*StageStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_guideocelot_e68d571e8462b0d7, []int{8}
}
func (m *StageStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StageStatus.Unmarshal(m, b)
}
func (m *StageStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StageStatus.Marshal(b, m, deterministic)
}
func (dst *StageStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StageStatus.Merge(dst, src)
}
func (m *StageStatus) XXX_Size() int {
	return xxx_messageInfo_StageStatus.Size(m)
}
func (m *StageStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_StageStatus.DiscardUnknown(m)
}

var xxx_messageInfo_StageStatus proto.InternalMessageInfo

func (m *StageStatus) GetStageStatus() string {
	if m != nil {
		return m.StageStatus
	}
	return ""
}

func (m *StageStatus) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *StageStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *StageStatus) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *StageStatus) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *StageStatus) GetStageDuration() float64 {
	if m != nil {
		return m.StageDuration
	}
	return 0
}

// BuildSummary represents the build_summary table in postgres
// it is a top level view of how a repository is "doing" in ocelot, ie build times, fail status..
type BuildSummary struct {
	// hash is the git commit hash that corresponds with this build information
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	// failed is whether or not the build failed
	Failed bool `protobuf:"varint,2,opt,name=failed" json:"failed,omitempty"`
	// buildTime is the datetime that the build was picked up off the queue by the werker
	BuildTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=buildTime" json:"buildTime,omitempty"`
	// account is the VCS account associated with the repository / commit
	Account string `protobuf:"bytes,4,opt,name=account" json:"account,omitempty"`
	// buildDuration is the length of time the whole build took to execute
	BuildDuration float64 `protobuf:"fixed64,5,opt,name=buildDuration" json:"buildDuration,omitempty"`
	// repo is the repository associated with the account / commit
	Repo string `protobuf:"bytes,6,opt,name=repo" json:"repo,omitempty"`
	// branch is the branch associated with the commit when it was pushed
	Branch string `protobuf:"bytes,7,opt,name=branch" json:"branch,omitempty"`
	// buildId is the id given to the build entry by postgres. it is unique
	BuildId int64 `protobuf:"varint,8,opt,name=buildId" json:"buildId,omitempty"`
	// queueTime is the datetime that either a tracking component or the admin put the build request on the queue to be processed by the werker node
	QueueTime            *timestamp.Timestamp `protobuf:"bytes,9,opt,name=queueTime" json:"queueTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *BuildSummary) Reset()         { *m = BuildSummary{} }
func (m *BuildSummary) String() string { return proto.CompactTextString(m) }
func (*BuildSummary) ProtoMessage()    {}
func (*BuildSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_guideocelot_e68d571e8462b0d7, []int{9}
}
func (m *BuildSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildSummary.Unmarshal(m, b)
}
func (m *BuildSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildSummary.Marshal(b, m, deterministic)
}
func (dst *BuildSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildSummary.Merge(dst, src)
}
func (m *BuildSummary) XXX_Size() int {
	return xxx_messageInfo_BuildSummary.Size(m)
}
func (m *BuildSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildSummary.DiscardUnknown(m)
}

var xxx_messageInfo_BuildSummary proto.InternalMessageInfo

func (m *BuildSummary) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildSummary) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

func (m *BuildSummary) GetBuildTime() *timestamp.Timestamp {
	if m != nil {
		return m.BuildTime
	}
	return nil
}

func (m *BuildSummary) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *BuildSummary) GetBuildDuration() float64 {
	if m != nil {
		return m.BuildDuration
	}
	return 0
}

func (m *BuildSummary) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *BuildSummary) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *BuildSummary) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

func (m *BuildSummary) GetQueueTime() *timestamp.Timestamp {
	if m != nil {
		return m.QueueTime
	}
	return nil
}

// summaries is a wrapper for a list of BuildSummary objects because protobuf can be dumb
type Summaries struct {
	Sums                 []*BuildSummary `protobuf:"bytes,1,rep,name=sums" json:"sums,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Summaries) Reset()         { *m = Summaries{} }
func (m *Summaries) String() string { return proto.CompactTextString(m) }
func (*Summaries) ProtoMessage()    {}
func (*Summaries) Descriptor() ([]byte, []int) {
	return fileDescriptor_guideocelot_e68d571e8462b0d7, []int{10}
}
func (m *Summaries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Summaries.Unmarshal(m, b)
}
func (m *Summaries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Summaries.Marshal(b, m, deterministic)
}
func (dst *Summaries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Summaries.Merge(dst, src)
}
func (m *Summaries) XXX_Size() int {
	return xxx_messageInfo_Summaries.Size(m)
}
func (m *Summaries) XXX_DiscardUnknown() {
	xxx_messageInfo_Summaries.DiscardUnknown(m)
}

var xxx_messageInfo_Summaries proto.InternalMessageInfo

func (m *Summaries) GetSums() []*BuildSummary {
	if m != nil {
		return m.Sums
	}
	return nil
}

// PollRequest encompasses all the data necessary to set up poll tracking in ocelot.
type PollRequest struct {
	// account is the VCS account
	Account string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// repo is the VCS repository name
	Repo string `protobuf:"bytes,2,opt,name=repo" json:"repo,omitempty"`
	// cron is the cron string that will determine how often a check for changes should occur
	Cron string `protobuf:"bytes,4,opt,name=cron" json:"cron,omitempty"`
	// branches tells ocelot which branches should be checked for changes
	Branches string `protobuf:"bytes,5,opt,name=branches" json:"branches,omitempty"`
	// internal use only
	LastCronTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=lastCronTime" json:"lastCronTime,omitempty"`
	// internal use only
	LastHashes           map[string]string `protobuf:"bytes,7,rep,name=lastHashes" json:"lastHashes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PollRequest) Reset()         { *m = PollRequest{} }
func (m *PollRequest) String() string { return proto.CompactTextString(m) }
func (*PollRequest) ProtoMessage()    {}
func (*PollRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_guideocelot_e68d571e8462b0d7, []int{11}
}
func (m *PollRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PollRequest.Unmarshal(m, b)
}
func (m *PollRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PollRequest.Marshal(b, m, deterministic)
}
func (dst *PollRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollRequest.Merge(dst, src)
}
func (m *PollRequest) XXX_Size() int {
	return xxx_messageInfo_PollRequest.Size(m)
}
func (m *PollRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PollRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PollRequest proto.InternalMessageInfo

func (m *PollRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *PollRequest) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *PollRequest) GetCron() string {
	if m != nil {
		return m.Cron
	}
	return ""
}

func (m *PollRequest) GetBranches() string {
	if m != nil {
		return m.Branches
	}
	return ""
}

func (m *PollRequest) GetLastCronTime() *timestamp.Timestamp {
	if m != nil {
		return m.LastCronTime
	}
	return nil
}

func (m *PollRequest) GetLastHashes() map[string]string {
	if m != nil {
		return m.LastHashes
	}
	return nil
}

// polls is a wrapper for a PollRequest list because protobuf can be dumb
type Polls struct {
	Polls                []*PollRequest `protobuf:"bytes,1,rep,name=polls" json:"polls,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Polls) Reset()         { *m = Polls{} }
func (m *Polls) String() string { return proto.CompactTextString(m) }
func (*Polls) ProtoMessage()    {}
func (*Polls) Descriptor() ([]byte, []int) {
	return fileDescriptor_guideocelot_e68d571e8462b0d7, []int{12}
}
func (m *Polls) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Polls.Unmarshal(m, b)
}
func (m *Polls) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Polls.Marshal(b, m, deterministic)
}
func (dst *Polls) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Polls.Merge(dst, src)
}
func (m *Polls) XXX_Size() int {
	return xxx_messageInfo_Polls.Size(m)
}
func (m *Polls) XXX_DiscardUnknown() {
	xxx_messageInfo_Polls.DiscardUnknown(m)
}

var xxx_messageInfo_Polls proto.InternalMessageInfo

func (m *Polls) GetPolls() []*PollRequest {
	if m != nil {
		return m.Polls
	}
	return nil
}

type Exists struct {
	Exists               bool     `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Exists) Reset()         { *m = Exists{} }
func (m *Exists) String() string { return proto.CompactTextString(m) }
func (*Exists) ProtoMessage()    {}
func (*Exists) Descriptor() ([]byte, []int) {
	return fileDescriptor_guideocelot_e68d571e8462b0d7, []int{13}
}
func (m *Exists) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Exists.Unmarshal(m, b)
}
func (m *Exists) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Exists.Marshal(b, m, deterministic)
}
func (dst *Exists) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Exists.Merge(dst, src)
}
func (m *Exists) XXX_Size() int {
	return xxx_messageInfo_Exists.Size(m)
}
func (m *Exists) XXX_DiscardUnknown() {
	xxx_messageInfo_Exists.DiscardUnknown(m)
}

var xxx_messageInfo_Exists proto.InternalMessageInfo

func (m *Exists) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

// Used in displaying all repos that are tracked by ocelot
type AcctRepo struct {
	// VCS Account
	Account string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// VCS Repository
	Repo                 string   `protobuf:"bytes,2,opt,name=repo" json:"repo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AcctRepo) Reset()         { *m = AcctRepo{} }
func (m *AcctRepo) String() string { return proto.CompactTextString(m) }
func (*AcctRepo) ProtoMessage()    {}
func (*AcctRepo) Descriptor() ([]byte, []int) {
	return fileDescriptor_guideocelot_e68d571e8462b0d7, []int{14}
}
func (m *AcctRepo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcctRepo.Unmarshal(m, b)
}
func (m *AcctRepo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcctRepo.Marshal(b, m, deterministic)
}
func (dst *AcctRepo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcctRepo.Merge(dst, src)
}
func (m *AcctRepo) XXX_Size() int {
	return xxx_messageInfo_AcctRepo.Size(m)
}
func (m *AcctRepo) XXX_DiscardUnknown() {
	xxx_messageInfo_AcctRepo.DiscardUnknown(m)
}

var xxx_messageInfo_AcctRepo proto.InternalMessageInfo

func (m *AcctRepo) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *AcctRepo) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

// AcctRepos is used in the response to /v1/tracked-repositories, it is an array of AcctRepo objects. have to wrap it cuz proto -_-
type AcctRepos struct {
	AcctRepos            []*AcctRepo `protobuf:"bytes,1,rep,name=acctRepos" json:"acctRepos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AcctRepos) Reset()         { *m = AcctRepos{} }
func (m *AcctRepos) String() string { return proto.CompactTextString(m) }
func (*AcctRepos) ProtoMessage()    {}
func (*AcctRepos) Descriptor() ([]byte, []int) {
	return fileDescriptor_guideocelot_e68d571e8462b0d7, []int{15}
}
func (m *AcctRepos) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcctRepos.Unmarshal(m, b)
}
func (m *AcctRepos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcctRepos.Marshal(b, m, deterministic)
}
func (dst *AcctRepos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcctRepos.Merge(dst, src)
}
func (m *AcctRepos) XXX_Size() int {
	return xxx_messageInfo_AcctRepos.Size(m)
}
func (m *AcctRepos) XXX_DiscardUnknown() {
	xxx_messageInfo_AcctRepos.DiscardUnknown(m)
}

var xxx_messageInfo_AcctRepos proto.InternalMessageInfo

func (m *AcctRepos) GetAcctRepos() []*AcctRepo {
	if m != nil {
		return m.AcctRepos
	}
	return nil
}

func init() {
	proto.RegisterType((*BuildReq)(nil), "models.BuildReq")
	proto.RegisterType((*StatusQuery)(nil), "models.StatusQuery")
	proto.RegisterType((*BuildQuery)(nil), "models.BuildQuery")
	proto.RegisterType((*Builds)(nil), "models.Builds")
	proto.RegisterMapType((map[string]*BuildRuntimeInfo)(nil), "models.Builds.BuildsEntry")
	proto.RegisterType((*BuildRuntimeInfo)(nil), "models.BuildRuntimeInfo")
	proto.RegisterType((*LineResponse)(nil), "models.LineResponse")
	proto.RegisterType((*RepoAccount)(nil), "models.RepoAccount")
	proto.RegisterType((*Status)(nil), "models.Status")
	proto.RegisterType((*StageStatus)(nil), "models.StageStatus")
	proto.RegisterType((*BuildSummary)(nil), "models.BuildSummary")
	proto.RegisterType((*Summaries)(nil), "models.Summaries")
	proto.RegisterType((*PollRequest)(nil), "models.PollRequest")
	proto.RegisterMapType((map[string]string)(nil), "models.PollRequest.LastHashesEntry")
	proto.RegisterType((*Polls)(nil), "models.Polls")
	proto.RegisterType((*Exists)(nil), "models.Exists")
	proto.RegisterType((*AcctRepo)(nil), "models.AcctRepo")
	proto.RegisterType((*AcctRepos)(nil), "models.AcctRepos")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GuideOcelotClient is the client API for GuideOcelot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GuideOcelotClient interface {
	GetVCSCreds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CredWrapper, error)
	GetVCSCred(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*VCSCreds, error)
	SetVCSCreds(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateVCSCreds(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*empty.Empty, error)
	//    account,identifier,cred_sub_type
	VCSCredExists(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*Exists, error)
	CheckConn(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	SetVCSPrivateKey(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*empty.Empty, error)
	GetRepoCred(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*RepoCreds, error)
	UpdateRepoCreds(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*empty.Empty, error)
	RepoCredExists(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*Exists, error)
	GetK8SCred(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*K8SCreds, error)
	UpdateK8SCreds(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*empty.Empty, error)
	K8SCredExists(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*Exists, error)
	SetNotifyCreds(ctx context.Context, in *NotifyCreds, opts ...grpc.CallOption) (*empty.Empty, error)
	GetNotifyCred(ctx context.Context, in *NotifyCreds, opts ...grpc.CallOption) (*NotifyCreds, error)
	GetNotifyCreds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NotifyWrap, error)
	UpdateNotifyCreds(ctx context.Context, in *NotifyCreds, opts ...grpc.CallOption) (*empty.Empty, error)
	NotifyCredExists(ctx context.Context, in *NotifyCreds, opts ...grpc.CallOption) (*Exists, error)
	UpdateSSHCreds(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*empty.Empty, error)
	GetSSHCred(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*SSHKeyWrapper, error)
	SSHCredExists(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*Exists, error)
	SetSSHCreds(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*empty.Empty, error)
	GetSSHCreds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SSHWrap, error)
	GetRepoCreds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RepoCredWrapper, error)
	SetRepoCreds(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*empty.Empty, error)
	SetK8SCreds(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*empty.Empty, error)
	GetK8SCreds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*K8SCredsWrapper, error)
	SetAppleCreds(ctx context.Context, in *AppleCreds, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAppleCreds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AppleCredsWrapper, error)
	GetAppleCred(ctx context.Context, in *AppleCreds, opts ...grpc.CallOption) (*AppleCreds, error)
	UpdateAppleCreds(ctx context.Context, in *AppleCreds, opts ...grpc.CallOption) (*empty.Empty, error)
	AppleCredExists(ctx context.Context, in *AppleCreds, opts ...grpc.CallOption) (*Exists, error)
	GetAllCreds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AllCredsWrapper, error)
	BuildRuntime(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (*Builds, error)
	Logs(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (GuideOcelot_LogsClient, error)
	LastFewSummaries(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*Summaries, error)
	GetStatus(ctx context.Context, in *StatusQuery, opts ...grpc.CallOption) (*Status, error)
	WatchRepo(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*empty.Empty, error)
	BuildRepoAndHash(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (GuideOcelot_BuildRepoAndHashClient, error)
	PollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeletePollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListPolledRepos(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Polls, error)
	FindWerker(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (*BuildRuntimeInfo, error)
	GetTrackedRepos(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AcctRepos, error)
}

type guideOcelotClient struct {
	cc *grpc.ClientConn
}

func NewGuideOcelotClient(cc *grpc.ClientConn) GuideOcelotClient {
	return &guideOcelotClient{cc}
}

func (c *guideOcelotClient) GetVCSCreds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CredWrapper, error) {
	out := new(CredWrapper)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/GetVCSCreds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetVCSCred(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*VCSCreds, error) {
	out := new(VCSCreds)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/GetVCSCred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetVCSCreds(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/SetVCSCreds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) UpdateVCSCreds(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/UpdateVCSCreds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) VCSCredExists(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/VCSCredExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) CheckConn(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/CheckConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetVCSPrivateKey(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/SetVCSPrivateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetRepoCred(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*RepoCreds, error) {
	out := new(RepoCreds)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/GetRepoCred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) UpdateRepoCreds(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/UpdateRepoCreds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) RepoCredExists(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/RepoCredExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetK8SCred(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*K8SCreds, error) {
	out := new(K8SCreds)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/GetK8SCred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) UpdateK8SCreds(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/UpdateK8SCreds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) K8SCredExists(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/K8SCredExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetNotifyCreds(ctx context.Context, in *NotifyCreds, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/SetNotifyCreds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetNotifyCred(ctx context.Context, in *NotifyCreds, opts ...grpc.CallOption) (*NotifyCreds, error) {
	out := new(NotifyCreds)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/GetNotifyCred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetNotifyCreds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NotifyWrap, error) {
	out := new(NotifyWrap)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/GetNotifyCreds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) UpdateNotifyCreds(ctx context.Context, in *NotifyCreds, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/UpdateNotifyCreds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) NotifyCredExists(ctx context.Context, in *NotifyCreds, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/NotifyCredExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) UpdateSSHCreds(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/UpdateSSHCreds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetSSHCred(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*SSHKeyWrapper, error) {
	out := new(SSHKeyWrapper)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/GetSSHCred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SSHCredExists(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/SSHCredExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetSSHCreds(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/SetSSHCreds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetSSHCreds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SSHWrap, error) {
	out := new(SSHWrap)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/GetSSHCreds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetRepoCreds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RepoCredWrapper, error) {
	out := new(RepoCredWrapper)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/GetRepoCreds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetRepoCreds(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/SetRepoCreds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetK8SCreds(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/SetK8SCreds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetK8SCreds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*K8SCredsWrapper, error) {
	out := new(K8SCredsWrapper)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/GetK8SCreds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetAppleCreds(ctx context.Context, in *AppleCreds, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/SetAppleCreds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetAppleCreds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AppleCredsWrapper, error) {
	out := new(AppleCredsWrapper)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/GetAppleCreds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetAppleCred(ctx context.Context, in *AppleCreds, opts ...grpc.CallOption) (*AppleCreds, error) {
	out := new(AppleCreds)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/GetAppleCred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) UpdateAppleCreds(ctx context.Context, in *AppleCreds, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/UpdateAppleCreds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) AppleCredExists(ctx context.Context, in *AppleCreds, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/AppleCredExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetAllCreds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AllCredsWrapper, error) {
	out := new(AllCredsWrapper)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/GetAllCreds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) BuildRuntime(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (*Builds, error) {
	out := new(Builds)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/BuildRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) Logs(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (GuideOcelot_LogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GuideOcelot_serviceDesc.Streams[0], "/models.GuideOcelot/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &guideOcelotLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GuideOcelot_LogsClient interface {
	Recv() (*LineResponse, error)
	grpc.ClientStream
}

type guideOcelotLogsClient struct {
	grpc.ClientStream
}

func (x *guideOcelotLogsClient) Recv() (*LineResponse, error) {
	m := new(LineResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *guideOcelotClient) LastFewSummaries(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*Summaries, error) {
	out := new(Summaries)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/LastFewSummaries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetStatus(ctx context.Context, in *StatusQuery, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) WatchRepo(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/WatchRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) BuildRepoAndHash(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (GuideOcelot_BuildRepoAndHashClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GuideOcelot_serviceDesc.Streams[1], "/models.GuideOcelot/BuildRepoAndHash", opts...)
	if err != nil {
		return nil, err
	}
	x := &guideOcelotBuildRepoAndHashClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GuideOcelot_BuildRepoAndHashClient interface {
	Recv() (*LineResponse, error)
	grpc.ClientStream
}

type guideOcelotBuildRepoAndHashClient struct {
	grpc.ClientStream
}

func (x *guideOcelotBuildRepoAndHashClient) Recv() (*LineResponse, error) {
	m := new(LineResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *guideOcelotClient) PollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/PollRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) DeletePollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/DeletePollRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) ListPolledRepos(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Polls, error) {
	out := new(Polls)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/ListPolledRepos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) FindWerker(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (*BuildRuntimeInfo, error) {
	out := new(BuildRuntimeInfo)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/FindWerker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetTrackedRepos(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AcctRepos, error) {
	out := new(AcctRepos)
	err := c.cc.Invoke(ctx, "/models.GuideOcelot/GetTrackedRepos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuideOcelotServer is the server API for GuideOcelot service.
type GuideOcelotServer interface {
	GetVCSCreds(context.Context, *empty.Empty) (*CredWrapper, error)
	GetVCSCred(context.Context, *VCSCreds) (*VCSCreds, error)
	SetVCSCreds(context.Context, *VCSCreds) (*empty.Empty, error)
	UpdateVCSCreds(context.Context, *VCSCreds) (*empty.Empty, error)
	//    account,identifier,cred_sub_type
	VCSCredExists(context.Context, *VCSCreds) (*Exists, error)
	CheckConn(context.Context, *empty.Empty) (*empty.Empty, error)
	SetVCSPrivateKey(context.Context, *SSHKeyWrapper) (*empty.Empty, error)
	GetRepoCred(context.Context, *RepoCreds) (*RepoCreds, error)
	UpdateRepoCreds(context.Context, *RepoCreds) (*empty.Empty, error)
	RepoCredExists(context.Context, *RepoCreds) (*Exists, error)
	GetK8SCred(context.Context, *K8SCreds) (*K8SCreds, error)
	UpdateK8SCreds(context.Context, *K8SCreds) (*empty.Empty, error)
	K8SCredExists(context.Context, *K8SCreds) (*Exists, error)
	SetNotifyCreds(context.Context, *NotifyCreds) (*empty.Empty, error)
	GetNotifyCred(context.Context, *NotifyCreds) (*NotifyCreds, error)
	GetNotifyCreds(context.Context, *empty.Empty) (*NotifyWrap, error)
	UpdateNotifyCreds(context.Context, *NotifyCreds) (*empty.Empty, error)
	NotifyCredExists(context.Context, *NotifyCreds) (*Exists, error)
	UpdateSSHCreds(context.Context, *SSHKeyWrapper) (*empty.Empty, error)
	GetSSHCred(context.Context, *SSHKeyWrapper) (*SSHKeyWrapper, error)
	SSHCredExists(context.Context, *SSHKeyWrapper) (*Exists, error)
	SetSSHCreds(context.Context, *SSHKeyWrapper) (*empty.Empty, error)
	GetSSHCreds(context.Context, *empty.Empty) (*SSHWrap, error)
	GetRepoCreds(context.Context, *empty.Empty) (*RepoCredWrapper, error)
	SetRepoCreds(context.Context, *RepoCreds) (*empty.Empty, error)
	SetK8SCreds(context.Context, *K8SCreds) (*empty.Empty, error)
	GetK8SCreds(context.Context, *empty.Empty) (*K8SCredsWrapper, error)
	SetAppleCreds(context.Context, *AppleCreds) (*empty.Empty, error)
	GetAppleCreds(context.Context, *empty.Empty) (*AppleCredsWrapper, error)
	GetAppleCred(context.Context, *AppleCreds) (*AppleCreds, error)
	UpdateAppleCreds(context.Context, *AppleCreds) (*empty.Empty, error)
	AppleCredExists(context.Context, *AppleCreds) (*Exists, error)
	GetAllCreds(context.Context, *empty.Empty) (*AllCredsWrapper, error)
	BuildRuntime(context.Context, *BuildQuery) (*Builds, error)
	Logs(*BuildQuery, GuideOcelot_LogsServer) error
	LastFewSummaries(context.Context, *RepoAccount) (*Summaries, error)
	GetStatus(context.Context, *StatusQuery) (*Status, error)
	WatchRepo(context.Context, *RepoAccount) (*empty.Empty, error)
	BuildRepoAndHash(*BuildReq, GuideOcelot_BuildRepoAndHashServer) error
	PollRepo(context.Context, *PollRequest) (*empty.Empty, error)
	DeletePollRepo(context.Context, *PollRequest) (*empty.Empty, error)
	ListPolledRepos(context.Context, *empty.Empty) (*Polls, error)
	FindWerker(context.Context, *BuildReq) (*BuildRuntimeInfo, error)
	GetTrackedRepos(context.Context, *empty.Empty) (*AcctRepos, error)
}

func RegisterGuideOcelotServer(s *grpc.Server, srv GuideOcelotServer) {
	s.RegisterService(&_GuideOcelot_serviceDesc, srv)
}

func _GuideOcelot_GetVCSCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetVCSCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetVCSCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetVCSCreds(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetVCSCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCSCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetVCSCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetVCSCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetVCSCred(ctx, req.(*VCSCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetVCSCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCSCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetVCSCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetVCSCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetVCSCreds(ctx, req.(*VCSCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_UpdateVCSCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCSCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).UpdateVCSCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/UpdateVCSCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).UpdateVCSCreds(ctx, req.(*VCSCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_VCSCredExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCSCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).VCSCredExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/VCSCredExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).VCSCredExists(ctx, req.(*VCSCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_CheckConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).CheckConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/CheckConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).CheckConn(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetVCSPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKeyWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetVCSPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetVCSPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetVCSPrivateKey(ctx, req.(*SSHKeyWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetRepoCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetRepoCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetRepoCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetRepoCred(ctx, req.(*RepoCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_UpdateRepoCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).UpdateRepoCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/UpdateRepoCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).UpdateRepoCreds(ctx, req.(*RepoCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_RepoCredExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).RepoCredExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/RepoCredExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).RepoCredExists(ctx, req.(*RepoCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetK8SCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetK8SCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetK8SCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetK8SCred(ctx, req.(*K8SCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_UpdateK8SCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).UpdateK8SCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/UpdateK8SCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).UpdateK8SCreds(ctx, req.(*K8SCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_K8SCredExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).K8SCredExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/K8SCredExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).K8SCredExists(ctx, req.(*K8SCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetNotifyCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetNotifyCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetNotifyCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetNotifyCreds(ctx, req.(*NotifyCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetNotifyCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetNotifyCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetNotifyCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetNotifyCred(ctx, req.(*NotifyCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetNotifyCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetNotifyCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetNotifyCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetNotifyCreds(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_UpdateNotifyCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).UpdateNotifyCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/UpdateNotifyCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).UpdateNotifyCreds(ctx, req.(*NotifyCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_NotifyCredExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).NotifyCredExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/NotifyCredExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).NotifyCredExists(ctx, req.(*NotifyCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_UpdateSSHCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKeyWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).UpdateSSHCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/UpdateSSHCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).UpdateSSHCreds(ctx, req.(*SSHKeyWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetSSHCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKeyWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetSSHCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetSSHCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetSSHCred(ctx, req.(*SSHKeyWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SSHCredExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKeyWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SSHCredExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SSHCredExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SSHCredExists(ctx, req.(*SSHKeyWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetSSHCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKeyWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetSSHCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetSSHCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetSSHCreds(ctx, req.(*SSHKeyWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetSSHCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetSSHCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetSSHCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetSSHCreds(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetRepoCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetRepoCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetRepoCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetRepoCreds(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetRepoCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetRepoCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetRepoCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetRepoCreds(ctx, req.(*RepoCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetK8SCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetK8SCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetK8SCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetK8SCreds(ctx, req.(*K8SCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetK8SCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetK8SCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetK8SCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetK8SCreds(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetAppleCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppleCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetAppleCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetAppleCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetAppleCreds(ctx, req.(*AppleCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetAppleCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetAppleCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetAppleCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetAppleCreds(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetAppleCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppleCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetAppleCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetAppleCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetAppleCred(ctx, req.(*AppleCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_UpdateAppleCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppleCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).UpdateAppleCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/UpdateAppleCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).UpdateAppleCreds(ctx, req.(*AppleCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_AppleCredExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppleCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).AppleCredExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/AppleCredExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).AppleCredExists(ctx, req.(*AppleCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetAllCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetAllCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetAllCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetAllCreds(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_BuildRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).BuildRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/BuildRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).BuildRuntime(ctx, req.(*BuildQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GuideOcelotServer).Logs(m, &guideOcelotLogsServer{stream})
}

type GuideOcelot_LogsServer interface {
	Send(*LineResponse) error
	grpc.ServerStream
}

type guideOcelotLogsServer struct {
	grpc.ServerStream
}

func (x *guideOcelotLogsServer) Send(m *LineResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GuideOcelot_LastFewSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).LastFewSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/LastFewSummaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).LastFewSummaries(ctx, req.(*RepoAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetStatus(ctx, req.(*StatusQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_WatchRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).WatchRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/WatchRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).WatchRepo(ctx, req.(*RepoAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_BuildRepoAndHash_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GuideOcelotServer).BuildRepoAndHash(m, &guideOcelotBuildRepoAndHashServer{stream})
}

type GuideOcelot_BuildRepoAndHashServer interface {
	Send(*LineResponse) error
	grpc.ServerStream
}

type guideOcelotBuildRepoAndHashServer struct {
	grpc.ServerStream
}

func (x *guideOcelotBuildRepoAndHashServer) Send(m *LineResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GuideOcelot_PollRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).PollRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/PollRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).PollRepo(ctx, req.(*PollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_DeletePollRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).DeletePollRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/DeletePollRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).DeletePollRepo(ctx, req.(*PollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_ListPolledRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).ListPolledRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/ListPolledRepos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).ListPolledRepos(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_FindWerker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).FindWerker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/FindWerker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).FindWerker(ctx, req.(*BuildReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetTrackedRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetTrackedRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetTrackedRepos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetTrackedRepos(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _GuideOcelot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "models.GuideOcelot",
	HandlerType: (*GuideOcelotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVCSCreds",
			Handler:    _GuideOcelot_GetVCSCreds_Handler,
		},
		{
			MethodName: "GetVCSCred",
			Handler:    _GuideOcelot_GetVCSCred_Handler,
		},
		{
			MethodName: "SetVCSCreds",
			Handler:    _GuideOcelot_SetVCSCreds_Handler,
		},
		{
			MethodName: "UpdateVCSCreds",
			Handler:    _GuideOcelot_UpdateVCSCreds_Handler,
		},
		{
			MethodName: "VCSCredExists",
			Handler:    _GuideOcelot_VCSCredExists_Handler,
		},
		{
			MethodName: "CheckConn",
			Handler:    _GuideOcelot_CheckConn_Handler,
		},
		{
			MethodName: "SetVCSPrivateKey",
			Handler:    _GuideOcelot_SetVCSPrivateKey_Handler,
		},
		{
			MethodName: "GetRepoCred",
			Handler:    _GuideOcelot_GetRepoCred_Handler,
		},
		{
			MethodName: "UpdateRepoCreds",
			Handler:    _GuideOcelot_UpdateRepoCreds_Handler,
		},
		{
			MethodName: "RepoCredExists",
			Handler:    _GuideOcelot_RepoCredExists_Handler,
		},
		{
			MethodName: "GetK8SCred",
			Handler:    _GuideOcelot_GetK8SCred_Handler,
		},
		{
			MethodName: "UpdateK8SCreds",
			Handler:    _GuideOcelot_UpdateK8SCreds_Handler,
		},
		{
			MethodName: "K8SCredExists",
			Handler:    _GuideOcelot_K8SCredExists_Handler,
		},
		{
			MethodName: "SetNotifyCreds",
			Handler:    _GuideOcelot_SetNotifyCreds_Handler,
		},
		{
			MethodName: "GetNotifyCred",
			Handler:    _GuideOcelot_GetNotifyCred_Handler,
		},
		{
			MethodName: "GetNotifyCreds",
			Handler:    _GuideOcelot_GetNotifyCreds_Handler,
		},
		{
			MethodName: "UpdateNotifyCreds",
			Handler:    _GuideOcelot_UpdateNotifyCreds_Handler,
		},
		{
			MethodName: "NotifyCredExists",
			Handler:    _GuideOcelot_NotifyCredExists_Handler,
		},
		{
			MethodName: "UpdateSSHCreds",
			Handler:    _GuideOcelot_UpdateSSHCreds_Handler,
		},
		{
			MethodName: "GetSSHCred",
			Handler:    _GuideOcelot_GetSSHCred_Handler,
		},
		{
			MethodName: "SSHCredExists",
			Handler:    _GuideOcelot_SSHCredExists_Handler,
		},
		{
			MethodName: "SetSSHCreds",
			Handler:    _GuideOcelot_SetSSHCreds_Handler,
		},
		{
			MethodName: "GetSSHCreds",
			Handler:    _GuideOcelot_GetSSHCreds_Handler,
		},
		{
			MethodName: "GetRepoCreds",
			Handler:    _GuideOcelot_GetRepoCreds_Handler,
		},
		{
			MethodName: "SetRepoCreds",
			Handler:    _GuideOcelot_SetRepoCreds_Handler,
		},
		{
			MethodName: "SetK8SCreds",
			Handler:    _GuideOcelot_SetK8SCreds_Handler,
		},
		{
			MethodName: "GetK8SCreds",
			Handler:    _GuideOcelot_GetK8SCreds_Handler,
		},
		{
			MethodName: "SetAppleCreds",
			Handler:    _GuideOcelot_SetAppleCreds_Handler,
		},
		{
			MethodName: "GetAppleCreds",
			Handler:    _GuideOcelot_GetAppleCreds_Handler,
		},
		{
			MethodName: "GetAppleCred",
			Handler:    _GuideOcelot_GetAppleCred_Handler,
		},
		{
			MethodName: "UpdateAppleCreds",
			Handler:    _GuideOcelot_UpdateAppleCreds_Handler,
		},
		{
			MethodName: "AppleCredExists",
			Handler:    _GuideOcelot_AppleCredExists_Handler,
		},
		{
			MethodName: "GetAllCreds",
			Handler:    _GuideOcelot_GetAllCreds_Handler,
		},
		{
			MethodName: "BuildRuntime",
			Handler:    _GuideOcelot_BuildRuntime_Handler,
		},
		{
			MethodName: "LastFewSummaries",
			Handler:    _GuideOcelot_LastFewSummaries_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _GuideOcelot_GetStatus_Handler,
		},
		{
			MethodName: "WatchRepo",
			Handler:    _GuideOcelot_WatchRepo_Handler,
		},
		{
			MethodName: "PollRepo",
			Handler:    _GuideOcelot_PollRepo_Handler,
		},
		{
			MethodName: "DeletePollRepo",
			Handler:    _GuideOcelot_DeletePollRepo_Handler,
		},
		{
			MethodName: "ListPolledRepos",
			Handler:    _GuideOcelot_ListPolledRepos_Handler,
		},
		{
			MethodName: "FindWerker",
			Handler:    _GuideOcelot_FindWerker_Handler,
		},
		{
			MethodName: "GetTrackedRepos",
			Handler:    _GuideOcelot_GetTrackedRepos_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _GuideOcelot_Logs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BuildRepoAndHash",
			Handler:       _GuideOcelot_BuildRepoAndHash_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "guideocelot.proto",
}

func init() { proto.RegisterFile("guideocelot.proto", fileDescriptor_guideocelot_e68d571e8462b0d7) }

var fileDescriptor_guideocelot_e68d571e8462b0d7 = []byte{
	// 4150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x5a, 0x5d, 0x8c, 0x64, 0xc7,
	0x55, 0xf6, 0xed, 0xf9, 0xf1, 0x4c, 0xcd, 0xfe, 0xcc, 0xde, 0xdd, 0xac, 0xc7, 0x9d, 0x38, 0x2e,
	0x2e, 0x89, 0xbd, 0x5e, 0xef, 0xf6, 0xd8, 0x1b, 0x42, 0x86, 0x8d, 0x12, 0xf9, 0x7a, 0x6d, 0xef,
	0xae, 0xbc, 0xb6, 0xd7, 0x3d, 0xeb, 0x18, 0x78, 0x40, 0x53, 0x7d, 0x6f, 0x75, 0xf7, 0xdd, 0xb9,
	0x7d, 0xeb, 0x6e, 0x55, 0xdd, 0x99, 0x6d, 0x6d, 0x56, 0x4a, 0x8c, 0x44, 0x10, 0x12, 0x42, 0xb4,
	0x2d, 0x39, 0xa0, 0xfc, 0x38, 0x2f, 0x48, 0x08, 0x05, 0x90, 0xb0, 0xb0, 0xc4, 0x03, 0x0f, 0xe1,
	0x29, 0x96, 0x10, 0x48, 0x01, 0xf1, 0x23, 0x04, 0x96, 0x85, 0x78, 0x40, 0x82, 0x17, 0xc4, 0x03,
	0x12, 0x02, 0x74, 0x4e, 0x55, 0xdd, 0xbe, 0xb7, 0x7f, 0x66, 0xc7, 0x23, 0x9e, 0xba, 0xeb, 0xff,
	0x7c, 0xe7, 0x7c, 0x75, 0xce, 0xa9, 0xba, 0x45, 0x4e, 0xf5, 0x8a, 0x24, 0xe6, 0x22, 0xe2, 0xa9,
	0xd0, 0xad, 0x5c, 0x0a, 0x2d, 0xfc, 0xe5, 0x81, 0x88, 0x79, 0xaa, 0x9a, 0x6b, 0x91, 0xe4, 0xb1,
	0x32, 0x95, 0xcd, 0x4f, 0xf7, 0x84, 0xe8, 0xa5, 0x7c, 0x13, 0x4b, 0x9d, 0xa2, 0xbb, 0xc9, 0x07,
	0xb9, 0x1e, 0xda, 0xc6, 0xcf, 0xd8, 0x46, 0x96, 0x27, 0x9b, 0x2c, 0xcb, 0x84, 0x66, 0x3a, 0x11,
	0x99, 0x1b, 0xfa, 0xf8, 0xe4, 0x50, 0x9d, 0x0c, 0xb8, 0xd2, 0x6c, 0x90, 0xdb, 0x0e, 0x17, 0xf0,
	0x27, 0xba, 0xd8, 0xe3, 0xd9, 0x45, 0xb5, 0xcf, 0x7a, 0x3d, 0x2e, 0x37, 0x45, 0x8e, 0x53, 0x4c,
	0x4f, 0x17, 0xf4, 0xc9, 0xca, 0xf3, 0x45, 0x92, 0xc6, 0x6d, 0x7e, 0xc7, 0x6f, 0x92, 0x15, 0x16,
	0x45, 0xba, 0xcd, 0x73, 0xb1, 0xe1, 0x51, 0xef, 0xdc, 0x6a, 0xbb, 0x2c, 0xfb, 0x3e, 0x59, 0xec,
	0x33, 0xd5, 0xdf, 0x68, 0x60, 0x3d, 0xfe, 0xf7, 0xcf, 0x92, 0xe5, 0x8e, 0x64, 0x59, 0xd4, 0xdf,
	0x58, 0xc0, 0x5a, 0x5b, 0xf2, 0xcf, 0x90, 0xa5, 0xae, 0x90, 0x11, 0xdf, 0x58, 0xa4, 0xde, 0xb9,
	0x95, 0xb6, 0x29, 0x04, 0xf7, 0xc8, 0xda, 0xb6, 0x66, 0xba, 0x50, 0xaf, 0x17, 0x5c, 0x0e, 0xcb,
	0x09, 0xbd, 0xca, 0x84, 0x56, 0x80, 0x57, 0xd9, 0x80, 0xdb, 0x85, 0xca, 0x32, 0xb4, 0x49, 0x9e,
	0x0b, 0x6c, 0x33, 0xcb, 0x95, 0x65, 0x9f, 0x92, 0xb5, 0x9c, 0x49, 0x9d, 0xb0, 0x14, 0x65, 0x5f,
	0xc4, 0xe6, 0x6a, 0x55, 0x70, 0x99, 0x10, 0x84, 0x39, 0x7f, 0xed, 0x0d, 0xf2, 0x70, 0x07, 0x7a,
	0x5c, 0x8f, 0x71, 0xe9, 0x85, 0xb6, 0x2b, 0x06, 0xbf, 0xe9, 0x91, 0x65, 0x1c, 0xac, 0xfc, 0x4b,
	0x64, 0x19, 0x6b, 0xd5, 0x86, 0x47, 0x17, 0xce, 0xad, 0x5d, 0x6a, 0xb6, 0x8c, 0x75, 0x5b, 0xa6,
	0xdd, 0xfe, 0xbc, 0x98, 0x69, 0x39, 0x6c, 0xdb, 0x9e, 0xcd, 0x6d, 0xb2, 0x56, 0xa9, 0xf6, 0xd7,
	0xc9, 0xc2, 0x2e, 0x1f, 0xda, 0xa5, 0xe1, 0xaf, 0xdf, 0x22, 0x4b, 0x7b, 0x2c, 0x2d, 0x0c, 0xe4,
	0xb5, 0x4b, 0x1b, 0xb5, 0x39, 0xdb, 0x45, 0x06, 0x06, 0xbe, 0x9e, 0x75, 0x45, 0xdb, 0x74, 0xbb,
	0xdc, 0xd8, 0xf2, 0x82, 0x3f, 0xf6, 0xc8, 0xfa, 0x64, 0x3b, 0xc0, 0x8a, 0x45, 0xc6, 0x71, 0xee,
	0x95, 0x36, 0xfe, 0xf7, 0x4f, 0x90, 0x46, 0x92, 0x5b, 0x65, 0x36, 0x92, 0x1c, 0xd4, 0xd8, 0x93,
	0x79, 0x74, 0x53, 0x48, 0xed, 0xd4, 0xe8, 0xca, 0xa5, 0x5a, 0x16, 0xe7, 0x98, 0x64, 0xe9, 0x00,
	0x93, 0x2c, 0x4f, 0x98, 0xe4, 0x2c, 0x59, 0xde, 0x57, 0xb8, 0xca, 0xc3, 0x86, 0x1b, 0xa6, 0x14,
	0xb4, 0xc8, 0xb1, 0x1b, 0x49, 0xc6, 0xdb, 0x5c, 0xe5, 0x22, 0x53, 0xdc, 0xff, 0x2c, 0x21, 0xa2,
	0xd0, 0x79, 0xa1, 0xa1, 0xd6, 0x6a, 0xa5, 0x52, 0x13, 0xbc, 0x4e, 0xd6, 0xc0, 0x80, 0x61, 0x14,
	0x89, 0x22, 0x43, 0x11, 0xe5, 0x98, 0x9e, 0xf8, 0x1f, 0x2c, 0xc7, 0x4c, 0xb3, 0xc5, 0xe9, 0x8a,
	0x40, 0xc4, 0x34, 0x19, 0x24, 0x06, 0xe9, 0x52, 0xdb, 0x14, 0x82, 0x6f, 0x79, 0x64, 0xd9, 0x30,
	0xd1, 0x7f, 0x86, 0xac, 0xa0, 0x95, 0xb6, 0x8b, 0x01, 0x4e, 0xb9, 0x76, 0xe9, 0x4c, 0x4d, 0xfb,
	0xdb, 0xc5, 0x60, 0xc0, 0xe4, 0xb0, 0x5d, 0xf6, 0xf2, 0x9f, 0x26, 0xcb, 0x4a, 0xb3, 0x1e, 0x57,
	0x1b, 0x0d, 0x64, 0xc0, 0x69, 0xd7, 0x7f, 0x1b, 0x6a, 0xcd, 0xb4, 0x6d, 0xdb, 0x05, 0xc0, 0x25,
	0xea, 0x7a, 0x76, 0x45, 0x64, 0xaa, 0x48, 0x51, 0x88, 0x95, 0x76, 0xa5, 0x26, 0xf8, 0x3b, 0x0f,
	0xf7, 0x84, 0x1b, 0x07, 0x3c, 0xae, 0x14, 0x2d, 0xc8, 0x5a, 0x8f, 0x33, 0x64, 0x89, 0x4b, 0x29,
	0xa4, 0x45, 0x6a, 0x0a, 0xa0, 0x6c, 0x65, 0x86, 0x18, 0xa0, 0xb6, 0x04, 0x06, 0x1a, 0x70, 0xa5,
	0x50, 0xdc, 0x45, 0xba, 0x00, 0x06, 0x72, 0x65, 0x7f, 0x8b, 0xac, 0x2a, 0xcd, 0xa4, 0xbe, 0x95,
	0x58, 0xcb, 0x02, 0x9b, 0x8d, 0x6f, 0x69, 0x39, 0xdf, 0xd2, 0xba, 0xe5, 0x7c, 0x4b, 0x7b, 0xdc,
	0xd9, 0xff, 0x1c, 0x39, 0x8e, 0xf8, 0x5e, 0x28, 0x24, 0xba, 0x12, 0xb4, 0xbd, 0xd7, 0xae, 0x57,
	0x06, 0xef, 0x37, 0xc8, 0xb1, 0xaa, 0x0e, 0x67, 0x6e, 0xba, 0xb3, 0x64, 0xb9, 0xcb, 0x92, 0x94,
	0x9b, 0x3d, 0xb7, 0xd2, 0xb6, 0x25, 0x10, 0x0e, 0x35, 0x8e, 0xc2, 0x2d, 0x3c, 0x58, 0xb8, 0xb2,
	0x73, 0x95, 0x0c, 0x8b, 0x75, 0x32, 0x7c, 0x8e, 0x1c, 0xc7, 0x6e, 0xa5, 0xd8, 0x4b, 0x46, 0xec,
	0x5a, 0x65, 0x49, 0xb0, 0xe5, 0x0a, 0xc1, 0xc6, 0x7e, 0xee, 0xe1, 0x9a, 0x9f, 0xab, 0xb8, 0x8c,
	0x95, 0x9a, 0xcb, 0x00, 0xf9, 0xef, 0x14, 0xbc, 0xe0, 0x28, 0xff, 0xea, 0x83, 0xe5, 0x2f, 0x3b,
	0x07, 0x5f, 0x24, 0xab, 0x46, 0x61, 0x09, 0x57, 0xfe, 0x39, 0xb2, 0xa8, 0x8a, 0x81, 0x73, 0x36,
	0xb3, 0xa9, 0x89, 0x3d, 0x82, 0x3f, 0x68, 0x90, 0xb5, 0x9b, 0x22, 0x4d, 0xdb, 0xfc, 0x4e, 0xc1,
	0x95, 0xae, 0xaa, 0xc1, 0xab, 0xab, 0xc1, 0x01, 0x6c, 0x54, 0x00, 0xfa, 0x64, 0x31, 0x92, 0x22,
	0x73, 0x1b, 0x1f, 0xfe, 0x03, 0x77, 0x0c, 0x4c, 0xae, 0xdc, 0xc6, 0x77, 0x65, 0xff, 0xab, 0xe4,
	0x58, 0xca, 0x94, 0xbe, 0x22, 0x45, 0x86, 0x08, 0x97, 0x1f, 0x88, 0xb0, 0xd6, 0xdf, 0xbf, 0x42,
	0x08, 0x94, 0xaf, 0x31, 0x05, 0xb3, 0x3f, 0x8c, 0xe8, 0x7e, 0xda, 0xa1, 0xab, 0xc0, 0x68, 0xdd,
	0x28, 0x7b, 0x19, 0x9f, 0x5a, 0x19, 0xd6, 0xfc, 0x0a, 0x39, 0x39, 0xd1, 0x3c, 0xc3, 0xb7, 0x9e,
	0xa9, 0xfa, 0xd6, 0xd5, 0xaa, 0x07, 0xbd, 0x44, 0x96, 0x60, 0x25, 0xe5, 0x3f, 0x45, 0x96, 0x72,
	0xf8, 0x63, 0xb5, 0x7c, 0x7a, 0x86, 0x1c, 0x6d, 0xd3, 0x23, 0xa0, 0x64, 0xf9, 0xc5, 0xbb, 0x89,
	0xd2, 0x0a, 0x28, 0xc1, 0xf1, 0x9f, 0x75, 0xb6, 0xb6, 0x14, 0x6c, 0x91, 0x95, 0xd0, 0x85, 0xcc,
	0x4f, 0x64, 0x83, 0xe0, 0xcb, 0x64, 0xd5, 0x8d, 0x54, 0x7e, 0x8b, 0xac, 0xba, 0xc8, 0xeb, 0xe4,
	0x5a, 0x77, 0x72, 0xb9, 0x5e, 0xed, 0x71, 0x97, 0x4b, 0xff, 0xf9, 0x0a, 0x59, 0xbb, 0x0a, 0xa9,
	0xc7, 0x6b, 0x98, 0x7a, 0xf8, 0x1f, 0x7a, 0x64, 0xed, 0x2a, 0xd7, 0x5f, 0xbb, 0xb2, 0x7d, 0x05,
	0xb2, 0x0e, 0xff, 0xec, 0x94, 0x69, 0x5e, 0x84, 0x84, 0xa3, 0x59, 0x82, 0x85, 0x6e, 0x6f, 0x4a,
	0x96, 0xe7, 0x5c, 0x06, 0xbf, 0xee, 0x8d, 0xc2, 0x82, 0x2c, 0x61, 0xbe, 0x42, 0x16, 0xf6, 0x22,
	0xe5, 0x9f, 0x69, 0x73, 0x5d, 0xc8, 0x8c, 0xb2, 0x34, 0xa5, 0x7b, 0x91, 0xa2, 0xd8, 0xd4, 0x7c,
	0xdd, 0xd4, 0x2a, 0xac, 0xfe, 0xda, 0x95, 0x6d, 0x53, 0x4d, 0x75, 0x9f, 0x69, 0x6a, 0x52, 0x20,
	0xda, 0x67, 0x8a, 0xb2, 0x2c, 0xa6, 0x11, 0xcb, 0x68, 0xa1, 0x38, 0xed, 0x0a, 0x49, 0xa3, 0x3e,
	0x8f, 0x76, 0x93, 0xac, 0x47, 0x45, 0xa1, 0x69, 0x24, 0x62, 0x4e, 0xb5, 0xa0, 0xb8, 0x71, 0x5a,
	0x6f, 0xfd, 0xe4, 0x9f, 0xdf, 0x6e, 0x9c, 0xf4, 0x8f, 0x6f, 0xee, 0x3d, 0xbb, 0x89, 0x93, 0x6d,
	0xc2, 0xea, 0xff, 0xed, 0x11, 0x32, 0x06, 0xe3, 0x97, 0x8a, 0x70, 0xe8, 0x9a, 0x53, 0x35, 0xc1,
	0x8f, 0xbd, 0x51, 0xf8, 0x6d, 0xaf, 0x86, 0x61, 0xa3, 0xcd, 0xb5, 0x4c, 0xf8, 0x1e, 0xa7, 0x2a,
	0xc9, 0x7a, 0x29, 0x2f, 0x25, 0x6e, 0xe6, 0x0e, 0x87, 0x83, 0x46, 0x93, 0x2e, 0x4d, 0x34, 0x35,
	0x26, 0x6d, 0x51, 0x55, 0x74, 0xf4, 0x30, 0xe7, 0x34, 0x51, 0x94, 0x51, 0xc9, 0xef, 0x14, 0x09,
	0xf4, 0xb9, 0x03, 0x99, 0x04, 0xcd, 0x99, 0x64, 0x83, 0x16, 0x25, 0x6d, 0xde, 0xe5, 0x12, 0x80,
	0x18, 0x49, 0x9c, 0x20, 0x08, 0x58, 0xf7, 0x39, 0x15, 0x9d, 0xdb, 0x3c, 0xd2, 0xb4, 0x9b, 0xf0,
	0x34, 0x56, 0x08, 0xf3, 0x49, 0xff, 0xf3, 0x35, 0x98, 0x9b, 0xf7, 0x5c, 0x5c, 0xbd, 0xbf, 0x79,
	0x2f, 0x89, 0x79, 0xa6, 0x93, 0x6e, 0xc2, 0xe5, 0x7d, 0xff, 0x5f, 0x21, 0x48, 0x54, 0x6c, 0x39,
	0x8d, 0x7f, 0x8e, 0x75, 0x83, 0x3f, 0xf4, 0x46, 0xe1, 0x3b, 0x75, 0x2d, 0xf8, 0x61, 0x1c, 0x23,
	0x72, 0x18, 0x09, 0x6b, 0xb0, 0xb4, 0x29, 0xa1, 0x8e, 0xd1, 0x8c, 0xef, 0x97, 0x3a, 0x31, 0x2d,
	0x34, 0x12, 0x59, 0x37, 0xe9, 0x59, 0xd7, 0x08, 0xe8, 0xac, 0x59, 0xd1, 0x8c, 0x60, 0x39, 0xb4,
	0xa5, 0x28, 0xf4, 0x91, 0x34, 0xe0, 0x07, 0x75, 0x43, 0x5f, 0xf6, 0xce, 0xfb, 0x7f, 0xd9, 0x20,
	0x27, 0xde, 0xc8, 0x63, 0xa6, 0xf9, 0x11, 0xf0, 0xbe, 0xdd, 0x18, 0x85, 0xff, 0x54, 0xc7, 0xfb,
	0x88, 0x99, 0x8c, 0xb2, 0x49, 0xd0, 0x1f, 0x78, 0x2f, 0x66, 0x71, 0x2e, 0x92, 0xcc, 0xa0, 0x29,
	0xa0, 0x1b, 0x90, 0x92, 0x4d, 0xea, 0x20, 0xc9, 0x2c, 0xea, 0x16, 0xbd, 0xd5, 0x4f, 0x14, 0x55,
	0x7d, 0x51, 0xa4, 0x31, 0x15, 0x59, 0x3a, 0xa4, 0x1d, 0x4e, 0x23, 0x96, 0xa6, 0x86, 0x31, 0x7d,
	0xcd, 0xab, 0xe3, 0x2a, 0xec, 0xb9, 0x75, 0x20, 0x7b, 0x8e, 0xa2, 0xba, 0xf3, 0xcd, 0xc3, 0x91,
	0x07, 0x54, 0xfa, 0x05, 0x72, 0xdc, 0xce, 0x68, 0x7d, 0xd7, 0xb4, 0x42, 0x4f, 0xb8, 0x1a, 0xd3,
	0x23, 0x78, 0xc8, 0xff, 0x0a, 0x59, 0xbd, 0x02, 0xb6, 0xbd, 0x22, 0xb2, 0x6c, 0xae, 0xf7, 0x98,
	0x67, 0x87, 0x87, 0xfc, 0xb7, 0x16, 0xc8, 0xba, 0xe1, 0xec, 0x4d, 0x99, 0xec, 0x31, 0xcd, 0x5f,
	0xe6, 0x43, 0xff, 0x53, 0x65, 0xaa, 0xb4, 0x7d, 0xed, 0x65, 0x3e, 0xb4, 0xee, 0x66, 0xee, 0x2c,
	0x7f, 0xda, 0x18, 0x85, 0xbf, 0xd2, 0xa8, 0x59, 0xf3, 0xb1, 0x50, 0x6b, 0x16, 0xf5, 0xa9, 0x52,
	0x7d, 0xba, 0xcb, 0x87, 0xa0, 0x32, 0xb0, 0x96, 0x4d, 0x0e, 0x9b, 0x7f, 0xeb, 0xd9, 0x76, 0x50,
	0x5a, 0x24, 0x32, 0xcd, 0x33, 0xad, 0xa8, 0xe8, 0x52, 0x96, 0xe1, 0x90, 0x6e, 0x92, 0xa2, 0xb3,
	0x61, 0xb8, 0xd3, 0xad, 0x33, 0xb6, 0x66, 0xc5, 0xb6, 0xfd, 0x24, 0x4d, 0xc1, 0xa8, 0x0c, 0xa7,
	0xe1, 0x31, 0x74, 0x86, 0xb9, 0xd0, 0x3b, 0xe1, 0x8c, 0x2c, 0xc9, 0xb8, 0x34, 0xfc, 0x4f, 0x45,
	0x06, 0x84, 0x81, 0x76, 0x70, 0xe0, 0x2a, 0xd1, 0x42, 0x0e, 0x8f, 0x62, 0xef, 0x9a, 0x3a, 0x0e,
	0x30, 0x7a, 0x2b, 0x78, 0xea, 0x50, 0x46, 0xdf, 0x54, 0xaa, 0x8f, 0x7b, 0xc9, 0x04, 0x01, 0x88,
	0x10, 0xe8, 0x38, 0x4f, 0x39, 0xfd, 0xbb, 0x1a, 0xd5, 0x9c, 0xae, 0x0a, 0x7e, 0xdb, 0x1b, 0x85,
	0x89, 0xd3, 0xba, 0x49, 0x0f, 0x1e, 0x91, 0xc6, 0xfd, 0x5b, 0xc7, 0x09, 0x75, 0xc6, 0x73, 0x86,
	0xce, 0x73, 0x96, 0x55, 0xd3, 0xae, 0xf3, 0x60, 0x65, 0x20, 0xb0, 0x73, 0xfe, 0x13, 0x63, 0x60,
	0x30, 0xd5, 0x5c, 0x5f, 0xf8, 0x4e, 0x83, 0x9c, 0x34, 0x3b, 0xba, 0x14, 0x78, 0x16, 0xac, 0x79,
	0x94, 0xfa, 0x6b, 0x6f, 0x14, 0xbe, 0xe7, 0xd5, 0xc1, 0x9d, 0xb5, 0x1e, 0xa2, 0x84, 0x60, 0x1d,
	0xc4, 0xb0, 0x30, 0xf5, 0xe0, 0x16, 0x0f, 0xe9, 0x12, 0xc7, 0x34, 0xa0, 0x49, 0xa6, 0x79, 0xcf,
	0x74, 0x9a, 0xf6, 0x8d, 0xa5, 0xa0, 0x07, 0x18, 0xfb, 0xe9, 0xe6, 0x21, 0x75, 0x02, 0x96, 0xfe,
	0x22, 0x39, 0xe1, 0xe6, 0xb4, 0x7b, 0x7c, 0x86, 0x52, 0xa6, 0x37, 0xf9, 0x4f, 0x4c, 0x60, 0x7d,
	0x79, 0x6b, 0x22, 0xb0, 0xda, 0x8a, 0x4a, 0x60, 0x75, 0x35, 0xc1, 0x7b, 0xde, 0x28, 0xcc, 0x9d,
	0x02, 0xc9, 0x6e, 0xd1, 0xe1, 0x32, 0xe3, 0x9a, 0x2b, 0xff, 0xd1, 0x1e, 0xd7, 0xf4, 0xe5, 0xb2,
	0x5c, 0xd5, 0xe4, 0x73, 0x8e, 0x25, 0xbb, 0x5b, 0x47, 0x8b, 0xaf, 0xd3, 0xf1, 0x72, 0x77, 0x6b,
	0x7e, 0xbc, 0xfc, 0x37, 0xcf, 0x85, 0x10, 0x27, 0xf5, 0x0c, 0x64, 0x07, 0x85, 0xcc, 0xfb, 0xb3,
	0xf0, 0xf5, 0xcb, 0x40, 0x02, 0x95, 0x86, 0x05, 0xe3, 0xd8, 0x80, 0x86, 0x1c, 0xf7, 0x3e, 0xd8,
	0xfc, 0x4e, 0x88, 0xc3, 0xfa, 0xf7, 0x03, 0xc0, 0x5a, 0xff, 0x6e, 0x67, 0x9c, 0xf4, 0xef, 0x25,
	0xda, 0x69, 0xd3, 0xff, 0xb9, 0x47, 0x4e, 0x6c, 0x73, 0xfd, 0xaa, 0xd0, 0x49, 0x77, 0x68, 0x94,
	0x54, 0xe6, 0x82, 0x95, 0xca, 0xb9, 0x7a, 0x82, 0x1c, 0x51, 0x38, 0x3d, 0x2d, 0x67, 0x38, 0xc2,
	0x6f, 0x59, 0xf7, 0x0b, 0x5b, 0x06, 0xab, 0x92, 0xc8, 0x6c, 0x93, 0x8a, 0x3a, 0xd0, 0xff, 0x5a,
	0x7f, 0xed, 0xfa, 0xb3, 0xf1, 0x88, 0xe1, 0x54, 0xdf, 0xcc, 0x75, 0xa7, 0xa8, 0x99, 0x4f, 0x05,
	0xeb, 0x63, 0xcd, 0x98, 0x21, 0xa0, 0x84, 0xff, 0xf0, 0xc8, 0xf1, 0xab, 0x55, 0x3c, 0xb3, 0xe1,
	0xcc, 0xaa, 0x0c, 0x3e, 0xf0, 0x46, 0xe1, 0x2f, 0x7b, 0x93, 0x60, 0x7e, 0x0a, 0x08, 0x3d, 0x43,
	0xa6, 0x0a, 0xb1, 0x5f, 0x73, 0xc4, 0x9e, 0xd3, 0xed, 0x48, 0x3c, 0x3f, 0xef, 0x9f, 0x9b, 0x04,
	0x38, 0x97, 0xea, 0xef, 0x7a, 0xe4, 0xc4, 0xd5, 0xba, 0x15, 0xe7, 0xc5, 0x6a, 0xbf, 0x8e, 0x1c,
	0xa2, 0x4d, 0xf0, 0x0b, 0xa3, 0xf0, 0xab, 0x93, 0xb0, 0x2f, 0x5e, 0xe5, 0x1a, 0x13, 0xfa, 0xdd,
	0x4c, 0xec, 0x67, 0xf4, 0xd5, 0x83, 0x14, 0xa0, 0x4c, 0xc2, 0xee, 0xfb, 0x53, 0x26, 0xf1, 0x7f,
	0xdf, 0x23, 0xa7, 0xcc, 0x8e, 0x39, 0x32, 0xc5, 0xd2, 0x51, 0xf8, 0xb3, 0x4e, 0xba, 0xb5, 0x8a,
	0x00, 0x3e, 0x2d, 0xb7, 0xe2, 0x1c, 0xbd, 0xa3, 0x54, 0x17, 0x9b, 0x87, 0xd6, 0x23, 0x10, 0xe8,
	0xe7, 0xc8, 0xfa, 0x58, 0x28, 0xbb, 0x91, 0x66, 0x8a, 0x3b, 0xbd, 0x97, 0xde, 0x2d, 0x73, 0xd6,
	0xed, 0xed, 0x6b, 0x06, 0xe8, 0x27, 0x4c, 0x75, 0x20, 0x2e, 0xfd, 0x60, 0x9c, 0xb8, 0x2a, 0xd5,
	0xf7, 0xed, 0x8c, 0x2e, 0xd5, 0x69, 0xbe, 0xe5, 0x95, 0xa8, 0x5d, 0xf6, 0x83, 0x79, 0xab, 0xe2,
	0xe0, 0x85, 0x4c, 0x82, 0xa2, 0x22, 0x99, 0xe4, 0xc0, 0xb4, 0x57, 0x0a, 0x05, 0x46, 0x94, 0x9c,
	0xc5, 0x43, 0x43, 0x3f, 0xe8, 0x04, 0xae, 0x26, 0x66, 0x9a, 0x75, 0x98, 0xe2, 0xad, 0x23, 0x67,
	0x21, 0x35, 0xd7, 0xa4, 0x54, 0xff, 0x20, 0xa5, 0xfe, 0x95, 0x09, 0x30, 0x56, 0x2d, 0xf3, 0xb4,
	0x32, 0xbb, 0x3a, 0x78, 0xd7, 0x1b, 0x85, 0xbd, 0x9a, 0x4e, 0x20, 0x0f, 0xa9, 0x1d, 0xe1, 0x9c,
	0x72, 0xca, 0x08, 0x03, 0x15, 0xff, 0x3f, 0x11, 0xe6, 0x00, 0x64, 0xfe, 0x16, 0x39, 0x6e, 0x21,
	0x59, 0xa2, 0xcc, 0x01, 0x36, 0x4d, 0x95, 0x6f, 0x36, 0xf0, 0x2c, 0x77, 0x54, 0x9e, 0xfc, 0xc8,
	0x1b, 0x85, 0xbf, 0x53, 0xe7, 0xc9, 0x63, 0x15, 0x9f, 0xbb, 0xbd, 0x7d, 0xcd, 0xa5, 0xc5, 0xce,
	0xc5, 0x0e, 0xc7, 0x67, 0xbb, 0x4a, 0xd2, 0x5c, 0x71, 0xaa, 0xca, 0x9e, 0xbd, 0x15, 0x9e, 0xd1,
	0x59, 0x14, 0x71, 0x05, 0x47, 0x78, 0x3e, 0xa0, 0x4c, 0x53, 0x69, 0x2e, 0x97, 0x8f, 0x4e, 0x96,
	0xda, 0x11, 0xcf, 0xa6, 0xa5, 0xbf, 0x6a, 0xd2, 0xd2, 0x52, 0x07, 0xf3, 0x3c, 0xd6, 0xc9, 0x8a,
	0x6e, 0xd0, 0x5d, 0xdd, 0x1c, 0x85, 0x5b, 0x35, 0xec, 0xe7, 0xeb, 0xbe, 0x0a, 0xe0, 0x1f, 0xe8,
	0xa8, 0x6a, 0x37, 0x0b, 0x30, 0xc1, 0x8f, 0x3c, 0x72, 0xac, 0x92, 0x21, 0xcf, 0x97, 0xe5, 0x91,
	0xc9, 0x74, 0xca, 0x91, 0xf4, 0x1b, 0x55, 0x92, 0x9a, 0x84, 0xf2, 0xe9, 0xba, 0x54, 0x98, 0x57,
	0xce, 0x13, 0xab, 0xf9, 0x49, 0x3a, 0x23, 0x86, 0x75, 0xff, 0x44, 0x3d, 0x2f, 0xf4, 0xbf, 0xd3,
	0x20, 0xc7, 0xb6, 0xab, 0x20, 0x3e, 0x41, 0x42, 0xfc, 0x91, 0x37, 0x0a, 0xff, 0x6c, 0x22, 0x21,
	0x3e, 0x05, 0x94, 0x01, 0xc2, 0xb4, 0xcb, 0x3c, 0xff, 0x3d, 0xcf, 0xd5, 0x4d, 0x64, 0xc9, 0x2d,
	0x9a, 0x33, 0xa5, 0xf6, 0x85, 0x8c, 0x2f, 0x60, 0xd3, 0x1b, 0x32, 0xbd, 0x40, 0xdd, 0xae, 0xb9,
	0x00, 0xde, 0x49, 0x66, 0x6c, 0xc0, 0xf1, 0x0e, 0x08, 0x77, 0x20, 0x93, 0xbc, 0xdc, 0x80, 0x2d,
	0x53, 0x35, 0x00, 0x67, 0xd5, 0x81, 0x44, 0xfb, 0x6e, 0xa1, 0xbe, 0x1e, 0x8b, 0x68, 0x97, 0xcb,
	0xa3, 0xe5, 0xcc, 0xa7, 0x83, 0x09, 0xdd, 0x00, 0xdd, 0xfe, 0xc6, 0x5c, 0x9f, 0x1c, 0x21, 0x17,
	0xfc, 0xae, 0x37, 0x0a, 0xbf, 0xe9, 0xcd, 0x4a, 0x06, 0x1f, 0x73, 0xea, 0xa8, 0x24, 0xbc, 0x95,
	0xbb, 0x85, 0x57, 0xa0, 0xf9, 0x55, 0xbe, 0x5f, 0xcd, 0x08, 0xab, 0x3a, 0x3b, 0x42, 0x42, 0x58,
	0xdb, 0x48, 0xbb, 0x5b, 0x78, 0x57, 0xf2, 0x6d, 0xb3, 0x91, 0x4a, 0x64, 0x0f, 0x24, 0xaf, 0xeb,
	0xe9, 0xc8, 0xfb, 0xf3, 0xa3, 0xf0, 0xb9, 0x59, 0xf0, 0x9e, 0x2e, 0xaf, 0xca, 0x90, 0x99, 0x63,
	0x10, 0x92, 0xa7, 0x4c, 0xf3, 0xb8, 0xca, 0xca, 0xe9, 0x8d, 0xb5, 0xbb, 0xa5, 0xfc, 0x6f, 0x35,
	0xc8, 0xf1, 0x6d, 0xae, 0xc3, 0x3c, 0x4f, 0xb9, 0x11, 0xae, 0xcc, 0x3f, 0xc6, 0x75, 0x73, 0x15,
	0xff, 0x63, 0x6f, 0x14, 0xfe, 0x5e, 0xa9, 0xf8, 0x25, 0x06, 0x23, 0xfc, 0x0d, 0xa7, 0x73, 0x9c,
	0xa0, 0xaa, 0xee, 0x6f, 0x78, 0x4e, 0xdf, 0xa6, 0xa9, 0xaa, 0xea, 0x2b, 0x85, 0x94, 0x3c, 0xd3,
	0xe9, 0xd0, 0x5c, 0xd8, 0x30, 0x8a, 0x93, 0xd1, 0x98, 0xef, 0xf1, 0x54, 0x80, 0xef, 0xca, 0xa5,
	0xc0, 0xa3, 0x7f, 0xa2, 0xa8, 0x2a, 0xf2, 0x5c, 0x48, 0xc0, 0x37, 0x69, 0xa0, 0xb1, 0xcc, 0x07,
	0x98, 0xe8, 0x4c, 0x70, 0x72, 0xac, 0x04, 0x5c, 0x06, 0x8c, 0xf4, 0x8e, 0x49, 0x4c, 0x2b, 0x9a,
	0x98, 0x67, 0xa6, 0x47, 0xa7, 0x35, 0xe4, 0x0c, 0x75, 0xb3, 0x92, 0x0a, 0x59, 0x75, 0x3c, 0x51,
	0xb3, 0x91, 0x41, 0x35, 0xcf, 0x3c, 0xa7, 0xfc, 0x49, 0xc9, 0x60, 0x57, 0x1c, 0xab, 0x8a, 0x35,
	0xd3, 0x3e, 0x33, 0xea, 0x82, 0xef, 0x79, 0xa3, 0x30, 0x9d, 0x34, 0x4d, 0xfd, 0x7e, 0x80, 0x95,
	0x56, 0x68, 0x3e, 0x5f, 0x5e, 0x11, 0x97, 0x75, 0x47, 0xba, 0x21, 0x78, 0xca, 0x7f, 0x72, 0x02,
	0xc1, 0xdc, 0xe0, 0xfc, 0xef, 0x1e, 0x59, 0x37, 0xa9, 0xd2, 0x11, 0xd9, 0xf7, 0x43, 0x6f, 0x14,
	0xde, 0x9d, 0x40, 0x58, 0x9e, 0xfe, 0x32, 0x87, 0x64, 0xd6, 0x01, 0xf0, 0x2e, 0xde, 0x89, 0x1e,
	0x78, 0xf6, 0x3b, 0x14, 0x93, 0x2e, 0x34, 0x0f, 0x8b, 0x16, 0x18, 0xf6, 0x25, 0x72, 0xb2, 0x9c,
	0xd5, 0xe6, 0x23, 0xb3, 0xe0, 0x4e, 0x27, 0x23, 0xcf, 0xa1, 0xfb, 0x08, 0xd3, 0xf4, 0x90, 0xee,
	0xc3, 0xf5, 0x74, 0xac, 0x7c, 0xc8, 0xff, 0xa3, 0x45, 0xfb, 0x8d, 0xcf, 0x7e, 0x85, 0x1e, 0x2f,
	0x3c, 0xfe, 0xd8, 0x3e, 0x5e, 0xd8, 0x7c, 0x05, 0x0f, 0xfe, 0x67, 0x61, 0x14, 0x7e, 0xbc, 0x60,
	0x3f, 0xc6, 0x5d, 0xb4, 0x29, 0x86, 0x7f, 0x11, 0x8e, 0x5b, 0xb6, 0x40, 0x55, 0xce, 0xa3, 0xf1,
	0xe9, 0x51, 0x74, 0x21, 0xe9, 0xb5, 0x55, 0x26, 0x5b, 0x69, 0xfe, 0x60, 0xa1, 0x53, 0x59, 0x17,
	0xd8, 0x53, 0x28, 0x1e, 0xa3, 0x4e, 0x7b, 0x5c, 0xe3, 0x4d, 0x6e, 0x06, 0xc6, 0x88, 0xb9, 0x66,
	0x49, 0x6a, 0x94, 0x8d, 0xf9, 0x8d, 0x4e, 0xf6, 0xec, 0x7d, 0x5e, 0x8b, 0xbe, 0xd9, 0xe7, 0x19,
	0x1d, 0x8a, 0xc2, 0xd2, 0x6d, 0x2f, 0x61, 0x94, 0xd1, 0x3e, 0x53, 0xfd, 0x0b, 0xce, 0xaa, 0x78,
	0x21, 0x18, 0x0b, 0xca, 0x68, 0x2a, 0xc4, 0x6e, 0x91, 0x83, 0xc1, 0x73, 0xa1, 0x74, 0x4f, 0xf2,
	0xb1, 0x01, 0xb5, 0xc8, 0x2f, 0xa6, 0xe0, 0x50, 0x6c, 0x1a, 0x9e, 0x64, 0x5d, 0x21, 0x07, 0x28,
	0xfb, 0x05, 0xe8, 0x90, 0xe1, 0x60, 0x18, 0x1a, 0xe1, 0x67, 0x5f, 0x60, 0x43, 0x37, 0xc9, 0x62,
	0xdc, 0xb9, 0xa2, 0x6b, 0x6e, 0x10, 0x2d, 0x10, 0xc8, 0xcf, 0x2f, 0xd0, 0x84, 0x63, 0xe5, 0x3e,
	0x97, 0xbb, 0x5c, 0x22, 0x90, 0x27, 0x15, 0x4d, 0x72, 0x0c, 0xa3, 0xe0, 0xa2, 0x70, 0x69, 0xa5,
	0x25, 0x67, 0x03, 0x40, 0x6a, 0x96, 0x4d, 0x45, 0x4f, 0xb5, 0x28, 0xa1, 0xd7, 0xbb, 0x95, 0x3b,
	0x4b, 0xbc, 0xd9, 0xcc, 0x12, 0xd5, 0xe7, 0x31, 0x8e, 0x1e, 0x0f, 0x82, 0xee, 0xee, 0x32, 0xdb,
	0xe0, 0x87, 0x51, 0x2c, 0x1e, 0x24, 0x70, 0x5e, 0x57, 0x9a, 0xb3, 0xd8, 0x09, 0x57, 0x91, 0x43,
	0x59, 0x44, 0xb8, 0x82, 0x10, 0xa9, 0xa1, 0x2d, 0xdd, 0x79, 0x41, 0x64, 0x7c, 0xa7, 0xbc, 0x3f,
	0xd5, 0xb2, 0xe0, 0xb5, 0xb3, 0x21, 0x0a, 0xe3, 0x4c, 0xfd, 0xf1, 0x22, 0x59, 0xbc, 0x21, 0x7a,
	0x6a, 0x26, 0x5b, 0xca, 0x8f, 0x9c, 0xd5, 0x57, 0x02, 0xc1, 0x0f, 0x17, 0x47, 0xe1, 0x6f, 0x2d,
	0x4e, 0x72, 0xe6, 0x71, 0x83, 0xc6, 0x40, 0x41, 0x96, 0xe4, 0x92, 0xef, 0x25, 0xa2, 0x50, 0x96,
	0x25, 0xff, 0xb2, 0x00, 0xac, 0xb2, 0xbd, 0x44, 0xd7, 0x74, 0x44, 0x2a, 0x4c, 0xf0, 0xa9, 0x85,
	0xd9, 0x2f, 0x4f, 0x74, 0x9f, 0x4b, 0xab, 0x8d, 0xce, 0x90, 0xda, 0xaf, 0xb9, 0x54, 0x48, 0xcb,
	0x8a, 0xa4, 0x5b, 0xd6, 0x41, 0xbc, 0x30, 0x53, 0x80, 0x4b, 0xd3, 0x54, 0xb3, 0x5d, 0xae, 0x60,
	0xfd, 0x88, 0x67, 0x31, 0xcf, 0x22, 0x4e, 0xc5, 0x1e, 0x37, 0xe3, 0xc0, 0x28, 0x78, 0xc7, 0x3c,
	0xe0, 0xba, 0x2f, 0x62, 0xa3, 0x25, 0xfc, 0x70, 0x8f, 0x9f, 0xc0, 0x92, 0x09, 0x7b, 0x29, 0x0d,
	0xed, 0x86, 0xa9, 0x2d, 0x1a, 0x56, 0x18, 0xab, 0xe8, 0x2b, 0x6f, 0x6c, 0xdf, 0x02, 0x05, 0x1b,
	0x48, 0x40, 0x78, 0x29, 0x06, 0x15, 0x1b, 0x99, 0xd4, 0x5d, 0xf1, 0x74, 0x0f, 0x2c, 0x05, 0x06,
	0x47, 0x7e, 0x63, 0x8a, 0x15, 0x01, 0xdd, 0x26, 0x8d, 0x01, 0x5c, 0xc4, 0x53, 0xd5, 0x5e, 0x8d,
	0x72, 0x91, 0xc8, 0x32, 0x1e, 0xd9, 0xbb, 0x9b, 0x92, 0xcd, 0x94, 0x92, 0xa4, 0x8b, 0x90, 0xea,
	0xf0, 0x31, 0xbb, 0xeb, 0x73, 0x69, 0xd2, 0xbb, 0x41, 0x91, 0xea, 0x04, 0x7c, 0xa4, 0x95, 0x79,
	0x3f, 0xd1, 0xe6, 0x46, 0x5e, 0x41, 0x26, 0x38, 0xbd, 0xbd, 0xac, 0x79, 0xa0, 0x07, 0x84, 0x2f,
	0xa5, 0xa9, 0xc8, 0x66, 0x1c, 0x39, 0xc6, 0x1c, 0x41, 0x0b, 0x4e, 0x7b, 0x4d, 0xe2, 0xaf, 0x00,
	0x3a, 0xb0, 0xf1, 0x33, 0x9e, 0xff, 0xfd, 0x06, 0x59, 0xbf, 0xc1, 0x94, 0x7e, 0x89, 0xef, 0x8f,
	0xbf, 0xa7, 0x9f, 0xae, 0x66, 0xc6, 0xee, 0xab, 0x41, 0x99, 0x2e, 0x97, 0xfd, 0x82, 0x8f, 0xbd,
	0x51, 0xf8, 0x27, 0x1e, 0x59, 0x01, 0x13, 0xee, 0x25, 0x7c, 0xdf, 0xff, 0x19, 0xa7, 0x23, 0xe5,
	0xfa, 0xd0, 0x48, 0x48, 0x89, 0xf4, 0x8c, 0xf1, 0x2b, 0x40, 0xed, 0x50, 0xf5, 0x04, 0x26, 0xc3,
	0xcd, 0xbb, 0x88, 0xcf, 0x05, 0xc7, 0x72, 0xa4, 0xa8, 0x18, 0x7c, 0xec, 0x45, 0xea, 0xf3, 0xe1,
	0x8d, 0x6f, 0xf9, 0x85, 0x02, 0xdf, 0xad, 0x58, 0x6d, 0x71, 0x4d, 0xfb, 0x62, 0x9f, 0x0e, 0x58,
	0x36, 0xa4, 0x3c, 0xd3, 0x38, 0xa3, 0xdb, 0x77, 0x66, 0x29, 0x7b, 0x01, 0xf2, 0x59, 0xff, 0x33,
	0xa0, 0x0f, 0xb3, 0xae, 0xb9, 0xfb, 0x80, 0xd9, 0xee, 0x6f, 0xde, 0x83, 0xc9, 0xef, 0xfb, 0x6f,
	0x2f, 0x92, 0x55, 0x38, 0x87, 0x99, 0xa7, 0x22, 0xd5, 0x77, 0x2c, 0xee, 0x8d, 0xd6, 0xd8, 0x75,
	0x9b, 0xca, 0xe0, 0xa3, 0x85, 0x51, 0xf8, 0xe1, 0xc2, 0x58, 0x2f, 0x33, 0x9d, 0xb8, 0x71, 0xb9,
	0x1c, 0x7c, 0x0d, 0x0c, 0xa2, 0x22, 0xa3, 0x7c, 0x0f, 0xcc, 0x86, 0xef, 0x43, 0xc0, 0x0d, 0x32,
	0xbb, 0x3d, 0xff, 0xb7, 0x51, 0xae, 0x4f, 0xab, 0xaa, 0x42, 0xb2, 0xd8, 0xc1, 0xdd, 0x19, 0x7b,
	0xf5, 0x5a, 0xc2, 0x25, 0x93, 0x51, 0xdf, 0x30, 0xc1, 0x9e, 0x69, 0xad, 0x83, 0x06, 0xb6, 0x5d,
	0x86, 0x3d, 0xb5, 0x03, 0x4c, 0xdb, 0xc1, 0xa4, 0x2e, 0x4d, 0x78, 0x5c, 0xe7, 0x1c, 0x26, 0x83,
	0xc6, 0x37, 0xe0, 0x32, 0x9d, 0xa1, 0xdd, 0xa9, 0xd7, 0xbb, 0x74, 0xc7, 0x85, 0xda, 0x1d, 0x24,
	0xf6, 0x8e, 0x7b, 0xd2, 0xb4, 0x83, 0xec, 0x76, 0xf3, 0x61, 0x5b, 0x66, 0x3e, 0x71, 0x83, 0x67,
	0xd0, 0xa5, 0x11, 0x30, 0x10, 0x31, 0x48, 0x67, 0xdc, 0x25, 0x0d, 0x88, 0x06, 0x46, 0x2d, 0x72,
	0xbb, 0x1e, 0xae, 0x83, 0x32, 0xec, 0x54, 0x1e, 0xa9, 0xed, 0xc0, 0xae, 0xea, 0x25, 0x7b, 0x3c,
	0x73, 0xb7, 0x35, 0xd2, 0x3c, 0x3f, 0xa8, 0xcb, 0xce, 0xb4, 0xe6, 0x83, 0x5c, 0x8f, 0xa3, 0x08,
	0x1d, 0x30, 0x1d, 0xf5, 0x51, 0xa0, 0x8a, 0x02, 0xed, 0x5e, 0xb2, 0x37, 0x43, 0xa8, 0xfa, 0x6a,
	0x30, 0xd4, 0x7d, 0xa6, 0x8d, 0x8b, 0x3e, 0xe6, 0x13, 0xe4, 0x89, 0xe1, 0xc1, 0xaf, 0x35, 0xc8,
	0xea, 0x9b, 0x30, 0x1f, 0x3e, 0x61, 0x98, 0xb9, 0x61, 0xe6, 0x25, 0x4e, 0x7f, 0xe1, 0x8d, 0xc2,
	0x0f, 0x3c, 0xb2, 0xa2, 0x25, 0xc3, 0x0f, 0xfc, 0x7e, 0x2b, 0x92, 0xdc, 0x5c, 0x59, 0xed, 0xf3,
	0x4e, 0xdf, 0xc6, 0xc0, 0x4e, 0xa2, 0x3b, 0x45, 0xb4, 0xcb, 0xb5, 0x75, 0xc4, 0xe3, 0x8f, 0x26,
	0xcd, 0x7b, 0xfb, 0x08, 0xa4, 0xe4, 0x79, 0x91, 0x57, 0x86, 0xba, 0x7d, 0x62, 0x14, 0x54, 0xdf,
	0x1f, 0x68, 0xa3, 0x9d, 0x0b, 0x68, 0x3a, 0xa8, 0xd9, 0x31, 0xbe, 0x6f, 0x07, 0xf7, 0xcd, 0x4e,
	0xed, 0xd0, 0x69, 0x3d, 0x86, 0xd3, 0xf0, 0xcd, 0xd7, 0xc0, 0xa1, 0x8a, 0x78, 0x88, 0xaa, 0x38,
	0x11, 0xac, 0x82, 0x2a, 0x50, 0x0c, 0x48, 0xad, 0xfe, 0xb1, 0xe1, 0x5e, 0xd9, 0x01, 0xfc, 0x2c,
	0xbe, 0xc6, 0x54, 0x7f, 0x7c, 0x80, 0x74, 0xef, 0x26, 0xe7, 0xc4, 0xac, 0xef, 0x37, 0x46, 0x21,
	0x9c, 0x83, 0x6a, 0x5b, 0xa4, 0xe2, 0x53, 0x4e, 0x6a, 0x99, 0xf4, 0x7a, 0x5c, 0x96, 0xdb, 0xe1,
	0xef, 0x3d, 0x63, 0xac, 0x49, 0x2b, 0x4f, 0xf4, 0x6b, 0xb9, 0x08, 0xdf, 0x4b, 0x0c, 0xfb, 0xcc,
	0x2b, 0x0b, 0x7b, 0xdb, 0xd7, 0xe1, 0xdc, 0x5c, 0x07, 0xc2, 0x99, 0xba, 0x2b, 0x24, 0x47, 0x6e,
	0x42, 0x74, 0xc3, 0xb8, 0x8c, 0x33, 0xf1, 0xd8, 0x38, 0xe5, 0xdb, 0x10, 0x16, 0x76, 0xdc, 0x2b,
	0x12, 0x4b, 0x77, 0xb3, 0x6d, 0x8c, 0x96, 0x70, 0x29, 0xb3, 0x0a, 0x72, 0x7d, 0xc6, 0xe4, 0x20,
	0xc8, 0x8e, 0x79, 0x18, 0x64, 0x47, 0x01, 0x8b, 0x4b, 0x6d, 0x33, 0x45, 0xf7, 0x79, 0x9a, 0xb6,
	0xaa, 0xea, 0x45, 0x14, 0x97, 0xbd, 0xf3, 0xcf, 0x78, 0x90, 0xac, 0xaf, 0x98, 0x77, 0x36, 0x55,
	0xb2, 0x55, 0x5e, 0xde, 0xcc, 0x25, 0xdb, 0xfb, 0xde, 0x28, 0xfc, 0x6e, 0x95, 0x6c, 0x4f, 0x59,
	0xc6, 0x80, 0x56, 0x72, 0x91, 0xa6, 0xd4, 0xb5, 0x4c, 0xf3, 0xac, 0x8b, 0xed, 0x75, 0x9a, 0x41,
	0x95, 0x71, 0xbc, 0xe6, 0xe5, 0x51, 0x95, 0x4b, 0x25, 0xbd, 0x22, 0x29, 0x32, 0xc7, 0x2d, 0xf7,
	0x18, 0xca, 0xd0, 0x8b, 0xa1, 0xf7, 0xaa, 0x51, 0xcc, 0x60, 0x3e, 0x1e, 0x60, 0x54, 0x82, 0xe9,
	0x81, 0x51, 0xbf, 0xeb, 0x91, 0x13, 0x2f, 0xf0, 0x94, 0x6b, 0x7e, 0x34, 0xd8, 0xb7, 0x47, 0xe1,
	0x4b, 0x15, 0xd0, 0x8f, 0xc7, 0x38, 0xd7, 0x5c, 0xc0, 0xcd, 0x47, 0x2b, 0x1d, 0xea, 0x4d, 0x28,
	0xdd, 0xa7, 0xcf, 0x3f, 0xea, 0xa4, 0x9b, 0x0e, 0x10, 0x1f, 0x7a, 0xe4, 0xe4, 0x8d, 0x44, 0x69,
	0x90, 0x8b, 0xc7, 0xe6, 0x61, 0xd2, 0xbc, 0x43, 0xc2, 0xf1, 0x2a, 0x08, 0x15, 0xfc, 0x86, 0x37,
	0x0a, 0xbf, 0x5e, 0x91, 0xf3, 0x4b, 0x69, 0xa2, 0xb4, 0x55, 0x92, 0x35, 0x03, 0xc4, 0x2d, 0x7c,
	0x2a, 0x04, 0xea, 0xeb, 0x70, 0x10, 0x2e, 0xc7, 0x85, 0xec, 0x23, 0x21, 0x96, 0xf5, 0xb8, 0x6a,
	0x1e, 0x75, 0x60, 0x35, 0x23, 0x80, 0x56, 0xff, 0xfd, 0x06, 0x21, 0x2f, 0x25, 0x59, 0xfc, 0x26,
	0x26, 0x38, 0x33, 0x36, 0xf1, 0xdc, 0x67, 0xb7, 0xc1, 0x7f, 0x79, 0xa3, 0xf0, 0x1f, 0xbc, 0xc9,
	0x58, 0x77, 0x7e, 0x1c, 0xeb, 0x30, 0x4c, 0xe1, 0x71, 0x43, 0x16, 0x19, 0x3e, 0x0a, 0x98, 0x38,
	0xad, 0x7c, 0xcf, 0xc3, 0x8f, 0x49, 0x5c, 0xef, 0x0b, 0xb9, 0x4b, 0x53, 0x31, 0x3e, 0xd8, 0xd8,
	0x7c, 0x0b, 0xf1, 0x24, 0x8a, 0x46, 0x85, 0x74, 0xf7, 0x15, 0xfc, 0x2e, 0x8f, 0x0a, 0xfb, 0x24,
	0xc5, 0xf8, 0x05, 0x61, 0x23, 0x23, 0xce, 0xcd, 0x63, 0x1b, 0xb1, 0x0a, 0xc5, 0xe9, 0xbe, 0x3b,
	0xc8, 0xec, 0xb3, 0x0c, 0x5d, 0xc6, 0x2e, 0xba, 0x90, 0x09, 0x31, 0xa0, 0x01, 0xe4, 0xa8, 0xa4,
	0xf3, 0x98, 0xdd, 0xb5, 0xcc, 0x97, 0xb5, 0xd3, 0xfe, 0x29, 0x74, 0x7e, 0xd8, 0xba, 0x79, 0x0f,
	0x66, 0xbf, 0xef, 0x7f, 0xc7, 0x23, 0x27, 0xaf, 0x72, 0x7d, 0x0b, 0x0c, 0xf9, 0x20, 0x0e, 0x9c,
	0x9a, 0x7c, 0xa1, 0xa6, 0x82, 0x5f, 0x1a, 0x85, 0x5f, 0xae, 0xd0, 0x60, 0x13, 0x96, 0x47, 0x8b,
	0x42, 0x5c, 0x4f, 0x53, 0xc4, 0x6b, 0xe0, 0x6a, 0xb3, 0x82, 0x4b, 0xa1, 0xf0, 0xfa, 0xce, 0x58,
	0xb1, 0xe9, 0x6f, 0x80, 0x5c, 0xb6, 0xc3, 0xc5, 0x2a, 0x0f, 0x9e, 0xbf, 0x33, 0x0a, 0x6f, 0xfb,
	0x21, 0x39, 0x8d, 0x6f, 0xdf, 0xa8, 0x79, 0xfc, 0x46, 0xb7, 0xb9, 0xdc, 0xe3, 0x32, 0xf8, 0x3c,
	0x59, 0xbb, 0xcd, 0x95, 0x4a, 0xa8, 0xea, 0xb3, 0x6c, 0xb7, 0x79, 0x16, 0x0b, 0xf8, 0xff, 0x39,
	0x3c, 0xad, 0x3d, 0xfb, 0x6c, 0x2b, 0x12, 0x83, 0x4b, 0x0b, 0xcf, 0xb6, 0x9e, 0x39, 0xef, 0x35,
	0x2e, 0xad, 0xc3, 0x41, 0xdb, 0x1e, 0x39, 0x37, 0x6f, 0x2b, 0x91, 0x5d, 0x9e, 0xaa, 0xf9, 0xc5,
	0x46, 0xde, 0xe9, 0x2c, 0x23, 0xea, 0x2f, 0xfc, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x66, 0x73,
	0xf9, 0xd1, 0xeb, 0x2f, 0x00, 0x00,
}
