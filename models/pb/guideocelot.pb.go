// Code generated by protoc-gen-go. DO NOT EDIT.
// source: guideocelot.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf2 "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CredType int32

const (
	CredType_NIL_CT CredType = 0
	// VCS Cred type has 2 SubCredTypes: BITBUCKET and GITHUB
	CredType_VCS CredType = 1
	// REPO has 2 SubCredTypes: NEXUS and DOCKER
	CredType_REPO CredType = 2
	// K8S has 1 SubCredType: KUBECONF
	CredType_K8S CredType = 3
	// SSH has 1 SubCredType: SSHKEY
	CredType_SSH CredType = 5
	// NOTIFIER has 1 SubCredType: SLACK
	CredType_NOTIFIER CredType = 6
)

var CredType_name = map[int32]string{
	0: "NIL_CT",
	1: "VCS",
	2: "REPO",
	3: "K8S",
	5: "SSH",
	6: "NOTIFIER",
}
var CredType_value = map[string]int32{
	"NIL_CT":   0,
	"VCS":      1,
	"REPO":     2,
	"K8S":      3,
	"SSH":      5,
	"NOTIFIER": 6,
}

func (x CredType) String() string {
	return proto.EnumName(CredType_name, int32(x))
}
func (CredType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type SubCredType int32

const (
	SubCredType_NIL_SCT   SubCredType = 0
	SubCredType_BITBUCKET SubCredType = 1
	SubCredType_GITHUB    SubCredType = 2
	SubCredType_NEXUS     SubCredType = 3
	SubCredType_MAVEN     SubCredType = 4
	SubCredType_DOCKER    SubCredType = 5
	SubCredType_KUBECONF  SubCredType = 6
	SubCredType_SSHKEY    SubCredType = 8
	SubCredType_SLACK     SubCredType = 9
)

var SubCredType_name = map[int32]string{
	0: "NIL_SCT",
	1: "BITBUCKET",
	2: "GITHUB",
	3: "NEXUS",
	4: "MAVEN",
	5: "DOCKER",
	6: "KUBECONF",
	8: "SSHKEY",
	9: "SLACK",
}
var SubCredType_value = map[string]int32{
	"NIL_SCT":   0,
	"BITBUCKET": 1,
	"GITHUB":    2,
	"NEXUS":     3,
	"MAVEN":     4,
	"DOCKER":    5,
	"KUBECONF":  6,
	"SSHKEY":    8,
	"SLACK":     9,
}

func (x SubCredType) String() string {
	return proto.EnumName(SubCredType_name, int32(x))
}
func (SubCredType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type BuildReq struct {
	// acctRepo is the ocelot account to which the creds are uploaded and the repository you wish to operate on, in the form account/repo
	AcctRepo string `protobuf:"bytes,1,opt,name=acctRepo" json:"acctRepo,omitempty"`
	// hash is the git hash to trigger.
	Hash string `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
	// branch is the branch that corresponds to the git hash. if the git hash has never been built by ocelot, this field is required.
	Branch string `protobuf:"bytes,3,opt,name=branch" json:"branch,omitempty"`
}

func (m *BuildReq) Reset()                    { *m = BuildReq{} }
func (m *BuildReq) String() string            { return proto.CompactTextString(m) }
func (*BuildReq) ProtoMessage()               {}
func (*BuildReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *BuildReq) GetAcctRepo() string {
	if m != nil {
		return m.AcctRepo
	}
	return ""
}

func (m *BuildReq) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildReq) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

type AllCredsWrapper struct {
	// All repository credentials for integrations
	// @inject_tag: yaml:"repoCreds"
	RepoCreds *RepoCredWrapper `protobuf:"bytes,1,opt,name=repoCreds" json:"repoCreds,omitempty" yaml:"repoCreds"`
	// All VCS credentials for building
	// @inject_tag: yaml:"vcsCreds"
	VcsCreds *CredWrapper `protobuf:"bytes,3,opt,name=vcsCreds" json:"vcsCreds,omitempty" yaml:"vcsCreds"`
}

func (m *AllCredsWrapper) Reset()                    { *m = AllCredsWrapper{} }
func (m *AllCredsWrapper) String() string            { return proto.CompactTextString(m) }
func (*AllCredsWrapper) ProtoMessage()               {}
func (*AllCredsWrapper) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *AllCredsWrapper) GetRepoCreds() *RepoCredWrapper {
	if m != nil {
		return m.RepoCreds
	}
	return nil
}

func (m *AllCredsWrapper) GetVcsCreds() *CredWrapper {
	if m != nil {
		return m.VcsCreds
	}
	return nil
}

// just a container for a list of VCSCreds
type CredWrapper struct {
	Vcs []*VCSCreds `protobuf:"bytes,2,rep,name=vcs" json:"vcs,omitempty"`
}

func (m *CredWrapper) Reset()                    { *m = CredWrapper{} }
func (m *CredWrapper) String() string            { return proto.CompactTextString(m) }
func (*CredWrapper) ProtoMessage()               {}
func (*CredWrapper) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *CredWrapper) GetVcs() []*VCSCreds {
	if m != nil {
		return m.Vcs
	}
	return nil
}

type SSHKeyWrapper struct {
	// account name to associate ssh key with
	AcctName string `protobuf:"bytes,1,opt,name=acctName" json:"acctName,omitempty"`
	// the contents of the private key
	PrivateKey []byte `protobuf:"bytes,2,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	// There is only one subType taht is valid for SSHKeyWrapper, and it is SSHKEY
	SubType SubCredType `protobuf:"varint,10,opt,name=subType,enum=models.SubCredType" json:"subType,omitempty"`
	// identifier is the unique identifier for when an ssh key is not associated with a VCS account.
	Identifier string `protobuf:"bytes,11,opt,name=identifier" json:"identifier,omitempty"`
}

func (m *SSHKeyWrapper) Reset()                    { *m = SSHKeyWrapper{} }
func (m *SSHKeyWrapper) String() string            { return proto.CompactTextString(m) }
func (*SSHKeyWrapper) ProtoMessage()               {}
func (*SSHKeyWrapper) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *SSHKeyWrapper) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *SSHKeyWrapper) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *SSHKeyWrapper) GetSubType() SubCredType {
	if m != nil {
		return m.SubType
	}
	return SubCredType_NIL_SCT
}

func (m *SSHKeyWrapper) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

type SSHWrap struct {
	Keys []*SSHKeyWrapper `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *SSHWrap) Reset()                    { *m = SSHWrap{} }
func (m *SSHWrap) String() string            { return proto.CompactTextString(m) }
func (*SSHWrap) ProtoMessage()               {}
func (*SSHWrap) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *SSHWrap) GetKeys() []*SSHKeyWrapper {
	if m != nil {
		return m.Keys
	}
	return nil
}

type VCSCreds struct {
	// clientId is generated by creating an oAuth consumer in bitbucket. it is required to generate tokens.
	// @inject_tag: yaml:"clientId"
	ClientId string `protobuf:"bytes,1,opt,name=clientId" json:"clientId,omitempty" yaml:"clientId"`
	// clientSecret is generated by creating an oAuth consumer in bitbucket. it is required to generate tokens.
	// @inject_tag: yaml:"clientSecret"
	ClientSecret string `protobuf:"bytes,2,opt,name=clientSecret" json:"clientSecret,omitempty" yaml:"clientSecret"`
	// identifier is the name the user calls teh credential set
	Identifier string `protobuf:"bytes,8,opt,name=identifier" json:"identifier,omitempty"`
	// tokenUrl is the url at which to retrieve the token
	// @inject_tag: yaml:"tokenURL"
	TokenURL string `protobuf:"bytes,3,opt,name=tokenURL" json:"tokenURL,omitempty" yaml:"tokenURL"`
	// @inject_tag: yaml:"acctName"
	// acctName is the account to associate the VCSCred with. Must be the account name of the owner of the repository they wish to track (ie level11consulting)
	AcctName string `protobuf:"bytes,4,opt,name=acctName" json:"acctName,omitempty" yaml:"acctName"`
	// just a string that says whether or not there is an ssh key on file
	// @inject_tag: yaml:"sshFileLoc"
	SshFileLoc string `protobuf:"bytes,6,opt,name=sshFileLoc" json:"sshFileLoc,omitempty" yaml:"sshFileLoc"`
	// there is only one subtype that is valid for VCS creds at this time, and it is BITBUCKET
	// @inject_tag: yaml:"subType"
	SubType SubCredType `protobuf:"varint,10,opt,name=subType,enum=models.SubCredType" json:"subType,omitempty" yaml:"subType"`
}

func (m *VCSCreds) Reset()                    { *m = VCSCreds{} }
func (m *VCSCreds) String() string            { return proto.CompactTextString(m) }
func (*VCSCreds) ProtoMessage()               {}
func (*VCSCreds) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *VCSCreds) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *VCSCreds) GetClientSecret() string {
	if m != nil {
		return m.ClientSecret
	}
	return ""
}

func (m *VCSCreds) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *VCSCreds) GetTokenURL() string {
	if m != nil {
		return m.TokenURL
	}
	return ""
}

func (m *VCSCreds) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *VCSCreds) GetSshFileLoc() string {
	if m != nil {
		return m.SshFileLoc
	}
	return ""
}

func (m *VCSCreds) GetSubType() SubCredType {
	if m != nil {
		return m.SubType
	}
	return SubCredType_NIL_SCT
}

// container for list of repo creds
type RepoCredWrapper struct {
	Repo []*RepoCreds `protobuf:"bytes,3,rep,name=repo" json:"repo,omitempty"`
}

func (m *RepoCredWrapper) Reset()                    { *m = RepoCredWrapper{} }
func (m *RepoCredWrapper) String() string            { return proto.CompactTextString(m) }
func (*RepoCredWrapper) ProtoMessage()               {}
func (*RepoCredWrapper) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *RepoCredWrapper) GetRepo() []*RepoCreds {
	if m != nil {
		return m.Repo
	}
	return nil
}

type RepoCreds struct {
	// username of repository
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	// password of repository
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	// @inject_tag: yaml:"repoUrl"
	// repoUrl is the url that is associated with that repository, for example hub.docker.io
	RepoUrl string `protobuf:"bytes,6,opt,name=repoUrl" json:"repoUrl,omitempty" yaml:"repoUrl"`
	// identifier is the unique identifier that is associated with this acctName
	Identifier string `protobuf:"bytes,8,opt,name=identifier" json:"identifier,omitempty"`
	// @inject_tag: yaml:"acctName"
	// account name (same as from vcs)
	AcctName string `protobuf:"bytes,4,opt,name=acctName" json:"acctName,omitempty" yaml:"acctName"`
	// @inject_tag: yaml:"subType"
	// there are two subtypes that are valid for RepoCreds: DOCKER, NEXUS
	SubType SubCredType `protobuf:"varint,10,opt,name=subType,enum=models.SubCredType" json:"subType,omitempty" yaml:"subType"`
}

func (m *RepoCreds) Reset()                    { *m = RepoCreds{} }
func (m *RepoCreds) String() string            { return proto.CompactTextString(m) }
func (*RepoCreds) ProtoMessage()               {}
func (*RepoCreds) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *RepoCreds) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RepoCreds) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RepoCreds) GetRepoUrl() string {
	if m != nil {
		return m.RepoUrl
	}
	return ""
}

func (m *RepoCreds) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *RepoCreds) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *RepoCreds) GetSubType() SubCredType {
	if m != nil {
		return m.SubType
	}
	return SubCredType_NIL_SCT
}

type K8SCreds struct {
	// account name to associate this credential with
	AcctName string `protobuf:"bytes,1,opt,name=acctName" json:"acctName,omitempty"`
	// k8scontents is the contents of the kubeconfig file
	K8SContents string `protobuf:"bytes,2,opt,name=k8sContents" json:"k8sContents,omitempty"`
	// identifier in K8s creds is currently irrelevant, as there can only be one per account
	Identifier string `protobuf:"bytes,3,opt,name=identifier" json:"identifier,omitempty"`
	// there is currently only one subtype for k8SCreds, and it is KUBECONF
	// @inject_tag: yaml:"subType"
	SubType SubCredType `protobuf:"varint,5,opt,name=subType,enum=models.SubCredType" json:"subType,omitempty" yaml:"subType"`
}

func (m *K8SCreds) Reset()                    { *m = K8SCreds{} }
func (m *K8SCreds) String() string            { return proto.CompactTextString(m) }
func (*K8SCreds) ProtoMessage()               {}
func (*K8SCreds) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *K8SCreds) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *K8SCreds) GetK8SContents() string {
	if m != nil {
		return m.K8SContents
	}
	return ""
}

func (m *K8SCreds) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *K8SCreds) GetSubType() SubCredType {
	if m != nil {
		return m.SubType
	}
	return SubCredType_NIL_SCT
}

type K8SCredsWrapper struct {
	K8SCreds []*K8SCreds `protobuf:"bytes,2,rep,name=K8SCreds" json:"K8SCreds,omitempty"`
}

func (m *K8SCredsWrapper) Reset()                    { *m = K8SCredsWrapper{} }
func (m *K8SCredsWrapper) String() string            { return proto.CompactTextString(m) }
func (*K8SCredsWrapper) ProtoMessage()               {}
func (*K8SCredsWrapper) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *K8SCredsWrapper) GetK8SCreds() []*K8SCreds {
	if m != nil {
		return m.K8SCreds
	}
	return nil
}

type StatusQuery struct {
	// hash is the git hash to get status of
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	// acctName is the corresponding account that the hash is attached to
	AcctName string `protobuf:"bytes,2,opt,name=acctName" json:"acctName,omitempty"`
	// repoName is the corresponding repo name that the hash is attached to
	RepoName string `protobuf:"bytes,3,opt,name=repoName" json:"repoName,omitempty"`
	// partialRepo is just the first n letters of repo
	PartialRepo string `protobuf:"bytes,4,opt,name=partialRepo" json:"partialRepo,omitempty"`
}

func (m *StatusQuery) Reset()                    { *m = StatusQuery{} }
func (m *StatusQuery) String() string            { return proto.CompactTextString(m) }
func (*StatusQuery) ProtoMessage()               {}
func (*StatusQuery) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *StatusQuery) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *StatusQuery) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *StatusQuery) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *StatusQuery) GetPartialRepo() string {
	if m != nil {
		return m.PartialRepo
	}
	return ""
}

// BuildQuery is the message that is used for getting data on a specific build.
// You can query by hash, in which case if there are multiple of the same commit it will pick the latest,
// or you can query by build-id which in the case of log retrieval is only allowed if the build is completed.
type BuildQuery struct {
	// hash is the git hash that corresponds to a commit you wish to get information on
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	// build id is the build number given by ocelot that is associated with the commit
	BuildId int64 `protobuf:"varint,2,opt,name=buildId" json:"buildId,omitempty"`
}

func (m *BuildQuery) Reset()                    { *m = BuildQuery{} }
func (m *BuildQuery) String() string            { return proto.CompactTextString(m) }
func (*BuildQuery) ProtoMessage()               {}
func (*BuildQuery) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *BuildQuery) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildQuery) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

type Builds struct {
	Builds map[string]*BuildRuntimeInfo `protobuf:"bytes,1,rep,name=builds" json:"builds,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Builds) Reset()                    { *m = Builds{} }
func (m *Builds) String() string            { return proto.CompactTextString(m) }
func (*Builds) ProtoMessage()               {}
func (*Builds) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *Builds) GetBuilds() map[string]*BuildRuntimeInfo {
	if m != nil {
		return m.Builds
	}
	return nil
}

type BuildRuntimeInfo struct {
	// done says whether or not the build has completed
	Done bool `protobuf:"varint,1,opt,name=done" json:"done,omitempty"`
	// ip is the ip of the werker node that is running the build
	Ip string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	// grpcPort is the grpc port of the werker running the build
	GrpcPort string `protobuf:"bytes,3,opt,name=grpcPort" json:"grpcPort,omitempty"`
	// hash is the git hash that is currently being built
	Hash string `protobuf:"bytes,4,opt,name=hash" json:"hash,omitempty"`
	// acctName is the vcs account that this build is assocated with
	AcctName string `protobuf:"bytes,5,opt,name=acctName" json:"acctName,omitempty"`
	// repoName is the name of the git repository that is associated with this commit/build
	RepoName string `protobuf:"bytes,6,opt,name=repoName" json:"repoName,omitempty"`
	WsPort   string `protobuf:"bytes,7,opt,name=wsPort" json:"wsPort,omitempty"`
}

func (m *BuildRuntimeInfo) Reset()                    { *m = BuildRuntimeInfo{} }
func (m *BuildRuntimeInfo) String() string            { return proto.CompactTextString(m) }
func (*BuildRuntimeInfo) ProtoMessage()               {}
func (*BuildRuntimeInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *BuildRuntimeInfo) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func (m *BuildRuntimeInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *BuildRuntimeInfo) GetGrpcPort() string {
	if m != nil {
		return m.GrpcPort
	}
	return ""
}

func (m *BuildRuntimeInfo) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildRuntimeInfo) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *BuildRuntimeInfo) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *BuildRuntimeInfo) GetWsPort() string {
	if m != nil {
		return m.WsPort
	}
	return ""
}

type LineResponse struct {
	OutputLine string `protobuf:"bytes,1,opt,name=outputLine" json:"outputLine,omitempty"`
}

func (m *LineResponse) Reset()                    { *m = LineResponse{} }
func (m *LineResponse) String() string            { return proto.CompactTextString(m) }
func (*LineResponse) ProtoMessage()               {}
func (*LineResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *LineResponse) GetOutputLine() string {
	if m != nil {
		return m.OutputLine
	}
	return ""
}

type RepoAccount struct {
	// repo is the VCS repository
	Repo string `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	// account is the VCS account
	Account string `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	// limit is the number of summary records desired to be returned
	Limit int32 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
}

func (m *RepoAccount) Reset()                    { *m = RepoAccount{} }
func (m *RepoAccount) String() string            { return proto.CompactTextString(m) }
func (*RepoAccount) ProtoMessage()               {}
func (*RepoAccount) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *RepoAccount) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *RepoAccount) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RepoAccount) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type Status struct {
	// buildSum is the BuildSummary object that correlates to the build in question
	BuildSum *BuildSummary `protobuf:"bytes,1,opt,name=buildSum" json:"buildSum,omitempty"`
	// stages is a all the StageStatus objects associated to the build in question
	Stages []*StageStatus `protobuf:"bytes,2,rep,name=stages" json:"stages,omitempty"`
	// isInConsul is a boolean that is used for determining if the build is "running" or not. if isInConsul=true, the build is still running
	IsInConsul bool `protobuf:"varint,3,opt,name=isInConsul" json:"isInConsul,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *Status) GetBuildSum() *BuildSummary {
	if m != nil {
		return m.BuildSum
	}
	return nil
}

func (m *Status) GetStages() []*StageStatus {
	if m != nil {
		return m.Stages
	}
	return nil
}

func (m *Status) GetIsInConsul() bool {
	if m != nil {
		return m.IsInConsul
	}
	return false
}

// StageStatus is the detailed information about a specific stage that was executed during the build
type StageStatus struct {
	StageStatus string `protobuf:"bytes,1,opt,name=StageStatus" json:"StageStatus,omitempty"`
	// error is the error message; will either be populated by a stage not returning exit code 0 or an error handled in the code during the build
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	// status is whether or not hte build failed; 0 for pass; 1 for failed
	Status int32 `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	// messages are some descriptions of each stage that are generated at runtime
	Messages []string `protobuf:"bytes,4,rep,name=messages" json:"messages,omitempty"`
	// startTime is when this stage began execution
	StartTime *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=startTime" json:"startTime,omitempty"`
	// stageDuration is how long the stage took to execute
	StageDuration float64 `protobuf:"fixed64,6,opt,name=stageDuration" json:"stageDuration,omitempty"`
}

func (m *StageStatus) Reset()                    { *m = StageStatus{} }
func (m *StageStatus) String() string            { return proto.CompactTextString(m) }
func (*StageStatus) ProtoMessage()               {}
func (*StageStatus) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *StageStatus) GetStageStatus() string {
	if m != nil {
		return m.StageStatus
	}
	return ""
}

func (m *StageStatus) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *StageStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *StageStatus) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *StageStatus) GetStartTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *StageStatus) GetStageDuration() float64 {
	if m != nil {
		return m.StageDuration
	}
	return 0
}

// BuildSummary represents the build_summary table in postgres
// it is a top level view of how a repository is "doing" in ocelot, ie build times, fail status..
type BuildSummary struct {
	// hash is the git commit hash that corresponds with this build information
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	// failed is whether or not the build failed
	Failed bool `protobuf:"varint,2,opt,name=failed" json:"failed,omitempty"`
	// buildTime is the datetime that the build was picked up off the queue by the werker
	BuildTime *google_protobuf2.Timestamp `protobuf:"bytes,3,opt,name=buildTime" json:"buildTime,omitempty"`
	// account is the VCS account associated with the repository / commit
	Account string `protobuf:"bytes,4,opt,name=account" json:"account,omitempty"`
	// buildDuration is the length of time the whole build took to execute
	BuildDuration float64 `protobuf:"fixed64,5,opt,name=buildDuration" json:"buildDuration,omitempty"`
	// repo is the repository associated with the account / commit
	Repo string `protobuf:"bytes,6,opt,name=repo" json:"repo,omitempty"`
	// branch is the branch associated with the commit when it was pushed
	Branch string `protobuf:"bytes,7,opt,name=branch" json:"branch,omitempty"`
	// buildId is the id given to the build entry by postgres. it is unique
	BuildId int64 `protobuf:"varint,8,opt,name=buildId" json:"buildId,omitempty"`
	// queueTime is the datetime that either a tracking component or the admin put the build request on the queue to be processed by the werker node
	QueueTime *google_protobuf2.Timestamp `protobuf:"bytes,9,opt,name=queueTime" json:"queueTime,omitempty"`
}

func (m *BuildSummary) Reset()                    { *m = BuildSummary{} }
func (m *BuildSummary) String() string            { return proto.CompactTextString(m) }
func (*BuildSummary) ProtoMessage()               {}
func (*BuildSummary) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *BuildSummary) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildSummary) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

func (m *BuildSummary) GetBuildTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.BuildTime
	}
	return nil
}

func (m *BuildSummary) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *BuildSummary) GetBuildDuration() float64 {
	if m != nil {
		return m.BuildDuration
	}
	return 0
}

func (m *BuildSummary) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *BuildSummary) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *BuildSummary) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

func (m *BuildSummary) GetQueueTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.QueueTime
	}
	return nil
}

// summaries is a wrapper for a list of BuildSummary objects because protobuf can be dumb
type Summaries struct {
	Sums []*BuildSummary `protobuf:"bytes,1,rep,name=sums" json:"sums,omitempty"`
}

func (m *Summaries) Reset()                    { *m = Summaries{} }
func (m *Summaries) String() string            { return proto.CompactTextString(m) }
func (*Summaries) ProtoMessage()               {}
func (*Summaries) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *Summaries) GetSums() []*BuildSummary {
	if m != nil {
		return m.Sums
	}
	return nil
}

// PollRequest encompasses all the data necessary to set up poll tracking in ocelot.
type PollRequest struct {
	// account is the VCS account
	Account string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// repo is the VCS repository name
	Repo string `protobuf:"bytes,2,opt,name=repo" json:"repo,omitempty"`
	// cron is the cron string that will determine how often a check for changes should occur
	Cron string `protobuf:"bytes,4,opt,name=cron" json:"cron,omitempty"`
	// branches tells ocelot which branches should be checked for changes
	Branches string `protobuf:"bytes,5,opt,name=branches" json:"branches,omitempty"`
	// internal use only
	LastCronTime *google_protobuf2.Timestamp `protobuf:"bytes,6,opt,name=lastCronTime" json:"lastCronTime,omitempty"`
	// internal use only
	LastHashes map[string]string `protobuf:"bytes,7,rep,name=lastHashes" json:"lastHashes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PollRequest) Reset()                    { *m = PollRequest{} }
func (m *PollRequest) String() string            { return proto.CompactTextString(m) }
func (*PollRequest) ProtoMessage()               {}
func (*PollRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func (m *PollRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *PollRequest) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *PollRequest) GetCron() string {
	if m != nil {
		return m.Cron
	}
	return ""
}

func (m *PollRequest) GetBranches() string {
	if m != nil {
		return m.Branches
	}
	return ""
}

func (m *PollRequest) GetLastCronTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.LastCronTime
	}
	return nil
}

func (m *PollRequest) GetLastHashes() map[string]string {
	if m != nil {
		return m.LastHashes
	}
	return nil
}

// polls is a wrapper for a PollRequest list because protobuf can be dumb
type Polls struct {
	Polls []*PollRequest `protobuf:"bytes,1,rep,name=polls" json:"polls,omitempty"`
}

func (m *Polls) Reset()                    { *m = Polls{} }
func (m *Polls) String() string            { return proto.CompactTextString(m) }
func (*Polls) ProtoMessage()               {}
func (*Polls) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *Polls) GetPolls() []*PollRequest {
	if m != nil {
		return m.Polls
	}
	return nil
}

type Exists struct {
	Exists bool `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
}

func (m *Exists) Reset()                    { *m = Exists{} }
func (m *Exists) String() string            { return proto.CompactTextString(m) }
func (*Exists) ProtoMessage()               {}
func (*Exists) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

func (m *Exists) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

// Used in displaying all repos that are tracked by ocelot
type AcctRepo struct {
	// VCS Account
	Account string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// VCS Repository
	Repo string `protobuf:"bytes,2,opt,name=repo" json:"repo,omitempty"`
}

func (m *AcctRepo) Reset()                    { *m = AcctRepo{} }
func (m *AcctRepo) String() string            { return proto.CompactTextString(m) }
func (*AcctRepo) ProtoMessage()               {}
func (*AcctRepo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *AcctRepo) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *AcctRepo) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

// AcctRepos is used in the response to /v1/tracked-repositories, it is an array of AcctRepo objects. have to wrap it cuz proto -_-
type AcctRepos struct {
	AcctRepos []*AcctRepo `protobuf:"bytes,1,rep,name=acctRepos" json:"acctRepos,omitempty"`
}

func (m *AcctRepos) Reset()                    { *m = AcctRepos{} }
func (m *AcctRepos) String() string            { return proto.CompactTextString(m) }
func (*AcctRepos) ProtoMessage()               {}
func (*AcctRepos) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

func (m *AcctRepos) GetAcctRepos() []*AcctRepo {
	if m != nil {
		return m.AcctRepos
	}
	return nil
}

type NotifyWrap struct {
	Creds []*NotifyCreds `protobuf:"bytes,1,rep,name=creds" json:"creds,omitempty"`
}

func (m *NotifyWrap) Reset()                    { *m = NotifyWrap{} }
func (m *NotifyWrap) String() string            { return proto.CompactTextString(m) }
func (*NotifyWrap) ProtoMessage()               {}
func (*NotifyWrap) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

func (m *NotifyWrap) GetCreds() []*NotifyCreds {
	if m != nil {
		return m.Creds
	}
	return nil
}

type NotifyCreds struct {
	// account name to associate integration cred with
	AcctName string `protobuf:"bytes,1,opt,name=acctName" json:"acctName,omitempty"`
	// There is currently only one subType that is valid for Integrations, and it is SLACK
	SubType SubCredType `protobuf:"varint,2,opt,name=subType,enum=models.SubCredType" json:"subType,omitempty"`
	// identifier is the unique identifier for the integration
	Identifier string `protobuf:"bytes,3,opt,name=identifier" json:"identifier,omitempty"`
	// clientSecret is the secret associated with the integration cred
	ClientSecret string `protobuf:"bytes,4,opt,name=clientSecret" json:"clientSecret,omitempty"`
}

func (m *NotifyCreds) Reset()                    { *m = NotifyCreds{} }
func (m *NotifyCreds) String() string            { return proto.CompactTextString(m) }
func (*NotifyCreds) ProtoMessage()               {}
func (*NotifyCreds) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

func (m *NotifyCreds) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *NotifyCreds) GetSubType() SubCredType {
	if m != nil {
		return m.SubType
	}
	return SubCredType_NIL_SCT
}

func (m *NotifyCreds) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *NotifyCreds) GetClientSecret() string {
	if m != nil {
		return m.ClientSecret
	}
	return ""
}

func init() {
	proto.RegisterType((*BuildReq)(nil), "models.BuildReq")
	proto.RegisterType((*AllCredsWrapper)(nil), "models.AllCredsWrapper")
	proto.RegisterType((*CredWrapper)(nil), "models.CredWrapper")
	proto.RegisterType((*SSHKeyWrapper)(nil), "models.SSHKeyWrapper")
	proto.RegisterType((*SSHWrap)(nil), "models.SSHWrap")
	proto.RegisterType((*VCSCreds)(nil), "models.VCSCreds")
	proto.RegisterType((*RepoCredWrapper)(nil), "models.RepoCredWrapper")
	proto.RegisterType((*RepoCreds)(nil), "models.RepoCreds")
	proto.RegisterType((*K8SCreds)(nil), "models.K8SCreds")
	proto.RegisterType((*K8SCredsWrapper)(nil), "models.K8SCredsWrapper")
	proto.RegisterType((*StatusQuery)(nil), "models.StatusQuery")
	proto.RegisterType((*BuildQuery)(nil), "models.BuildQuery")
	proto.RegisterType((*Builds)(nil), "models.Builds")
	proto.RegisterType((*BuildRuntimeInfo)(nil), "models.BuildRuntimeInfo")
	proto.RegisterType((*LineResponse)(nil), "models.LineResponse")
	proto.RegisterType((*RepoAccount)(nil), "models.RepoAccount")
	proto.RegisterType((*Status)(nil), "models.Status")
	proto.RegisterType((*StageStatus)(nil), "models.StageStatus")
	proto.RegisterType((*BuildSummary)(nil), "models.BuildSummary")
	proto.RegisterType((*Summaries)(nil), "models.Summaries")
	proto.RegisterType((*PollRequest)(nil), "models.PollRequest")
	proto.RegisterType((*Polls)(nil), "models.Polls")
	proto.RegisterType((*Exists)(nil), "models.Exists")
	proto.RegisterType((*AcctRepo)(nil), "models.AcctRepo")
	proto.RegisterType((*AcctRepos)(nil), "models.AcctRepos")
	proto.RegisterType((*NotifyWrap)(nil), "models.NotifyWrap")
	proto.RegisterType((*NotifyCreds)(nil), "models.NotifyCreds")
	proto.RegisterEnum("models.CredType", CredType_name, CredType_value)
	proto.RegisterEnum("models.SubCredType", SubCredType_name, SubCredType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GuideOcelot service

type GuideOcelotClient interface {
	GetVCSCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*CredWrapper, error)
	GetVCSCred(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*VCSCreds, error)
	SetVCSCreds(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	UpdateVCSCreds(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	//    account,identifier,cred_sub_type
	VCSCredExists(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*Exists, error)
	CheckConn(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	SetVCSPrivateKey(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetRepoCred(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*RepoCreds, error)
	UpdateRepoCreds(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	RepoCredExists(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*Exists, error)
	GetK8SCred(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*K8SCreds, error)
	UpdateK8SCreds(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	K8SCredExists(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*Exists, error)
	SetNotifyCreds(ctx context.Context, in *NotifyCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetNotifyCred(ctx context.Context, in *NotifyCreds, opts ...grpc.CallOption) (*NotifyCreds, error)
	GetNotifyCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*NotifyWrap, error)
	UpdateNotifyCreds(ctx context.Context, in *NotifyCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	NotifyCredExists(ctx context.Context, in *NotifyCreds, opts ...grpc.CallOption) (*Exists, error)
	UpdateSSHCreds(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetSSHCred(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*SSHKeyWrapper, error)
	SSHCredExists(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*Exists, error)
	SetSSHCreds(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetSSHCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*SSHWrap, error)
	GetRepoCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*RepoCredWrapper, error)
	SetRepoCreds(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	SetK8SCreds(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetK8SCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*K8SCredsWrapper, error)
	GetAllCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*AllCredsWrapper, error)
	BuildRuntime(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (*Builds, error)
	Logs(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (GuideOcelot_LogsClient, error)
	LastFewSummaries(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*Summaries, error)
	GetStatus(ctx context.Context, in *StatusQuery, opts ...grpc.CallOption) (*Status, error)
	WatchRepo(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	BuildRepoAndHash(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (GuideOcelot_BuildRepoAndHashClient, error)
	PollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	DeletePollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	ListPolledRepos(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Polls, error)
	FindWerker(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (*BuildRuntimeInfo, error)
	GetTrackedRepos(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*AcctRepos, error)
}

type guideOcelotClient struct {
	cc *grpc.ClientConn
}

func NewGuideOcelotClient(cc *grpc.ClientConn) GuideOcelotClient {
	return &guideOcelotClient{cc}
}

func (c *guideOcelotClient) GetVCSCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*CredWrapper, error) {
	out := new(CredWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetVCSCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetVCSCred(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*VCSCreds, error) {
	out := new(VCSCreds)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetVCSCred", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetVCSCreds(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetVCSCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) UpdateVCSCreds(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/UpdateVCSCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) VCSCredExists(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/VCSCredExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) CheckConn(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/CheckConn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetVCSPrivateKey(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetVCSPrivateKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetRepoCred(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*RepoCreds, error) {
	out := new(RepoCreds)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetRepoCred", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) UpdateRepoCreds(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/UpdateRepoCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) RepoCredExists(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/RepoCredExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetK8SCred(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*K8SCreds, error) {
	out := new(K8SCreds)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetK8SCred", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) UpdateK8SCreds(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/UpdateK8SCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) K8SCredExists(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/K8SCredExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetNotifyCreds(ctx context.Context, in *NotifyCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetNotifyCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetNotifyCred(ctx context.Context, in *NotifyCreds, opts ...grpc.CallOption) (*NotifyCreds, error) {
	out := new(NotifyCreds)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetNotifyCred", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetNotifyCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*NotifyWrap, error) {
	out := new(NotifyWrap)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetNotifyCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) UpdateNotifyCreds(ctx context.Context, in *NotifyCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/UpdateNotifyCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) NotifyCredExists(ctx context.Context, in *NotifyCreds, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/NotifyCredExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) UpdateSSHCreds(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/UpdateSSHCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetSSHCred(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*SSHKeyWrapper, error) {
	out := new(SSHKeyWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetSSHCred", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SSHCredExists(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SSHCredExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetSSHCreds(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetSSHCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetSSHCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*SSHWrap, error) {
	out := new(SSHWrap)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetSSHCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetRepoCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*RepoCredWrapper, error) {
	out := new(RepoCredWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetRepoCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetRepoCreds(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetRepoCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetK8SCreds(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetK8SCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetK8SCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*K8SCredsWrapper, error) {
	out := new(K8SCredsWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetK8SCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetAllCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*AllCredsWrapper, error) {
	out := new(AllCredsWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetAllCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) BuildRuntime(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (*Builds, error) {
	out := new(Builds)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/BuildRuntime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) Logs(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (GuideOcelot_LogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GuideOcelot_serviceDesc.Streams[0], c.cc, "/models.GuideOcelot/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &guideOcelotLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GuideOcelot_LogsClient interface {
	Recv() (*LineResponse, error)
	grpc.ClientStream
}

type guideOcelotLogsClient struct {
	grpc.ClientStream
}

func (x *guideOcelotLogsClient) Recv() (*LineResponse, error) {
	m := new(LineResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *guideOcelotClient) LastFewSummaries(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*Summaries, error) {
	out := new(Summaries)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/LastFewSummaries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetStatus(ctx context.Context, in *StatusQuery, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) WatchRepo(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/WatchRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) BuildRepoAndHash(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (GuideOcelot_BuildRepoAndHashClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GuideOcelot_serviceDesc.Streams[1], c.cc, "/models.GuideOcelot/BuildRepoAndHash", opts...)
	if err != nil {
		return nil, err
	}
	x := &guideOcelotBuildRepoAndHashClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GuideOcelot_BuildRepoAndHashClient interface {
	Recv() (*LineResponse, error)
	grpc.ClientStream
}

type guideOcelotBuildRepoAndHashClient struct {
	grpc.ClientStream
}

func (x *guideOcelotBuildRepoAndHashClient) Recv() (*LineResponse, error) {
	m := new(LineResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *guideOcelotClient) PollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/PollRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) DeletePollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/DeletePollRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) ListPolledRepos(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Polls, error) {
	out := new(Polls)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/ListPolledRepos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) FindWerker(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (*BuildRuntimeInfo, error) {
	out := new(BuildRuntimeInfo)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/FindWerker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetTrackedRepos(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*AcctRepos, error) {
	out := new(AcctRepos)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetTrackedRepos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GuideOcelot service

type GuideOcelotServer interface {
	GetVCSCreds(context.Context, *google_protobuf.Empty) (*CredWrapper, error)
	GetVCSCred(context.Context, *VCSCreds) (*VCSCreds, error)
	SetVCSCreds(context.Context, *VCSCreds) (*google_protobuf.Empty, error)
	UpdateVCSCreds(context.Context, *VCSCreds) (*google_protobuf.Empty, error)
	//    account,identifier,cred_sub_type
	VCSCredExists(context.Context, *VCSCreds) (*Exists, error)
	CheckConn(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
	SetVCSPrivateKey(context.Context, *SSHKeyWrapper) (*google_protobuf.Empty, error)
	GetRepoCred(context.Context, *RepoCreds) (*RepoCreds, error)
	UpdateRepoCreds(context.Context, *RepoCreds) (*google_protobuf.Empty, error)
	RepoCredExists(context.Context, *RepoCreds) (*Exists, error)
	GetK8SCred(context.Context, *K8SCreds) (*K8SCreds, error)
	UpdateK8SCreds(context.Context, *K8SCreds) (*google_protobuf.Empty, error)
	K8SCredExists(context.Context, *K8SCreds) (*Exists, error)
	SetNotifyCreds(context.Context, *NotifyCreds) (*google_protobuf.Empty, error)
	GetNotifyCred(context.Context, *NotifyCreds) (*NotifyCreds, error)
	GetNotifyCreds(context.Context, *google_protobuf.Empty) (*NotifyWrap, error)
	UpdateNotifyCreds(context.Context, *NotifyCreds) (*google_protobuf.Empty, error)
	NotifyCredExists(context.Context, *NotifyCreds) (*Exists, error)
	UpdateSSHCreds(context.Context, *SSHKeyWrapper) (*google_protobuf.Empty, error)
	GetSSHCred(context.Context, *SSHKeyWrapper) (*SSHKeyWrapper, error)
	SSHCredExists(context.Context, *SSHKeyWrapper) (*Exists, error)
	SetSSHCreds(context.Context, *SSHKeyWrapper) (*google_protobuf.Empty, error)
	GetSSHCreds(context.Context, *google_protobuf.Empty) (*SSHWrap, error)
	GetRepoCreds(context.Context, *google_protobuf.Empty) (*RepoCredWrapper, error)
	SetRepoCreds(context.Context, *RepoCreds) (*google_protobuf.Empty, error)
	SetK8SCreds(context.Context, *K8SCreds) (*google_protobuf.Empty, error)
	GetK8SCreds(context.Context, *google_protobuf.Empty) (*K8SCredsWrapper, error)
	GetAllCreds(context.Context, *google_protobuf.Empty) (*AllCredsWrapper, error)
	BuildRuntime(context.Context, *BuildQuery) (*Builds, error)
	Logs(*BuildQuery, GuideOcelot_LogsServer) error
	LastFewSummaries(context.Context, *RepoAccount) (*Summaries, error)
	GetStatus(context.Context, *StatusQuery) (*Status, error)
	WatchRepo(context.Context, *RepoAccount) (*google_protobuf.Empty, error)
	BuildRepoAndHash(*BuildReq, GuideOcelot_BuildRepoAndHashServer) error
	PollRepo(context.Context, *PollRequest) (*google_protobuf.Empty, error)
	DeletePollRepo(context.Context, *PollRequest) (*google_protobuf.Empty, error)
	ListPolledRepos(context.Context, *google_protobuf.Empty) (*Polls, error)
	FindWerker(context.Context, *BuildReq) (*BuildRuntimeInfo, error)
	GetTrackedRepos(context.Context, *google_protobuf.Empty) (*AcctRepos, error)
}

func RegisterGuideOcelotServer(s *grpc.Server, srv GuideOcelotServer) {
	s.RegisterService(&_GuideOcelot_serviceDesc, srv)
}

func _GuideOcelot_GetVCSCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetVCSCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetVCSCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetVCSCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetVCSCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCSCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetVCSCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetVCSCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetVCSCred(ctx, req.(*VCSCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetVCSCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCSCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetVCSCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetVCSCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetVCSCreds(ctx, req.(*VCSCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_UpdateVCSCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCSCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).UpdateVCSCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/UpdateVCSCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).UpdateVCSCreds(ctx, req.(*VCSCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_VCSCredExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCSCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).VCSCredExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/VCSCredExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).VCSCredExists(ctx, req.(*VCSCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_CheckConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).CheckConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/CheckConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).CheckConn(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetVCSPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKeyWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetVCSPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetVCSPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetVCSPrivateKey(ctx, req.(*SSHKeyWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetRepoCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetRepoCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetRepoCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetRepoCred(ctx, req.(*RepoCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_UpdateRepoCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).UpdateRepoCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/UpdateRepoCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).UpdateRepoCreds(ctx, req.(*RepoCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_RepoCredExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).RepoCredExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/RepoCredExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).RepoCredExists(ctx, req.(*RepoCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetK8SCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetK8SCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetK8SCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetK8SCred(ctx, req.(*K8SCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_UpdateK8SCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).UpdateK8SCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/UpdateK8SCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).UpdateK8SCreds(ctx, req.(*K8SCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_K8SCredExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).K8SCredExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/K8SCredExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).K8SCredExists(ctx, req.(*K8SCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetNotifyCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetNotifyCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetNotifyCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetNotifyCreds(ctx, req.(*NotifyCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetNotifyCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetNotifyCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetNotifyCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetNotifyCred(ctx, req.(*NotifyCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetNotifyCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetNotifyCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetNotifyCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetNotifyCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_UpdateNotifyCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).UpdateNotifyCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/UpdateNotifyCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).UpdateNotifyCreds(ctx, req.(*NotifyCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_NotifyCredExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).NotifyCredExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/NotifyCredExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).NotifyCredExists(ctx, req.(*NotifyCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_UpdateSSHCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKeyWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).UpdateSSHCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/UpdateSSHCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).UpdateSSHCreds(ctx, req.(*SSHKeyWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetSSHCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKeyWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetSSHCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetSSHCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetSSHCred(ctx, req.(*SSHKeyWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SSHCredExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKeyWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SSHCredExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SSHCredExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SSHCredExists(ctx, req.(*SSHKeyWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetSSHCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKeyWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetSSHCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetSSHCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetSSHCreds(ctx, req.(*SSHKeyWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetSSHCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetSSHCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetSSHCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetSSHCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetRepoCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetRepoCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetRepoCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetRepoCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetRepoCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetRepoCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetRepoCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetRepoCreds(ctx, req.(*RepoCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetK8SCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetK8SCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetK8SCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetK8SCreds(ctx, req.(*K8SCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetK8SCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetK8SCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetK8SCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetK8SCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetAllCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetAllCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetAllCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetAllCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_BuildRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).BuildRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/BuildRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).BuildRuntime(ctx, req.(*BuildQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GuideOcelotServer).Logs(m, &guideOcelotLogsServer{stream})
}

type GuideOcelot_LogsServer interface {
	Send(*LineResponse) error
	grpc.ServerStream
}

type guideOcelotLogsServer struct {
	grpc.ServerStream
}

func (x *guideOcelotLogsServer) Send(m *LineResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GuideOcelot_LastFewSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).LastFewSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/LastFewSummaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).LastFewSummaries(ctx, req.(*RepoAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetStatus(ctx, req.(*StatusQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_WatchRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).WatchRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/WatchRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).WatchRepo(ctx, req.(*RepoAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_BuildRepoAndHash_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GuideOcelotServer).BuildRepoAndHash(m, &guideOcelotBuildRepoAndHashServer{stream})
}

type GuideOcelot_BuildRepoAndHashServer interface {
	Send(*LineResponse) error
	grpc.ServerStream
}

type guideOcelotBuildRepoAndHashServer struct {
	grpc.ServerStream
}

func (x *guideOcelotBuildRepoAndHashServer) Send(m *LineResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GuideOcelot_PollRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).PollRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/PollRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).PollRepo(ctx, req.(*PollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_DeletePollRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).DeletePollRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/DeletePollRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).DeletePollRepo(ctx, req.(*PollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_ListPolledRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).ListPolledRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/ListPolledRepos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).ListPolledRepos(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_FindWerker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).FindWerker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/FindWerker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).FindWerker(ctx, req.(*BuildReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetTrackedRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetTrackedRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetTrackedRepos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetTrackedRepos(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _GuideOcelot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "models.GuideOcelot",
	HandlerType: (*GuideOcelotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVCSCreds",
			Handler:    _GuideOcelot_GetVCSCreds_Handler,
		},
		{
			MethodName: "GetVCSCred",
			Handler:    _GuideOcelot_GetVCSCred_Handler,
		},
		{
			MethodName: "SetVCSCreds",
			Handler:    _GuideOcelot_SetVCSCreds_Handler,
		},
		{
			MethodName: "UpdateVCSCreds",
			Handler:    _GuideOcelot_UpdateVCSCreds_Handler,
		},
		{
			MethodName: "VCSCredExists",
			Handler:    _GuideOcelot_VCSCredExists_Handler,
		},
		{
			MethodName: "CheckConn",
			Handler:    _GuideOcelot_CheckConn_Handler,
		},
		{
			MethodName: "SetVCSPrivateKey",
			Handler:    _GuideOcelot_SetVCSPrivateKey_Handler,
		},
		{
			MethodName: "GetRepoCred",
			Handler:    _GuideOcelot_GetRepoCred_Handler,
		},
		{
			MethodName: "UpdateRepoCreds",
			Handler:    _GuideOcelot_UpdateRepoCreds_Handler,
		},
		{
			MethodName: "RepoCredExists",
			Handler:    _GuideOcelot_RepoCredExists_Handler,
		},
		{
			MethodName: "GetK8SCred",
			Handler:    _GuideOcelot_GetK8SCred_Handler,
		},
		{
			MethodName: "UpdateK8SCreds",
			Handler:    _GuideOcelot_UpdateK8SCreds_Handler,
		},
		{
			MethodName: "K8SCredExists",
			Handler:    _GuideOcelot_K8SCredExists_Handler,
		},
		{
			MethodName: "SetNotifyCreds",
			Handler:    _GuideOcelot_SetNotifyCreds_Handler,
		},
		{
			MethodName: "GetNotifyCred",
			Handler:    _GuideOcelot_GetNotifyCred_Handler,
		},
		{
			MethodName: "GetNotifyCreds",
			Handler:    _GuideOcelot_GetNotifyCreds_Handler,
		},
		{
			MethodName: "UpdateNotifyCreds",
			Handler:    _GuideOcelot_UpdateNotifyCreds_Handler,
		},
		{
			MethodName: "NotifyCredExists",
			Handler:    _GuideOcelot_NotifyCredExists_Handler,
		},
		{
			MethodName: "UpdateSSHCreds",
			Handler:    _GuideOcelot_UpdateSSHCreds_Handler,
		},
		{
			MethodName: "GetSSHCred",
			Handler:    _GuideOcelot_GetSSHCred_Handler,
		},
		{
			MethodName: "SSHCredExists",
			Handler:    _GuideOcelot_SSHCredExists_Handler,
		},
		{
			MethodName: "SetSSHCreds",
			Handler:    _GuideOcelot_SetSSHCreds_Handler,
		},
		{
			MethodName: "GetSSHCreds",
			Handler:    _GuideOcelot_GetSSHCreds_Handler,
		},
		{
			MethodName: "GetRepoCreds",
			Handler:    _GuideOcelot_GetRepoCreds_Handler,
		},
		{
			MethodName: "SetRepoCreds",
			Handler:    _GuideOcelot_SetRepoCreds_Handler,
		},
		{
			MethodName: "SetK8SCreds",
			Handler:    _GuideOcelot_SetK8SCreds_Handler,
		},
		{
			MethodName: "GetK8SCreds",
			Handler:    _GuideOcelot_GetK8SCreds_Handler,
		},
		{
			MethodName: "GetAllCreds",
			Handler:    _GuideOcelot_GetAllCreds_Handler,
		},
		{
			MethodName: "BuildRuntime",
			Handler:    _GuideOcelot_BuildRuntime_Handler,
		},
		{
			MethodName: "LastFewSummaries",
			Handler:    _GuideOcelot_LastFewSummaries_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _GuideOcelot_GetStatus_Handler,
		},
		{
			MethodName: "WatchRepo",
			Handler:    _GuideOcelot_WatchRepo_Handler,
		},
		{
			MethodName: "PollRepo",
			Handler:    _GuideOcelot_PollRepo_Handler,
		},
		{
			MethodName: "DeletePollRepo",
			Handler:    _GuideOcelot_DeletePollRepo_Handler,
		},
		{
			MethodName: "ListPolledRepos",
			Handler:    _GuideOcelot_ListPolledRepos_Handler,
		},
		{
			MethodName: "FindWerker",
			Handler:    _GuideOcelot_FindWerker_Handler,
		},
		{
			MethodName: "GetTrackedRepos",
			Handler:    _GuideOcelot_GetTrackedRepos_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _GuideOcelot_Logs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BuildRepoAndHash",
			Handler:       _GuideOcelot_BuildRepoAndHash_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "guideocelot.proto",
}

func init() { proto.RegisterFile("guideocelot.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 4439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x7a, 0x4d, 0x8c, 0x1c, 0xc7,
	0x75, 0xbf, 0x7a, 0xf6, 0x83, 0xb3, 0xb5, 0xfc, 0x18, 0x36, 0x65, 0x6a, 0x35, 0xb6, 0xac, 0xfa,
	0xf7, 0xdf, 0xb2, 0xa9, 0x15, 0x39, 0x2b, 0xd1, 0x56, 0xbc, 0xa1, 0x61, 0x47, 0xc3, 0xd5, 0x92,
	0x5c, 0x90, 0x22, 0xa9, 0x99, 0xa5, 0x64, 0xe7, 0x90, 0x6c, 0x4f, 0x4f, 0xcd, 0x4c, 0x73, 0x7a,
	0xba, 0x9a, 0x5d, 0xd5, 0xbb, 0x1a, 0x50, 0x04, 0x62, 0x05, 0x88, 0x83, 0x00, 0x41, 0x90, 0x91,
	0x01, 0x39, 0x86, 0x1c, 0xcb, 0x97, 0x00, 0x39, 0xe4, 0x03, 0x88, 0x10, 0x01, 0x39, 0xe4, 0xe0,
	0x5c, 0x12, 0x01, 0x41, 0x0c, 0x38, 0x41, 0x3e, 0x10, 0x24, 0x86, 0x10, 0xe4, 0x10, 0x20, 0x01,
	0x82, 0x9c, 0x02, 0x04, 0x49, 0xf0, 0x5e, 0x55, 0xf5, 0x54, 0xcf, 0xc7, 0x92, 0x5c, 0xe4, 0x34,
	0x53, 0xaf, 0x5e, 0x55, 0xbd, 0x8f, 0x5f, 0xbd, 0xf7, 0xaa, 0xaa, 0xc9, 0xe9, 0x6e, 0x16, 0xb6,
	0x19, 0x0f, 0x58, 0xc4, 0x65, 0x2d, 0x49, 0xb9, 0xe4, 0xee, 0xf2, 0x80, 0xb7, 0x59, 0x24, 0xaa,
	0x9f, 0xee, 0x72, 0xde, 0x8d, 0xd8, 0x06, 0x52, 0x5b, 0x59, 0x67, 0x83, 0x0d, 0x12, 0x39, 0x54,
	0x4c, 0xd5, 0xcf, 0xe8, 0x4e, 0x3f, 0x09, 0x37, 0xfc, 0x38, 0xe6, 0xd2, 0x97, 0x21, 0x8f, 0x85,
	0xee, 0x7d, 0x76, 0x72, 0xa8, 0x0c, 0x07, 0x4c, 0x48, 0x7f, 0x90, 0x68, 0x86, 0xf3, 0xf8, 0x13,
	0x5c, 0xe8, 0xb2, 0xf8, 0x82, 0x38, 0xf0, 0xbb, 0x5d, 0x96, 0x6e, 0xf0, 0x04, 0xa7, 0x98, 0x9e,
	0xce, 0x6b, 0x90, 0xf2, 0xe5, 0x2c, 0x8c, 0xda, 0x0d, 0x76, 0xcf, 0xad, 0x92, 0xb2, 0x1f, 0x04,
	0xb2, 0xc1, 0x12, 0xbe, 0xe6, 0x50, 0xe7, 0xdc, 0x4a, 0x23, 0x6f, 0xbb, 0x2e, 0x59, 0xec, 0xf9,
	0xa2, 0xb7, 0x56, 0x42, 0x3a, 0xfe, 0x77, 0xcf, 0x92, 0xe5, 0x56, 0xea, 0xc7, 0x41, 0x6f, 0x6d,
	0x01, 0xa9, 0xba, 0xe5, 0x0d, 0xc9, 0xa9, 0x7a, 0x14, 0x6d, 0xa5, 0xac, 0x2d, 0xde, 0x4c, 0xfd,
	0x24, 0x61, 0xa9, 0xfb, 0x32, 0x59, 0x49, 0x59, 0xc2, 0x91, 0x86, 0x73, 0xaf, 0x5e, 0x7c, 0xaa,
	0xa6, 0x8c, 0x51, 0x6b, 0xe8, 0x0e, 0xcd, 0xdb, 0x18, 0x73, 0xba, 0x1b, 0xa4, 0xbc, 0x1f, 0x08,
	0x35, 0x6a, 0x01, 0x47, 0x9d, 0x31, 0xa3, 0xec, 0x11, 0x39, 0x93, 0xf7, 0x12, 0x59, 0xb5, 0x3a,
	0x5c, 0x8f, 0x2c, 0xec, 0x07, 0x62, 0xad, 0x44, 0x17, 0xce, 0xad, 0x5e, 0xac, 0x98, 0xa1, 0x6f,
	0x6c, 0x35, 0x91, 0xbb, 0x01, 0x9d, 0xde, 0x77, 0x1d, 0x72, 0xa2, 0xd9, 0xbc, 0x76, 0x9d, 0x0d,
	0xcd, 0x28, 0x6d, 0x87, 0x9b, 0xfe, 0x80, 0xd9, 0x76, 0x80, 0xb6, 0xfb, 0x59, 0x42, 0x92, 0x34,
	0xdc, 0xf7, 0x25, 0xbb, 0xce, 0x86, 0x68, 0x8d, 0xe3, 0x0d, 0x8b, 0xe2, 0x5e, 0x20, 0xc7, 0x44,
	0xd6, 0xda, 0x1d, 0x26, 0x6c, 0x8d, 0x50, 0xe7, 0xdc, 0xc9, 0xb1, 0xc0, 0xcd, 0xac, 0x05, 0xab,
	0x42, 0x57, 0xc3, 0xf0, 0xc0, 0x74, 0x61, 0x9b, 0xc5, 0x32, 0xec, 0x84, 0x2c, 0x5d, 0x5b, 0xc5,
	0xc5, 0x2c, 0x8a, 0xf7, 0x25, 0x72, 0xac, 0xd9, 0xbc, 0x06, 0x82, 0xb9, 0xcf, 0x93, 0xc5, 0x3e,
	0x1b, 0x82, 0xf5, 0x40, 0x99, 0x4f, 0xe5, 0xd3, 0xda, 0xa2, 0x37, 0x90, 0xc5, 0xfb, 0x77, 0x87,
	0x94, 0x8d, 0x92, 0xa0, 0x4d, 0x10, 0x85, 0x2c, 0x96, 0x3b, 0x6d, 0xa3, 0x8d, 0x69, 0xbb, 0x1e,
	0x39, 0xae, 0xfe, 0x37, 0x59, 0x90, 0x32, 0xa9, 0xbd, 0x5b, 0xa0, 0x4d, 0x88, 0x58, 0x9e, 0x14,
	0x11, 0xe6, 0x97, 0xbc, 0xcf, 0xe2, 0x3b, 0x8d, 0x1b, 0x1a, 0x07, 0x79, 0xbb, 0x60, 0xc9, 0xc5,
	0x69, 0x4b, 0x0a, 0xd1, 0xbb, 0x12, 0x46, 0xec, 0x06, 0x0f, 0xd6, 0x96, 0xd5, 0xbc, 0x63, 0xca,
	0x63, 0x5a, 0xd2, 0xdb, 0x24, 0xa7, 0x26, 0x80, 0xe4, 0x3e, 0x47, 0x16, 0x01, 0x4a, 0x6b, 0x0b,
	0x68, 0xb1, 0xd3, 0x93, 0x78, 0x13, 0x0d, 0xec, 0xf6, 0xfe, 0xd4, 0x21, 0x2b, 0x39, 0x0d, 0x44,
	0xce, 0x04, 0x4b, 0x63, 0xcb, 0xf9, 0xa6, 0x0d, 0x7d, 0x89, 0x2f, 0xc4, 0x01, 0x4f, 0xdb, 0xda,
	0x54, 0x79, 0xdb, 0x5d, 0x23, 0xc7, 0x60, 0xb6, 0x3b, 0x69, 0xa4, 0x75, 0x31, 0xcd, 0x47, 0x31,
	0xe0, 0x5c, 0x23, 0x3d, 0xa6, 0x11, 0xde, 0x73, 0x48, 0xf9, 0xfa, 0xe6, 0xd8, 0xf1, 0x73, 0x61,
	0x4c, 0xc9, 0x6a, 0x7f, 0x53, 0x6c, 0xf1, 0x58, 0xb2, 0x58, 0x0a, 0xad, 0x8c, 0x4d, 0x9a, 0x90,
	0x7a, 0x61, 0x4a, 0x6a, 0x4b, 0xb2, 0xa5, 0x47, 0x90, 0xec, 0x67, 0xc8, 0x29, 0x23, 0x98, 0x71,
	0xcf, 0xf9, 0xb1, 0xac, 0x93, 0x3b, 0xd4, 0xd0, 0x1b, 0x39, 0x87, 0x77, 0x9f, 0xac, 0x36, 0xa5,
	0x2f, 0x33, 0xf1, 0x7a, 0xc6, 0xd2, 0x61, 0x1e, 0x8f, 0x1c, 0x2b, 0x1e, 0xd9, 0x0a, 0x97, 0x26,
	0x14, 0xae, 0x92, 0x32, 0xf8, 0x03, 0xfb, 0x34, 0x4a, 0x4d, 0x1b, 0x8c, 0x91, 0xf8, 0xa9, 0x0c,
	0xfd, 0x08, 0x43, 0x9f, 0xf2, 0x81, 0x4d, 0xf2, 0x2e, 0x11, 0x82, 0x51, 0x72, 0xfe, 0xda, 0x6b,
	0xe4, 0x58, 0x0b, 0x38, 0x76, 0x14, 0x32, 0x16, 0x1a, 0xa6, 0xe9, 0xfd, 0xba, 0x43, 0x96, 0x71,
	0xb0, 0x70, 0x2f, 0x92, 0x65, 0xa4, 0x9a, 0x4d, 0x5c, 0x35, 0xfa, 0xaa, 0x7e, 0xfd, 0xb3, 0x1d,
	0xcb, 0x74, 0xd8, 0xd0, 0x9c, 0xd5, 0x26, 0x59, 0xb5, 0xc8, 0x6e, 0x85, 0x2c, 0xf4, 0xd9, 0x50,
	0x2f, 0x0d, 0x7f, 0xdd, 0x1a, 0x59, 0xda, 0xf7, 0xa3, 0x4c, 0xa9, 0xbc, 0x7a, 0x71, 0xad, 0x30,
	0x67, 0x23, 0x8b, 0x21, 0x3f, 0xec, 0xc4, 0x1d, 0xde, 0x50, 0x6c, 0x97, 0x4a, 0x9b, 0x8e, 0xf7,
	0x87, 0x0e, 0xa9, 0x4c, 0xf6, 0x83, 0x5a, 0x6d, 0x1e, 0x2b, 0xac, 0x94, 0x1b, 0xf8, 0xdf, 0x3d,
	0x49, 0x4a, 0x61, 0xa2, 0x8d, 0x59, 0x0a, 0x13, 0x30, 0x63, 0x37, 0x4d, 0x82, 0xdb, 0x3c, 0x95,
	0xc6, 0x8c, 0xa6, 0x9d, 0x9b, 0x65, 0x71, 0x8e, 0x4b, 0x96, 0x0e, 0x71, 0xc9, 0xf2, 0x84, 0x4b,
	0xce, 0x92, 0xe5, 0x03, 0x81, 0xab, 0x1c, 0x53, 0xa9, 0x45, 0xb5, 0xbc, 0x1a, 0x39, 0x7e, 0x23,
	0x8c, 0x59, 0x83, 0x89, 0x84, 0xc7, 0x02, 0x83, 0x08, 0xcf, 0x64, 0x92, 0x49, 0xa0, 0x6a, 0xab,
	0x58, 0x14, 0xef, 0x75, 0xb2, 0x0a, 0x0e, 0xac, 0x07, 0x01, 0xcf, 0x62, 0x14, 0x31, 0x1d, 0x67,
	0x37, 0xfc, 0x0f, 0x9e, 0xf3, 0x55, 0xb7, 0xd6, 0xd3, 0x34, 0xdd, 0x27, 0xc9, 0x52, 0x14, 0x0e,
	0x42, 0xa5, 0xe9, 0x52, 0x43, 0x35, 0xbc, 0x6f, 0x39, 0x64, 0x59, 0x21, 0xd1, 0x7d, 0x91, 0x94,
	0xd1, 0x4b, 0xcd, 0x6c, 0xa0, 0x93, 0xda, 0x93, 0x05, 0xeb, 0x37, 0xb3, 0xc1, 0xc0, 0x4f, 0x87,
	0x8d, 0x9c, 0xcb, 0x7d, 0x81, 0x2c, 0x0b, 0xe9, 0x77, 0x99, 0x41, 0xfc, 0x78, 0xd3, 0x00, 0x55,
	0x4d, 0xdb, 0xd0, 0x2c, 0xb8, 0x05, 0xc5, 0x4e, 0xbc, 0xc5, 0x63, 0x91, 0x45, 0x28, 0x44, 0xb9,
	0x61, 0x51, 0xbc, 0xbf, 0x75, 0x70, 0x4f, 0x98, 0x71, 0x80, 0x63, 0xab, 0xa9, 0x95, 0x2c, 0x70,
	0x3c, 0x49, 0x96, 0x58, 0x9a, 0xf2, 0x54, 0x6b, 0xaa, 0x1a, 0x60, 0x6c, 0xa1, 0x86, 0x28, 0x45,
	0x75, 0x0b, 0x1c, 0x34, 0x60, 0x42, 0xa0, 0xb8, 0x8b, 0x74, 0x01, 0x1c, 0x64, 0xda, 0xee, 0x26,
	0x59, 0x11, 0xd2, 0x4f, 0xe5, 0x6e, 0xa8, 0x3d, 0x0b, 0x68, 0x56, 0xa5, 0x49, 0xcd, 0x94, 0x26,
	0xb5, 0x5d, 0x53, 0x9a, 0x34, 0xc6, 0xcc, 0xee, 0xe7, 0xc8, 0x09, 0xd4, 0xef, 0xd5, 0x2c, 0xc5,
	0x4a, 0x04, 0x7d, 0xef, 0x34, 0x8a, 0x44, 0xef, 0xc3, 0x12, 0x39, 0x6e, 0xdb, 0x70, 0xe6, 0xa6,
	0x3b, 0x4b, 0x96, 0x3b, 0x7e, 0x18, 0x31, 0xb5, 0xe7, 0xca, 0x0d, 0xdd, 0x02, 0xe1, 0xd0, 0xe2,
	0x28, 0xdc, 0xc2, 0xc3, 0x85, 0xcb, 0x99, 0x6d, 0x30, 0x2c, 0x16, 0xc1, 0xf0, 0x39, 0x72, 0x02,
	0xd9, 0x72, 0xb1, 0x97, 0x94, 0xd8, 0x05, 0x62, 0x0e, 0xb0, 0x65, 0x0b, 0x60, 0xe3, 0x32, 0xe9,
	0x98, 0x5d, 0x26, 0xd9, 0x21, 0xa3, 0x5c, 0x08, 0x19, 0x20, 0xff, 0xbd, 0x8c, 0x65, 0x0c, 0xe5,
	0x5f, 0x79, 0xb8, 0xfc, 0x39, 0xb3, 0xf7, 0x32, 0x59, 0x51, 0x06, 0x0b, 0x99, 0x70, 0xcf, 0x91,
	0x45, 0x91, 0x0d, 0x4c, 0xb0, 0x99, 0x0d, 0x4d, 0xe4, 0xf0, 0x7e, 0xaf, 0x44, 0x56, 0x6f, 0xf3,
	0x28, 0x6a, 0xb0, 0x7b, 0x19, 0x13, 0xd2, 0x36, 0x83, 0x53, 0x34, 0x83, 0x51, 0xb0, 0x64, 0x29,
	0xe8, 0x92, 0xc5, 0x20, 0xe5, 0xb1, 0xd9, 0xf8, 0xf0, 0x1f, 0xb0, 0xa3, 0xd4, 0x64, 0xc2, 0x6c,
	0x7c, 0xd3, 0x76, 0xbf, 0x46, 0x8e, 0x47, 0xbe, 0x90, 0x5b, 0x29, 0x8f, 0x51, 0xc3, 0xe5, 0x87,
	0x6a, 0x58, 0xe0, 0x77, 0xb7, 0x08, 0x81, 0xf6, 0x35, 0x5f, 0xc0, 0xec, 0xc7, 0x50, 0xbb, 0xff,
	0x6f, 0xb4, 0xb3, 0xd4, 0xa8, 0xdd, 0xc8, 0xb9, 0x54, 0x4c, 0xb5, 0x86, 0x55, 0xbf, 0x4a, 0x4e,
	0x4d, 0x74, 0xcf, 0x88, 0xad, 0x4f, 0xda, 0xb1, 0x75, 0xc5, 0x8e, 0xa0, 0x17, 0xc9, 0x12, 0xac,
	0x24, 0xdc, 0xe7, 0xc9, 0x52, 0x02, 0x7f, 0xb4, 0x95, 0xcf, 0xcc, 0x90, 0xa3, 0xa1, 0x38, 0x3c,
	0x4a, 0x96, 0xb7, 0xdf, 0x0a, 0x85, 0x14, 0x00, 0x09, 0x86, 0xff, 0x74, 0xb0, 0xd5, 0x2d, 0x6f,
	0x93, 0x94, 0xeb, 0xa6, 0xe2, 0x7e, 0x2c, 0x1f, 0x78, 0x5f, 0x21, 0x2b, 0x66, 0xa4, 0x70, 0x6b,
	0x64, 0xc5, 0x14, 0xee, 0x46, 0xae, 0x3c, 0xb5, 0x1a, 0xae, 0xc6, 0x98, 0xc5, 0xfb, 0x32, 0x21,
	0x37, 0xb9, 0x0c, 0x3b, 0x43, 0x5d, 0x68, 0x2e, 0x05, 0xba, 0x4e, 0x2f, 0x68, 0xa4, 0x58, 0x54,
	0x5e, 0x56, 0x1c, 0xde, 0xfb, 0x0e, 0x59, 0xb5, 0xc8, 0x87, 0x96, 0x1c, 0x56, 0xc1, 0x50, 0x7a,
	0xec, 0xca, 0x78, 0xba, 0xfe, 0x98, 0x2c, 0x5d, 0x17, 0xa7, 0x4b, 0xd7, 0xf5, 0x1d, 0x52, 0x36,
	0x13, 0xbb, 0x84, 0x2c, 0xdf, 0xdc, 0xb9, 0xf1, 0xf3, 0x5b, 0xbb, 0x95, 0x27, 0xdc, 0x63, 0x64,
	0xe1, 0x8d, 0xad, 0x66, 0xc5, 0x71, 0xcb, 0x64, 0xb1, 0xb1, 0x7d, 0xfb, 0x56, 0xa5, 0x04, 0xa4,
	0xeb, 0x9b, 0xcd, 0xca, 0x02, 0xfc, 0x69, 0x36, 0xaf, 0x55, 0x96, 0xdc, 0xe3, 0xa4, 0x7c, 0xf3,
	0xd6, 0xee, 0xce, 0x95, 0x9d, 0xed, 0x46, 0x65, 0x79, 0xfd, 0x6d, 0xb2, 0x6a, 0x89, 0xe9, 0xae,
	0x92, 0x63, 0x30, 0x5b, 0x13, 0xa7, 0x3b, 0x41, 0x56, 0x2e, 0xef, 0xec, 0x5e, 0xbe, 0xb3, 0x75,
	0x7d, 0x7b, 0xb7, 0xe2, 0xc0, 0x4a, 0x57, 0x77, 0x76, 0xaf, 0xdd, 0xb9, 0x5c, 0x29, 0xb9, 0x2b,
	0x64, 0xe9, 0xe6, 0xf6, 0xd7, 0xef, 0xc0, 0xc4, 0x2b, 0x64, 0xe9, 0xb5, 0xfa, 0x1b, 0xdb, 0x37,
	0x2b, 0x8b, 0xc0, 0xf1, 0xea, 0xad, 0xad, 0xeb, 0xdb, 0x0d, 0xb5, 0xcc, 0xf5, 0x3b, 0x97, 0xb7,
	0xb7, 0x6e, 0xdd, 0xbc, 0x52, 0x59, 0x86, 0x1e, 0x28, 0xe8, 0xb7, 0xbf, 0x51, 0x29, 0xc3, 0x80,
	0xe6, 0x8d, 0xfa, 0xd6, 0xf5, 0xca, 0xca, 0xc5, 0x1f, 0x5d, 0x21, 0xab, 0x57, 0xe1, 0x34, 0x79,
	0x0b, 0x4f, 0x93, 0xee, 0xc7, 0x0e, 0x59, 0xbd, 0xca, 0x64, 0x5e, 0xe3, 0x9f, 0x9d, 0xda, 0x3b,
	0xdb, 0x70, 0xa0, 0xac, 0xce, 0x3a, 0x2d, 0x79, 0xbf, 0xea, 0x8c, 0xea, 0x99, 0xf6, 0x31, 0x9e,
	0x8f, 0xdc, 0x27, 0x1b, 0x4c, 0x66, 0x69, 0x4c, 0xfd, 0x28, 0xa2, 0xfb, 0x81, 0xa0, 0xd8, 0x55,
	0x7d, 0x5d, 0x51, 0x05, 0x92, 0xdf, 0xd8, 0x6a, 0x2a, 0x32, 0x95, 0x3d, 0x5f, 0x52, 0x75, 0xaa,
	0xa5, 0x3d, 0x5f, 0x50, 0x3f, 0x6e, 0xd3, 0xc0, 0x8f, 0x69, 0x26, 0x18, 0xed, 0xf0, 0x94, 0x06,
	0x3d, 0x16, 0xf4, 0xc3, 0xb8, 0x4b, 0x79, 0x26, 0x69, 0xc0, 0xdb, 0x8c, 0x4a, 0x4e, 0x31, 0xb2,
	0xd5, 0xde, 0xf9, 0xf1, 0x3f, 0xbd, 0x5b, 0x3a, 0xe5, 0x9e, 0xd8, 0xd8, 0x7f, 0x69, 0x03, 0x27,
	0xdb, 0x80, 0xd5, 0xff, 0xcb, 0x21, 0x64, 0xac, 0x8c, 0x3b, 0x75, 0x4c, 0xab, 0x4e, 0x51, 0xbc,
	0x3f, 0x73, 0x46, 0xf5, 0xef, 0x38, 0x05, 0x1d, 0xd6, 0x1a, 0x4c, 0xa6, 0x21, 0xdb, 0x67, 0x54,
	0x84, 0x71, 0x37, 0x62, 0xb9, 0xc4, 0xd5, 0xc4, 0xe8, 0x61, 0x54, 0xa3, 0x61, 0x87, 0x86, 0x92,
	0xaa, 0x3d, 0x57, 0xa3, 0x22, 0x6b, 0xc9, 0x61, 0xc2, 0x68, 0x28, 0xa8, 0x4f, 0x53, 0x76, 0x2f,
	0x0b, 0x81, 0xe7, 0x1e, 0x94, 0x7a, 0x34, 0xf1, 0x53, 0x7f, 0x50, 0xa3, 0xa4, 0xc1, 0x3a, 0x2c,
	0x05, 0x45, 0x94, 0x24, 0x46, 0x10, 0x54, 0x58, 0xf6, 0x18, 0xe5, 0xad, 0xbb, 0x2c, 0x90, 0xb4,
	0x13, 0xb2, 0xa8, 0x2d, 0x50, 0xcd, 0x2f, 0xb8, 0xcf, 0x15, 0xd4, 0xdc, 0xb8, 0x6f, 0x76, 0xc2,
	0x83, 0x8d, 0xfb, 0x63, 0x1c, 0x3f, 0x70, 0xff, 0x05, 0xb2, 0xb8, 0xe5, 0xcb, 0x69, 0xfd, 0xe7,
	0x78, 0xd7, 0xfb, 0x7d, 0x67, 0x54, 0xff, 0x76, 0xd1, 0x0a, 0x6e, 0xbd, 0xdd, 0x46, 0xcd, 0x61,
	0x24, 0xac, 0xe1, 0x47, 0xd5, 0x14, 0x68, 0x3e, 0x8d, 0xd9, 0x41, 0x6e, 0x13, 0xd5, 0x43, 0x03,
	0x1e, 0x77, 0xc2, 0xae, 0xce, 0x5d, 0xa0, 0x9d, 0x76, 0x2b, 0xba, 0x11, 0x3c, 0x87, 0xbe, 0xe4,
	0x99, 0x3c, 0x92, 0x05, 0x5c, 0xaf, 0xe8, 0xe8, 0x4b, 0xce, 0xba, 0xfb, 0xa3, 0x12, 0x39, 0x79,
	0x27, 0x69, 0xfb, 0x92, 0x1d, 0x41, 0xdf, 0x77, 0x4b, 0xa3, 0xfa, 0x3f, 0x16, 0xf5, 0x7d, 0x4a,
	0x4d, 0x46, 0xfd, 0x49, 0xa5, 0x3f, 0x72, 0xb6, 0xe3, 0x76, 0xc2, 0xc3, 0x58, 0x69, 0x93, 0x01,
	0x1b, 0x80, 0xd2, 0x9f, 0xb4, 0x41, 0x18, 0x6b, 0xad, 0x6b, 0x74, 0xb7, 0x17, 0x0a, 0x2a, 0x7a,
	0x3c, 0x8b, 0xda, 0x94, 0xc7, 0xd1, 0x90, 0xb6, 0x18, 0x0d, 0xfc, 0x28, 0x52, 0x88, 0xe9, 0x49,
	0x66, 0x8f, 0xb3, 0xd0, 0xb3, 0x7b, 0x28, 0x7a, 0x8e, 0x62, 0xba, 0xf5, 0xea, 0xa3, 0x81, 0x07,
	0x4c, 0xfa, 0x45, 0x72, 0x42, 0xcf, 0xa8, 0x93, 0xcb, 0xb4, 0x41, 0x4f, 0x1a, 0x8a, 0xe2, 0xf0,
	0x9e, 0x70, 0xbf, 0x4a, 0x56, 0xb6, 0xc0, 0xb7, 0x5b, 0x3c, 0x8e, 0xe7, 0x46, 0x8f, 0x79, 0x7e,
	0x78, 0xc2, 0x7d, 0x67, 0x81, 0x54, 0x14, 0x66, 0x6f, 0x8f, 0xaf, 0x3e, 0x66, 0x5f, 0x49, 0xcc,
	0x9d, 0xe5, 0x8f, 0x4b, 0xa3, 0xfa, 0x2f, 0x95, 0x0a, 0xde, 0x7c, 0xa6, 0x2e, 0xa5, 0x1f, 0xf4,
	0xa8, 0x10, 0x3d, 0xda, 0x67, 0x43, 0x30, 0x19, 0x78, 0x4b, 0x57, 0xef, 0xd5, 0xbf, 0x71, 0x74,
	0x3f, 0x18, 0x2d, 0xd0, 0x07, 0x55, 0xca, 0x3b, 0xd4, 0x8f, 0x71, 0x48, 0x27, 0x8c, 0x30, 0xd8,
	0xf8, 0xb8, 0xd3, 0x75, 0xb6, 0xd4, 0x6e, 0xc5, 0xbe, 0x83, 0x30, 0x8a, 0xc0, 0xa9, 0x3e, 0x4e,
	0xc3, 0xda, 0xc0, 0x0c, 0x73, 0x61, 0x74, 0xc2, 0x19, 0xfd, 0x30, 0x66, 0xa9, 0xc2, 0x7f, 0xc4,
	0x63, 0x00, 0x0c, 0xf4, 0x43, 0x86, 0x15, 0xa1, 0xe4, 0xe9, 0xf0, 0x28, 0xfe, 0x2e, 0x98, 0xe3,
	0x10, 0xa7, 0xd7, 0xbc, 0xe7, 0x1f, 0xc9, 0xe9, 0x1b, 0x42, 0xf4, 0x70, 0x2f, 0xa9, 0x24, 0x60,
	0xae, 0x2e, 0xdc, 0xe9, 0x0b, 0x8e, 0xea, 0x34, 0xc9, 0xfb, 0xae, 0x33, 0xaa, 0x87, 0xc6, 0xea,
	0xaa, 0x7e, 0x7b, 0x2a, 0x55, 0xe1, 0x5f, 0x07, 0x4e, 0xa0, 0xa9, 0xc8, 0x59, 0x37, 0x91, 0x33,
	0x27, 0x4d, 0x87, 0xce, 0xc3, 0x8d, 0x81, 0x8a, 0x9d, 0x73, 0x3f, 0x3f, 0x56, 0x0c, 0xa6, 0x9a,
	0x1b, 0x0b, 0xbf, 0x5d, 0x22, 0xa7, 0xd4, 0x8e, 0x1e, 0x5f, 0xc8, 0xcc, 0x50, 0x6b, 0x1e, 0xa4,
	0xfe, 0xca, 0x19, 0xd5, 0x3f, 0x70, 0x8a, 0xca, 0x9d, 0xd5, 0x11, 0x22, 0x57, 0x41, 0x07, 0x88,
	0x61, 0xa6, 0xe8, 0x10, 0x16, 0x1f, 0x31, 0x24, 0x8e, 0x61, 0x40, 0xc3, 0x58, 0xb2, 0xae, 0x62,
	0x9a, 0x8e, 0x8d, 0xb9, 0xa0, 0x87, 0x38, 0xfb, 0x85, 0xea, 0x23, 0xda, 0x04, 0x3c, 0xfd, 0x32,
	0x39, 0x69, 0xe6, 0xd4, 0x7b, 0x7c, 0x86, 0x51, 0xa6, 0x37, 0xf9, 0x8f, 0x55, 0x62, 0xd5, 0x57,
	0x28, 0xee, 0xd4, 0xed, 0x4a, 0x75, 0x8a, 0xe2, 0x7d, 0xe0, 0x8c, 0xea, 0x89, 0x31, 0x20, 0xe9,
	0x67, 0x2d, 0x96, 0xc6, 0x4c, 0x32, 0xe1, 0x3e, 0xdd, 0x65, 0x92, 0x5e, 0xcf, 0xdb, 0xb6, 0x25,
	0x5f, 0x31, 0x28, 0xe9, 0x6f, 0x1e, 0x2d, 0xbf, 0x4e, 0xe7, 0xcb, 0xfe, 0xe6, 0xfc, 0x7c, 0xf9,
	0xaf, 0x8e, 0x49, 0x21, 0xf9, 0x4d, 0xd7, 0xb4, 0x66, 0x87, 0xa5, 0xcc, 0x07, 0xb3, 0xf4, 0xeb,
	0xe5, 0x89, 0x04, 0x88, 0x0a, 0x05, 0xe3, 0xdc, 0x80, 0x8e, 0x1c, 0x73, 0x1f, 0xee, 0x7e, 0x23,
	0xc4, 0xa3, 0xc6, 0xf7, 0x43, 0x94, 0xd5, 0xf1, 0x5d, 0xcf, 0x38, 0x19, 0xdf, 0x73, 0x6d, 0xa7,
	0x5d, 0xff, 0xe7, 0x0e, 0x39, 0xd9, 0x64, 0xd2, 0xae, 0xcd, 0x67, 0xd5, 0xf1, 0x73, 0xed, 0x04,
	0x35, 0x22, 0x37, 0x76, 0x5a, 0x8e, 0x71, 0x84, 0x5b, 0xd3, 0xe1, 0x17, 0xb6, 0x0c, 0x92, 0xc2,
	0x40, 0x6d, 0x13, 0xcb, 0x1c, 0x18, 0x7f, 0x75, 0xbc, 0x36, 0xfc, 0xfe, 0x78, 0xc4, 0x70, 0x8a,
	0x37, 0x36, 0xec, 0x14, 0x2d, 0xf3, 0x29, 0xaf, 0x32, 0xb6, 0x8c, 0x1a, 0x02, 0x46, 0xf8, 0x0f,
	0x87, 0x9c, 0xb8, 0x6a, 0xeb, 0x33, 0x5b, 0x9d, 0x59, 0x44, 0xef, 0x23, 0x67, 0x54, 0xff, 0x45,
	0x67, 0x52, 0x99, 0xff, 0x07, 0x80, 0x9e, 0x21, 0x93, 0x05, 0xec, 0x5b, 0x06, 0xd8, 0x73, 0xd8,
	0x8e, 0x84, 0xf3, 0x75, 0xf7, 0xdc, 0xa4, 0x82, 0x73, 0xa1, 0xfe, 0x9e, 0x43, 0x4e, 0x5e, 0x2d,
	0x7a, 0x71, 0x5e, 0xae, 0x76, 0x8b, 0x9a, 0x43, 0xb6, 0xf1, 0xbe, 0x31, 0xaa, 0x7f, 0x6d, 0x52,
	0xed, 0x0b, 0x57, 0x99, 0xc4, 0x82, 0xbe, 0x1f, 0xf3, 0x83, 0x98, 0xde, 0x3c, 0xcc, 0x00, 0x42,
	0x15, 0xec, 0xae, 0x3b, 0xe5, 0x12, 0xf7, 0x77, 0x1d, 0x72, 0x5a, 0xed, 0x98, 0x23, 0x43, 0x2c,
	0x1a, 0xd5, 0x7f, 0xca, 0x48, 0xb7, 0x6a, 0x09, 0xe0, 0xd2, 0x7c, 0x2b, 0xce, 0xb1, 0x3b, 0x4a,
	0x75, 0xa1, 0xfa, 0xc8, 0x76, 0x04, 0x00, 0xfd, 0x34, 0xa9, 0x8c, 0x85, 0xd2, 0x1b, 0x69, 0xa6,
	0xb8, 0xd3, 0x7b, 0xe9, 0xbd, 0xbc, 0x66, 0x6d, 0x36, 0xaf, 0x29, 0x45, 0x1f, 0xb3, 0xd4, 0x81,
	0xbc, 0xf4, 0x83, 0x71, 0xe1, 0x2a, 0x44, 0xcf, 0xd5, 0x33, 0x9a, 0x52, 0xa7, 0xfa, 0x8e, 0x93,
	0x6b, 0x6d, 0xaa, 0x1f, 0xac, 0x5b, 0x05, 0x83, 0x28, 0xa4, 0x0a, 0x14, 0x11, 0xa4, 0x61, 0x02,
	0x48, 0x7b, 0x2d, 0x13, 0xe0, 0xc4, 0x94, 0xf9, 0xed, 0xa1, 0x82, 0x1f, 0x30, 0x41, 0xa8, 0x69,
	0xfb, 0xd2, 0x6f, 0xf9, 0x82, 0xd5, 0x8e, 0x5c, 0x85, 0x14, 0x42, 0x93, 0x10, 0xbd, 0xc3, 0x8c,
	0xfa, 0x97, 0x2a, 0xc1, 0x68, 0xb3, 0xcc, 0xb3, 0xca, 0x6c, 0xb2, 0xf7, 0x9e, 0x33, 0xaa, 0x77,
	0x0b, 0x36, 0x81, 0x3a, 0xa4, 0x70, 0x84, 0x33, 0xc6, 0xc9, 0x33, 0x0c, 0x10, 0xfe, 0x6f, 0x32,
	0xcc, 0x21, 0x9a, 0xb9, 0x9b, 0xf8, 0x20, 0x68, 0x01, 0x65, 0x8e, 0x62, 0xd3, 0x50, 0xf9, 0x66,
	0x09, 0xcf, 0x72, 0x47, 0xc5, 0xc9, 0x0f, 0x9d, 0x51, 0xfd, 0xb7, 0x8a, 0x38, 0x79, 0xc6, 0x8a,
	0xb9, 0xcd, 0xe6, 0x35, 0x53, 0x16, 0x9b, 0x10, 0x3b, 0x1c, 0x9f, 0xed, 0xac, 0xa2, 0xd9, 0x0a,
	0xaa, 0x42, 0x9f, 0xbd, 0x05, 0x9e, 0xd1, 0xfd, 0x20, 0x60, 0x02, 0x8e, 0xf0, 0x6c, 0x40, 0x7d,
	0x49, 0x53, 0x75, 0xfb, 0x7f, 0x74, 0xb0, 0x14, 0x8e, 0x78, 0xba, 0x2c, 0xfd, 0x65, 0x55, 0x96,
	0xe6, 0x36, 0x98, 0x17, 0xb1, 0x4e, 0x59, 0xb6, 0xc1, 0x70, 0x75, 0x7b, 0x54, 0xdf, 0x2c, 0xe8,
	0xbe, 0x5e, 0x8c, 0x55, 0xa0, 0xfe, 0xa1, 0x81, 0xaa, 0x70, 0xb3, 0x00, 0x13, 0xfc, 0xd0, 0x21,
	0xc7, 0xad, 0x0a, 0x79, 0xbe, 0x2c, 0xf3, 0xde, 0xa2, 0xbd, 0x5f, 0xb0, 0x41, 0xaa, 0x0a, 0xca,
	0x17, 0x8a, 0x52, 0x61, 0x5d, 0x39, 0x4f, 0xac, 0xea, 0xe3, 0x30, 0xa3, 0x0e, 0x15, 0xf7, 0x64,
	0xb1, 0x2e, 0x74, 0xdf, 0x2f, 0x91, 0xe3, 0x4d, 0x5b, 0x89, 0xc7, 0x28, 0x88, 0x7f, 0xe2, 0x8c,
	0xea, 0x7f, 0x32, 0x51, 0x10, 0x9f, 0x06, 0xc8, 0x00, 0x60, 0x1a, 0x79, 0x9d, 0xff, 0x81, 0x63,
	0x68, 0x13, 0x55, 0x72, 0x8d, 0x9a, 0xf7, 0xcd, 0xf3, 0x54, 0x3f, 0x67, 0x9e, 0xa7, 0x66, 0xd7,
	0x9c, 0xa7, 0xe6, 0x61, 0x14, 0xef, 0x80, 0x70, 0x07, 0xfa, 0x29, 0xcb, 0x37, 0x60, 0x4d, 0x91,
	0x06, 0x10, 0xac, 0x5a, 0x50, 0x68, 0xbf, 0x95, 0x89, 0xb7, 0xdb, 0x3c, 0xe8, 0xb3, 0xf4, 0x68,
	0x35, 0xf3, 0x19, 0x6f, 0xc2, 0x36, 0x00, 0xb7, 0xbf, 0x56, 0xd7, 0x27, 0x47, 0xa8, 0x05, 0xbf,
	0xe7, 0x8c, 0xea, 0xdf, 0x74, 0x66, 0x15, 0x83, 0xcf, 0x18, 0x73, 0x58, 0x05, 0xaf, 0x75, 0xb7,
	0xf0, 0x1a, 0x74, 0xdf, 0x64, 0x07, 0x76, 0x45, 0x68, 0xdb, 0xec, 0x08, 0x05, 0x61, 0x61, 0x23,
	0xf5, 0x37, 0xf1, 0xae, 0xe4, 0x3b, 0x6a, 0x23, 0xe5, 0x9a, 0x3d, 0x14, 0xbc, 0x13, 0x0f, 0xac,
	0xde, 0xd7, 0x47, 0xf5, 0x57, 0x66, 0xa9, 0xf7, 0x42, 0x7e, 0x55, 0x86, 0xc8, 0x1c, 0x2b, 0x91,
	0xb2, 0xc8, 0x97, 0xac, 0x6d, 0xa3, 0x72, 0x7a, 0x63, 0xf5, 0x37, 0x85, 0xfb, 0x0a, 0x4a, 0x66,
	0x3e, 0xf2, 0x78, 0xb8, 0x64, 0x13, 0x9f, 0x83, 0x78, 0x4f, 0xb8, 0x7f, 0xb0, 0xa8, 0xdf, 0x77,
	0xf4, 0x0b, 0xa4, 0xeb, 0x16, 0x9e, 0x27, 0xf0, 0xa1, 0x75, 0x1c, 0x60, 0xd5, 0x0b, 0xa8, 0xf7,
	0xdf, 0x0b, 0xa3, 0xfa, 0x27, 0x0b, 0xfa, 0x21, 0xe6, 0x82, 0x8e, 0x5e, 0xee, 0x05, 0xa8, 0xe4,
	0x74, 0x83, 0x8a, 0x84, 0x05, 0xe3, 0xc2, 0x94, 0x77, 0x20, 0x9f, 0x6a, 0x92, 0x0a, 0x84, 0xd5,
	0x1f, 0x2c, 0xb4, 0xac, 0x75, 0x21, 0x67, 0x64, 0x82, 0xb5, 0xd1, 0x37, 0x5d, 0x26, 0xf1, 0x92,
	0x28, 0xe6, 0x6d, 0x46, 0xdb, 0x4c, 0xfa, 0x61, 0xa4, 0x9c, 0x86, 0xa1, 0x53, 0x86, 0xfb, 0xfa,
	0xaa, 0xa0, 0x46, 0xdf, 0xec, 0xb1, 0x98, 0x0e, 0x79, 0xa6, 0x93, 0xcc, 0x7e, 0xe8, 0x53, 0x9f,
	0xf6, 0x7c, 0xd1, 0x3b, 0x6f, 0x4e, 0x0c, 0x78, 0xd7, 0xd0, 0xe6, 0xd4, 0xa7, 0x11, 0xe7, 0xfd,
	0x2c, 0x81, 0x0c, 0x9d, 0x70, 0x21, 0xbb, 0x29, 0x1b, 0x03, 0x41, 0xf2, 0xe4, 0x42, 0xc4, 0xf6,
	0x59, 0xa4, 0x33, 0x7c, 0x18, 0x77, 0x78, 0x3a, 0x40, 0xd9, 0xcf, 0x03, 0x43, 0x8c, 0x83, 0x61,
	0x68, 0x80, 0x4f, 0x7e, 0x80, 0xa9, 0x4e, 0x18, 0xb7, 0xd1, 0x71, 0xbc, 0xa3, 0x2e, 0x27, 0xb4,
	0x22, 0x90, 0xfa, 0xcf, 0xd3, 0x90, 0x21, 0xf1, 0x80, 0xa5, 0x7d, 0x96, 0xa2, 0x22, 0x5f, 0x10,
	0x34, 0x4c, 0x70, 0x87, 0x26, 0x3c, 0x55, 0x27, 0x19, 0x21, 0x53, 0xe6, 0x0f, 0x40, 0x53, 0xb5,
	0x6c, 0xc4, 0xbb, 0xa2, 0x46, 0x09, 0xdd, 0xe9, 0x58, 0xd7, 0x21, 0x78, 0x69, 0x12, 0x87, 0xa2,
	0xc7, 0xda, 0x38, 0x7a, 0x3c, 0x08, 0xd8, 0xcd, 0x3d, 0x99, 0xd2, 0x1f, 0x46, 0xf9, 0xed, 0x41,
	0x08, 0x47, 0x01, 0x21, 0x99, 0xdf, 0x36, 0xc2, 0x59, 0x72, 0x08, 0xad, 0x11, 0xae, 0xc0, 0x79,
	0xa4, 0xe0, 0x4f, 0xf7, 0x5e, 0xe5, 0x31, 0xdb, 0xcb, 0xaf, 0x66, 0x64, 0x9a, 0xb1, 0x42, 0xd9,
	0x89, 0xc2, 0x18, 0x57, 0x7f, 0xb2, 0x48, 0x16, 0x6f, 0xf0, 0xae, 0x98, 0x89, 0x96, 0xfc, 0x81,
	0xcb, 0x7e, 0x21, 0xf6, 0x7e, 0x67, 0x71, 0x54, 0xff, 0x8d, 0xc5, 0x49, 0xcc, 0x3c, 0xab, 0xb4,
	0x51, 0xaa, 0x20, 0x4a, 0x92, 0x94, 0xed, 0x87, 0x3c, 0x13, 0x1a, 0x25, 0xff, 0xbc, 0x00, 0xa8,
	0xd2, 0x5c, 0xbc, 0xa3, 0x18, 0x11, 0x0a, 0x13, 0x78, 0xaa, 0x61, 0x62, 0x65, 0xa1, 0xec, 0xb1,
	0x54, 0x5b, 0xa3, 0x35, 0xa4, 0xfa, 0x25, 0x8f, 0xf2, 0x54, 0xa3, 0x22, 0xec, 0xe4, 0xb4, 0x50,
	0x98, 0x29, 0xa0, 0x90, 0x91, 0x54, 0xfa, 0x7d, 0x26, 0x60, 0xfd, 0x80, 0xc5, 0x6d, 0x16, 0x07,
	0x8c, 0xf2, 0x7d, 0xa6, 0xc6, 0x81, 0x53, 0xf0, 0xfa, 0x6a, 0xc0, 0x64, 0x8f, 0xb7, 0x95, 0x95,
	0xf0, 0xd1, 0x16, 0x6f, 0xd7, 0xc3, 0x09, 0x7f, 0x09, 0x09, 0xfd, 0x0a, 0xa9, 0x35, 0x5a, 0xb7,
	0x10, 0x2b, 0xe8, 0x6b, 0x77, 0x9a, 0xbb, 0x60, 0x60, 0xa5, 0x12, 0x00, 0x3e, 0xe5, 0x03, 0xcb,
	0x47, 0xaa, 0x2a, 0x10, 0x2c, 0xda, 0x07, 0x4f, 0x81, 0xc3, 0x11, 0xdf, 0x18, 0xbd, 0x03, 0x80,
	0xdb, 0xa4, 0x33, 0x00, 0x8b, 0x58, 0xb0, 0xed, 0x17, 0x20, 0x17, 0xf0, 0x38, 0x66, 0x81, 0x3e,
	0x16, 0xe6, 0x68, 0xa6, 0x94, 0x84, 0x1d, 0x54, 0xa9, 0xa8, 0x3e, 0x26, 0x8e, 0x1e, 0x4b, 0x55,
	0xe6, 0x18, 0x64, 0x91, 0x0c, 0x93, 0x28, 0x97, 0xf9, 0x20, 0x94, 0xea, 0xb2, 0x4f, 0x40, 0x92,
	0x99, 0xde, 0x5e, 0xda, 0x3d, 0xc0, 0x01, 0x81, 0x4b, 0x48, 0xca, 0xe3, 0x19, 0xd5, 0xcc, 0x18,
	0x23, 0xe8, 0xc1, 0xe9, 0xe8, 0x4b, 0xdc, 0x32, 0x68, 0x07, 0x3e, 0x7e, 0xd1, 0x71, 0xbf, 0x5f,
	0x22, 0x95, 0x1b, 0xbe, 0x90, 0x57, 0xd8, 0xc1, 0xf8, 0x2d, 0xf5, 0x8c, 0x9d, 0x74, 0xcd, 0x85,
	0xe4, 0xe9, 0xf1, 0x0b, 0x96, 0xe6, 0xf3, 0x3e, 0x71, 0x46, 0xf5, 0x3f, 0x72, 0x48, 0x19, 0x5c,
	0xb8, 0x1f, 0xb2, 0x03, 0xf7, 0x4b, 0xc6, 0x46, 0xc2, 0xf0, 0xd0, 0x80, 0xa7, 0x29, 0xc2, 0xb3,
	0x8d, 0x17, 0x8c, 0x85, 0x7a, 0xed, 0xf3, 0x98, 0x67, 0xab, 0x6f, 0xa1, 0x7e, 0xe6, 0x5e, 0x2e,
	0x1f, 0xc9, 0x2d, 0x87, 0x8f, 0xa3, 0x48, 0x71, 0x3e, 0xbc, 0x4c, 0xca, 0x2f, 0x3f, 0xf1, 0x9b,
	0x05, 0x6d, 0x2d, 0x26, 0x69, 0x8f, 0x1f, 0xd0, 0x81, 0x1f, 0x0f, 0x29, 0x8b, 0x25, 0xce, 0x68,
	0xf6, 0x9d, 0x5a, 0x4a, 0x9f, 0xad, 0x3e, 0xeb, 0x7e, 0x06, 0xec, 0xa1, 0xd6, 0x55, 0xc7, 0x2a,
	0x98, 0xed, 0xc1, 0xc6, 0x7d, 0x98, 0xfc, 0x81, 0xfb, 0xee, 0x22, 0x59, 0x81, 0x12, 0x4f, 0x7d,
	0x26, 0x60, 0x7f, 0xc3, 0x60, 0xbe, 0xcf, 0x19, 0x87, 0x6e, 0x45, 0xf4, 0x7e, 0xb2, 0x30, 0xaa,
	0x7f, 0xbc, 0x30, 0xb6, 0xcb, 0xcc, 0x20, 0xae, 0x42, 0x2e, 0x83, 0x58, 0x03, 0x83, 0x28, 0x8f,
	0x29, 0xdb, 0x07, 0xb7, 0xe1, 0xb7, 0x01, 0x10, 0x06, 0x7d, 0xbd, 0x3d, 0xff, 0xa7, 0x94, 0xaf,
	0x4f, 0x6d, 0x53, 0x21, 0x58, 0xf4, 0xe0, 0xce, 0x8c, 0xbd, 0x7a, 0x2d, 0x64, 0xa9, 0x9f, 0x06,
	0x3d, 0x85, 0x04, 0x5d, 0x2e, 0xeb, 0x00, 0x0d, 0x68, 0xbb, 0x04, 0x7b, 0x6a, 0x0f, 0x90, 0xb6,
	0x47, 0x45, 0x96, 0x24, 0x51, 0xc8, 0xda, 0x45, 0xcc, 0xe1, 0xc3, 0x80, 0x8a, 0x0d, 0xb8, 0x4c,
	0x6b, 0xa8, 0x77, 0xea, 0x4e, 0x87, 0xee, 0x99, 0xd2, 0x68, 0x0f, 0x81, 0xbd, 0x67, 0x3e, 0x67,
	0xd9, 0x43, 0x74, 0x9b, 0xf9, 0xb0, 0x2f, 0x56, 0xaf, 0x67, 0x10, 0x19, 0x64, 0xee, 0x04, 0x4c,
	0x44, 0x3e, 0x1c, 0x62, 0xcc, 0xf9, 0x0f, 0x44, 0x03, 0xa7, 0x66, 0x89, 0x5e, 0x0f, 0xd7, 0x41,
	0x19, 0xf6, 0xac, 0x0f, 0x94, 0xf6, 0x60, 0x57, 0x75, 0xc3, 0x7d, 0x16, 0x9b, 0x83, 0x60, 0xaa,
	0x9e, 0x9e, 0x8b, 0xb2, 0xfb, 0x52, 0xb2, 0x41, 0x22, 0xc7, 0x59, 0x84, 0x0e, 0x7c, 0x19, 0xf4,
	0x50, 0x20, 0xcb, 0x80, 0x7a, 0x2f, 0xe9, 0x43, 0x27, 0x9a, 0xde, 0x4e, 0x86, 0xb2, 0xe7, 0x4b,
	0x15, 0xa2, 0x8f, 0xbb, 0x04, 0x71, 0xa2, 0x70, 0xf0, 0x2b, 0x25, 0xb2, 0xf2, 0x26, 0xcc, 0x87,
	0xcf, 0xd7, 0x33, 0x37, 0xcc, 0xbc, 0x52, 0xec, 0x2f, 0x9c, 0x51, 0xfd, 0x23, 0x87, 0x94, 0x65,
	0xea, 0xe3, 0xdb, 0xa1, 0x5b, 0x0b, 0x52, 0xa6, 0x4e, 0xc3, 0x07, 0xac, 0xd5, 0xd3, 0x39, 0xb0,
	0x15, 0xca, 0x56, 0x16, 0xf4, 0x99, 0xd4, 0x81, 0x78, 0x7c, 0x1f, 0x5b, 0xbd, 0x7f, 0x80, 0x8a,
	0xe4, 0x38, 0xcf, 0x12, 0x6b, 0xa8, 0xd9, 0x27, 0xca, 0x40, 0xc5, 0xfd, 0x81, 0x3e, 0xda, 0x3b,
	0x8f, 0xae, 0x03, 0xca, 0x9e, 0x8a, 0x7d, 0x7b, 0xb8, 0x6f, 0xf6, 0x0a, 0xf5, 0xac, 0x8e, 0x18,
	0xc6, 0xc2, 0xb7, 0x6f, 0x41, 0x40, 0xe5, 0xed, 0x21, 0x9a, 0xe2, 0xa4, 0xb7, 0x02, 0xa6, 0x40,
	0x31, 0xa0, 0x78, 0xfb, 0x87, 0x92, 0xf9, 0xc2, 0x0a, 0xd4, 0x8f, 0xdb, 0xd7, 0x7c, 0xd1, 0x1b,
	0xd7, 0xa6, 0xe6, 0x93, 0xdb, 0x39, 0x39, 0xeb, 0xfb, 0xa5, 0x51, 0xfd, 0x5b, 0xa5, 0x89, 0x2d,
	0x62, 0xc5, 0x94, 0x53, 0x32, 0x0d, 0xbb, 0x5d, 0x96, 0xe6, 0xdb, 0xe1, 0xef, 0x1c, 0xe5, 0xac,
	0x49, 0x2f, 0x4f, 0xf0, 0xd5, 0x4c, 0x86, 0xef, 0x86, 0x0a, 0x7d, 0xea, 0x01, 0x57, 0x5f, 0x24,
	0xb4, 0x18, 0x53, 0x37, 0x0d, 0x50, 0xae, 0x77, 0x78, 0xca, 0x10, 0x9b, 0x90, 0xdd, 0x30, 0x2f,
	0xe3, 0x4c, 0xac, 0xad, 0x82, 0xf2, 0x5d, 0x48, 0x0b, 0x7b, 0xe6, 0x0b, 0x02, 0x0d, 0x77, 0xb5,
	0x6d, 0x94, 0x95, 0x70, 0x29, 0xb5, 0x0a, 0x62, 0x7d, 0xc6, 0xe4, 0x20, 0xc8, 0x9e, 0xfa, 0x28,
	0x44, 0x8f, 0x02, 0x14, 0xe7, 0xd6, 0xf6, 0x05, 0x3d, 0x60, 0x51, 0x54, 0xb3, 0xcd, 0x8b, 0x5a,
	0x5c, 0x72, 0xd6, 0x5f, 0x74, 0xdc, 0x7f, 0x73, 0x48, 0x59, 0x7d, 0x63, 0x61, 0x83, 0xcd, 0xfa,
	0xea, 0x62, 0x2e, 0xd8, 0x3e, 0x74, 0x46, 0xf5, 0xef, 0xd9, 0x60, 0x7b, 0x5e, 0x23, 0x06, 0xac,
	0x92, 0xf0, 0x28, 0xa2, 0xa6, 0x67, 0x1a, 0x67, 0x1d, 0xec, 0x2f, 0xc2, 0x0c, 0x48, 0x2a, 0xf0,
	0xaa, 0xaf, 0x4e, 0x6c, 0x2c, 0xe5, 0xf0, 0x0a, 0x52, 0x1e, 0x1b, 0x6c, 0x99, 0x0f, 0x61, 0x14,
	0xbc, 0x7c, 0x8c, 0x5e, 0x05, 0x88, 0x29, 0x9d, 0x4f, 0x78, 0x98, 0x95, 0x60, 0x7a, 0x40, 0xd4,
	0x6f, 0x3b, 0xe4, 0xe4, 0xab, 0x2c, 0x62, 0x92, 0x1d, 0x4d, 0xed, 0xbb, 0xa3, 0xfa, 0x15, 0x4b,
	0xe9, 0x67, 0xdb, 0x38, 0xd7, 0x5c, 0x85, 0xab, 0x4f, 0x5b, 0x0c, 0xc5, 0x2e, 0x94, 0xee, 0xd3,
	0xeb, 0x4f, 0x1b, 0xe9, 0xa6, 0x13, 0xc4, 0xc7, 0x0e, 0x39, 0x75, 0x23, 0x14, 0x12, 0xe4, 0x62,
	0x6d, 0xf5, 0x51, 0xca, 0xbc, 0x43, 0xc2, 0x09, 0x5b, 0x09, 0xe1, 0xfd, 0x9a, 0x33, 0xaa, 0xbf,
	0x6d, 0xc9, 0xf9, 0xe5, 0x28, 0x14, 0x52, 0x1b, 0x49, 0xbb, 0x01, 0xf2, 0x16, 0x7e, 0x85, 0x00,
	0xe6, 0x6b, 0x31, 0x10, 0x2e, 0xc1, 0x85, 0xf4, 0xf7, 0x07, 0x7e, 0xdc, 0x65, 0xa2, 0x7a, 0xd4,
	0x81, 0x76, 0x45, 0x00, 0xbd, 0xee, 0x87, 0x25, 0x42, 0xae, 0x84, 0x71, 0xfb, 0x4d, 0x2c, 0x70,
	0x66, 0x6c, 0xe2, 0xb9, 0x9f, 0x5c, 0x7a, 0xff, 0xe9, 0x8c, 0xea, 0x7f, 0xef, 0x4c, 0xe6, 0xba,
	0xf5, 0x71, 0xae, 0xc3, 0x34, 0x85, 0xc7, 0x8d, 0x34, 0x8b, 0xf1, 0xbd, 0x71, 0xe2, 0xb4, 0xf2,
	0x9b, 0x0e, 0xde, 0x53, 0x33, 0x79, 0xc0, 0xd3, 0x3e, 0x8d, 0xf8, 0xf8, 0x60, 0xa3, 0xeb, 0x2d,
	0xd4, 0x27, 0x14, 0x34, 0xc8, 0xd2, 0x34, 0x65, 0xb1, 0x8c, 0x86, 0x94, 0xbd, 0xc5, 0x82, 0x4c,
	0xbf, 0x76, 0xab, 0xb8, 0xc0, 0x75, 0x66, 0xc4, 0xb9, 0x59, 0x5b, 0x67, 0xac, 0x4c, 0x30, 0x7a,
	0x60, 0x0e, 0x32, 0x07, 0x7e, 0x8c, 0x21, 0xa3, 0x8f, 0x21, 0x64, 0x42, 0x0c, 0xe8, 0x00, 0x39,
	0xac, 0x72, 0x1e, 0xab, 0xbb, 0x9a, 0xba, 0xb4, 0x3f, 0xe3, 0x9e, 0xc6, 0xe0, 0x87, 0xbd, 0x1b,
	0xf7, 0x61, 0xf6, 0x07, 0xee, 0xfb, 0x0e, 0x39, 0x75, 0x95, 0xc9, 0x5d, 0x70, 0xe4, 0xc3, 0x30,
	0x70, 0x7a, 0xf2, 0xeb, 0x24, 0xe1, 0xfd, 0xdc, 0xa8, 0xfe, 0x15, 0x0b, 0x06, 0x1b, 0xb0, 0x3c,
	0x7a, 0x14, 0xf2, 0x7a, 0x14, 0xa1, 0xbe, 0x4a, 0x5d, 0xa9, 0x56, 0x30, 0x25, 0x14, 0xde, 0x0c,
	0x28, 0x2f, 0x56, 0xdd, 0x35, 0x90, 0x4b, 0x33, 0x5c, 0xb0, 0x71, 0x70, 0xf9, 0xde, 0xa8, 0x7e,
	0xd7, 0xad, 0x93, 0x33, 0xf8, 0x59, 0x0d, 0x55, 0xdf, 0xd5, 0xd0, 0x26, 0x4b, 0xf7, 0x59, 0xea,
	0x3d, 0x47, 0x56, 0xef, 0x32, 0x21, 0x42, 0x2a, 0x7a, 0x7e, 0xdc, 0xaf, 0x9e, 0xc5, 0x06, 0xfe,
	0x7f, 0x05, 0x4f, 0x6b, 0x2f, 0xbd, 0x54, 0x0b, 0xf8, 0xe0, 0xe2, 0xc2, 0x4b, 0xb5, 0x17, 0xd7,
	0x9d, 0xd2, 0xc5, 0x8a, 0x0f, 0x89, 0x5d, 0x79, 0x66, 0xe3, 0xae, 0xe0, 0xf1, 0xa5, 0x29, 0xca,
	0xcf, 0x96, 0x92, 0x56, 0x6b, 0x19, 0xb5, 0xfe, 0xe2, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xc9,
	0x83, 0xe1, 0x36, 0x19, 0x32, 0x00, 0x00,
}
