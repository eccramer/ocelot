// Code generated by protoc-gen-go. DO NOT EDIT.
// source: werker.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WerkerType int32

const (
	WerkerType_NIL_WT        WerkerType = 0
	WerkerType_KUBERNETES_WT WerkerType = 1
	WerkerType_DOCKER_WT     WerkerType = 2
)

var WerkerType_name = map[int32]string{
	0: "NIL_WT",
	1: "KUBERNETES_WT",
	2: "DOCKER_WT",
}
var WerkerType_value = map[string]int32{
	"NIL_WT":        0,
	"KUBERNETES_WT": 1,
	"DOCKER_WT":     2,
}

func (x WerkerType) String() string {
	return proto.EnumName(WerkerType_name, int32(x))
}
func (WerkerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type WerkerFacts struct {
	Uuid               []byte     `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	WerkType           WerkerType `protobuf:"varint,2,opt,name=werkType,enum=models.WerkerType" json:"werkType,omitempty"`
	LoopbackIp         string     `protobuf:"bytes,3,opt,name=LoopbackIp" json:"LoopbackIp,omitempty"`
	ServicePort        string     `protobuf:"bytes,4,opt,name=ServicePort" json:"ServicePort,omitempty"`
	GrpcPort           string     `protobuf:"bytes,5,opt,name=GrpcPort" json:"GrpcPort,omitempty"`
	ConsulRegisteredIp string     `protobuf:"bytes,6,opt,name=consulRegisteredIp" json:"consulRegisteredIp,omitempty"`
}

func (m *WerkerFacts) Reset()                    { *m = WerkerFacts{} }
func (m *WerkerFacts) String() string            { return proto.CompactTextString(m) }
func (*WerkerFacts) ProtoMessage()               {}
func (*WerkerFacts) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *WerkerFacts) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *WerkerFacts) GetWerkType() WerkerType {
	if m != nil {
		return m.WerkType
	}
	return WerkerType_NIL_WT
}

func (m *WerkerFacts) GetLoopbackIp() string {
	if m != nil {
		return m.LoopbackIp
	}
	return ""
}

func (m *WerkerFacts) GetServicePort() string {
	if m != nil {
		return m.ServicePort
	}
	return ""
}

func (m *WerkerFacts) GetGrpcPort() string {
	if m != nil {
		return m.GrpcPort
	}
	return ""
}

func (m *WerkerFacts) GetConsulRegisteredIp() string {
	if m != nil {
		return m.ConsulRegisteredIp
	}
	return ""
}

func init() {
	proto.RegisterType((*WerkerFacts)(nil), "models.WerkerFacts")
	proto.RegisterEnum("models.WerkerType", WerkerType_name, WerkerType_value)
}

func init() { proto.RegisterFile("werker.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0x4d, 0xad, 0x65, 0x7b, 0xdb, 0x44, 0xdf, 0x29, 0x78, 0x90, 0xe2, 0xa9, 0x78, 0xc8,
	0x41, 0x6f, 0x1e, 0xa7, 0x55, 0xca, 0xc6, 0x94, 0xac, 0x32, 0xf0, 0x22, 0x6b, 0xfa, 0x90, 0xb2,
	0x69, 0x42, 0x9a, 0x2a, 0xfe, 0xb5, 0xfe, 0x2b, 0x92, 0x0c, 0x66, 0x0f, 0xde, 0xf2, 0x7d, 0xbf,
	0xef, 0x07, 0xe1, 0xc1, 0xf8, 0x8b, 0xec, 0x86, 0xac, 0x30, 0x56, 0x3b, 0x8d, 0xc9, 0xbb, 0xae,
	0x69, 0xdb, 0x5e, 0xfc, 0x30, 0x18, 0xad, 0x02, 0xb8, 0x5f, 0x2b, 0xd7, 0x22, 0x42, 0xdc, 0x75,
	0x4d, 0xcd, 0x59, 0xca, 0xb2, 0xb1, 0x0c, 0x6f, 0x14, 0x30, 0xf0, 0x6e, 0xf9, 0x6d, 0x88, 0x47,
	0x29, 0xcb, 0x8e, 0xaf, 0x50, 0xec, 0x74, 0xb1, 0x53, 0x3d, 0x91, 0xfb, 0x0d, 0x9e, 0x03, 0xcc,
	0xb5, 0x36, 0xd5, 0x5a, 0x6d, 0x0a, 0xc3, 0x0f, 0x53, 0x96, 0x0d, 0x65, 0xaf, 0xc1, 0x14, 0x46,
	0x4b, 0xb2, 0x9f, 0x8d, 0xa2, 0x27, 0x6d, 0x1d, 0x8f, 0xc3, 0xa0, 0x5f, 0xe1, 0x19, 0x0c, 0x1e,
	0xac, 0x51, 0x01, 0x1f, 0x05, 0xbc, 0xcf, 0x28, 0x00, 0x95, 0xfe, 0x68, 0xbb, 0xad, 0xa4, 0xb7,
	0xa6, 0x75, 0x64, 0xa9, 0x2e, 0x0c, 0x4f, 0xc2, 0xea, 0x1f, 0x72, 0x79, 0x03, 0xf0, 0xf7, 0x4b,
	0x04, 0x48, 0x16, 0xc5, 0xfc, 0x75, 0x55, 0x9e, 0x1c, 0xe0, 0x29, 0x4c, 0x66, 0xcf, 0xd3, 0x5c,
	0x2e, 0xf2, 0x32, 0x5f, 0xfa, 0x8a, 0xe1, 0x04, 0x86, 0x77, 0x8f, 0xb7, 0xb3, 0x5c, 0xfa, 0x18,
	0x4d, 0xe3, 0x97, 0xc8, 0x54, 0x55, 0x12, 0x4e, 0x76, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x0b,
	0x25, 0x3a, 0x88, 0x42, 0x01, 0x00, 0x00,
}
