// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: guideocelot.proto

package pb

import go_proto_validators "github.com/mwitkow/go-proto-validators"
import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "github.com/mwitkow/go-proto-validators"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *BuildReq) Validate() error {
	return nil
}
func (this *AllCredsWrapper) Validate() error {
	if this.RepoCreds != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.RepoCreds); err != nil {
			return go_proto_validators.FieldError("RepoCreds", err)
		}
	}
	if this.VcsCreds != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.VcsCreds); err != nil {
			return go_proto_validators.FieldError("VcsCreds", err)
		}
	}
	return nil
}
func (this *CredWrapper) Validate() error {
	for _, item := range this.Vcs {
		if item != nil {
			if err := go_proto_validators.CallValidatorIfExists(item); err != nil {
				return go_proto_validators.FieldError("Vcs", err)
			}
		}
	}
	return nil
}
func (this *SSHKeyWrapper) Validate() error {
	return nil
}
func (this *SSHWrap) Validate() error {
	for _, item := range this.Keys {
		if item != nil {
			if err := go_proto_validators.CallValidatorIfExists(item); err != nil {
				return go_proto_validators.FieldError("Keys", err)
			}
		}
	}
	return nil
}
func (this *VCSCreds) Validate() error {
	return nil
}
func (this *RepoCredWrapper) Validate() error {
	for _, item := range this.Repo {
		if item != nil {
			if err := go_proto_validators.CallValidatorIfExists(item); err != nil {
				return go_proto_validators.FieldError("Repo", err)
			}
		}
	}
	return nil
}
func (this *RepoCreds) Validate() error {
	return nil
}
func (this *K8SCreds) Validate() error {
	return nil
}
func (this *K8SCredsWrapper) Validate() error {
	for _, item := range this.K8SCreds {
		if item != nil {
			if err := go_proto_validators.CallValidatorIfExists(item); err != nil {
				return go_proto_validators.FieldError("K8SCreds", err)
			}
		}
	}
	return nil
}
func (this *StatusQuery) Validate() error {
	return nil
}
func (this *BuildQuery) Validate() error {
	return nil
}
func (this *Builds) Validate() error {
	// Validation of proto3 map<> fields is unsupported.
	return nil
}
func (this *BuildRuntimeInfo) Validate() error {
	return nil
}
func (this *LineResponse) Validate() error {
	return nil
}
func (this *RepoAccount) Validate() error {
	return nil
}
func (this *Status) Validate() error {
	if this.BuildSum != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.BuildSum); err != nil {
			return go_proto_validators.FieldError("BuildSum", err)
		}
	}
	for _, item := range this.Stages {
		if item != nil {
			if err := go_proto_validators.CallValidatorIfExists(item); err != nil {
				return go_proto_validators.FieldError("Stages", err)
			}
		}
	}
	return nil
}
func (this *StageStatus) Validate() error {
	if this.StartTime != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.StartTime); err != nil {
			return go_proto_validators.FieldError("StartTime", err)
		}
	}
	return nil
}
func (this *BuildSummary) Validate() error {
	if this.BuildTime != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.BuildTime); err != nil {
			return go_proto_validators.FieldError("BuildTime", err)
		}
	}
	if this.QueueTime != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.QueueTime); err != nil {
			return go_proto_validators.FieldError("QueueTime", err)
		}
	}
	return nil
}
func (this *Summaries) Validate() error {
	for _, item := range this.Sums {
		if item != nil {
			if err := go_proto_validators.CallValidatorIfExists(item); err != nil {
				return go_proto_validators.FieldError("Sums", err)
			}
		}
	}
	return nil
}
func (this *PollRequest) Validate() error {
	if this.LastCronTime != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.LastCronTime); err != nil {
			return go_proto_validators.FieldError("LastCronTime", err)
		}
	}
	// Validation of proto3 map<> fields is unsupported.
	return nil
}
func (this *Polls) Validate() error {
	for _, item := range this.Polls {
		if item != nil {
			if err := go_proto_validators.CallValidatorIfExists(item); err != nil {
				return go_proto_validators.FieldError("Polls", err)
			}
		}
	}
	return nil
}
func (this *Exists) Validate() error {
	return nil
}
