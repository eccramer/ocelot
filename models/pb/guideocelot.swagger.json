{
  "swagger": "2.0",
  "info": {
    "title": "Guide Ocelot Server",
    "version": "1.0",
    "contact": {
      "name": "jessi shank",
      "email": "jessishank@level11.com"
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/acctRepos": {
      "get": {
        "summary": "get list of currently tracked account/repos",
        "operationId": "GetTrackedRepos",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/modelsAcctRepos"
            }
          }
        },
        "tags": [
          "GuideOcelot"
        ]
      }
    },
    "/v1/build": {
      "post": {
        "description": "build will attempt to trigger a build. If the git hash has already been built before, it can be triggered with just acctRepo and hash fields. If it has not been built before, the branch flag is required as well.",
        "operationId": "BuildRepoAndHash",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "$ref": "#/definitions/modelsLineResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsBuildReq"
            }
          }
        ],
        "tags": [
          "GuideOcelot"
        ]
      }
    },
    "/v1/buildruntime": {
      "get": {
        "summary": "get runtime specification of a specific build",
        "description": "get stream of logs for a specific build. can either query by buildId or hash, if buildId is specified it takes precendence over hash. if hash is specified and there are multiple builds with the same hash, it iwll stream the latest one. \nRefer to modelsBuildQuery for object fields",
        "operationId": "BuildRuntime",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/modelsBuilds"
            }
          }
        },
        "parameters": [
          {
            "name": "hash",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "GuideOcelot"
        ]
      }
    },
    "/v1/creds/k8s": {
      "get": {
        "summary": "Retrieve all kubernetes related credentials",
        "operationId": "GetK8SCreds",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/modelsK8SCredsWrapper"
            }
          }
        },
        "tags": [
          "GuideOcelot"
        ]
      },
      "post": {
        "summary": "Add new Kubernetes Credential",
        "description": "Add New kubernetes credential. \nRefer to modelsK8SCreds for the object fields",
        "operationId": "SetK8SCreds",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsK8SCreds"
            }
          }
        ],
        "tags": [
          "GuideOcelot"
        ]
      }
    },
    "/v1/creds/k8s/{acctName}/{identifier}": {
      "get": {
        "summary": "Get Kubernetes credential",
        "description": "Returns k8s cred if it exists. subtype is a required query param",
        "operationId": "GetK8SCred",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/modelsK8SCreds"
            }
          }
        },
        "parameters": [
          {
            "name": "acctName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "k8sContents",
            "description": "k8scontents is the contents of the kubeconfig file.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "subType",
            "description": "there is currently only one subtype for k8SCreds, and it is KUBECONF\n@inject_tag: yaml:\"subType\".\n\n - BITBUCKET: BITBUCKET is a child of VCS\n - GITHUB: GITHUB is a child of VCS\n - NEXUS: NEXUS is a child of REPO\n - MAVEN: MAVEN is a child of REPO\n - DOCKER: DOCKER is a child of REPO\n - KUBECONF: KUBECONF is a child of K8S\n - SSHKEY: SSHKEY is a child of SSH",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NIL_SCT",
              "BITBUCKET",
              "GITHUB",
              "NEXUS",
              "MAVEN",
              "DOCKER",
              "KUBECONF",
              "SSHKEY"
            ],
            "default": "NIL_SCT"
          }
        ],
        "tags": [
          "GuideOcelot"
        ]
      },
      "put": {
        "summary": "Update a kubeconfig in ocelot for kubernetes integration. \nRefer to modelsK8SCreds for the object fields",
        "operationId": "UpdateK8SCreds",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "acctName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsK8SCreds"
            }
          }
        ],
        "tags": [
          "GuideOcelot"
        ]
      }
    },
    "/v1/creds/repo": {
      "get": {
        "summary": "Get all known repo integration credentials.",
        "description": "Get all known repo integration credentials.",
        "operationId": "GetRepoCreds",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/modelsRepoCredWrapper"
            }
          }
        },
        "tags": [
          "GuideOcelot"
        ]
      },
      "post": {
        "summary": "Add new Repo cred",
        "description": "Add new repo credential. password, repoUrl, acctName, username and type are required. type must be nexus|docker. \nRefer to modelsRepoCreds for the object fields",
        "operationId": "SetRepoCreds",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsRepoCreds"
            }
          }
        ],
        "tags": [
          "GuideOcelot"
        ]
      }
    },
    "/v1/creds/repo/{acctName}/{identifier}": {
      "get": {
        "summary": "return single repo cred",
        "description": "Returns repo cred if it exists. subType is a required query param",
        "operationId": "GetRepoCred",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/modelsRepoCreds"
            }
          }
        },
        "parameters": [
          {
            "name": "acctName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "description": "username of repository.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "description": "password of repository.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoUrl",
            "description": "@inject_tag: yaml:\"repoUrl\".",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "subType",
            "description": "there are two subtypes that are valid for RepoCreds: DOCKER, NEXUS\n@inject_tag: yaml:\"subType\".\n\n - BITBUCKET: BITBUCKET is a child of VCS\n - GITHUB: GITHUB is a child of VCS\n - NEXUS: NEXUS is a child of REPO\n - MAVEN: MAVEN is a child of REPO\n - DOCKER: DOCKER is a child of REPO\n - KUBECONF: KUBECONF is a child of K8S\n - SSHKEY: SSHKEY is a child of SSH",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NIL_SCT",
              "BITBUCKET",
              "GITHUB",
              "NEXUS",
              "MAVEN",
              "DOCKER",
              "KUBECONF",
              "SSHKEY"
            ],
            "default": "NIL_SCT"
          }
        ],
        "tags": [
          "GuideOcelot"
        ]
      },
      "put": {
        "summary": "Update repo cred",
        "description": "Update new credential configuration to ocelot for repository integration. \nRefer to modelsRepoCreds for the object fields",
        "operationId": "UpdateRepoCreds",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "acctName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsRepoCreds"
            }
          }
        ],
        "tags": [
          "GuideOcelot"
        ]
      }
    },
    "/v1/creds/ssh": {
      "get": {
        "summary": "Get all known SSH integration credentials.",
        "operationId": "GetSSHCreds",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/modelsSSHWrap"
            }
          }
        },
        "tags": [
          "GuideOcelot"
        ]
      },
      "post": {
        "summary": "Attach new SSH key to account",
        "description": "Add a new ssh key to an account so builds can access them at runtime. \nRefer to modelsSSHKeyWrapper for the object fields",
        "operationId": "SetSSHCreds",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsSSHKeyWrapper"
            }
          }
        ],
        "tags": [
          "GuideOcelot"
        ]
      }
    },
    "/v1/creds/ssh/{acctName}/{identifier}": {
      "get": {
        "summary": "Get ssh key",
        "description": "Returns ssh cred if it exists. subtype is a required query param",
        "operationId": "GetSSHCred",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/modelsSSHKeyWrapper"
            }
          }
        },
        "parameters": [
          {
            "name": "acctName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "privateKey",
            "description": "the contents of the private key.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "subType",
            "description": "There is only one subType taht is valid for SSHKeyWrapper, and it is SSHKEY.\n\n - BITBUCKET: BITBUCKET is a child of VCS\n - GITHUB: GITHUB is a child of VCS\n - NEXUS: NEXUS is a child of REPO\n - MAVEN: MAVEN is a child of REPO\n - DOCKER: DOCKER is a child of REPO\n - KUBECONF: KUBECONF is a child of K8S\n - SSHKEY: SSHKEY is a child of SSH",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NIL_SCT",
              "BITBUCKET",
              "GITHUB",
              "NEXUS",
              "MAVEN",
              "DOCKER",
              "KUBECONF",
              "SSHKEY"
            ],
            "default": "NIL_SCT"
          }
        ],
        "tags": [
          "GuideOcelot"
        ]
      },
      "put": {
        "summary": "Update ssh key",
        "description": "Update a ssh key for use in build scripts. \nRefer to modelsSSHKeyWrapper for the object fields",
        "operationId": "UpdateSSHCreds",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "acctName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsSSHKeyWrapper"
            }
          }
        ],
        "tags": [
          "GuideOcelot"
        ]
      }
    },
    "/v1/creds/vcs": {
      "get": {
        "summary": "Return all vcs creds",
        "description": "Returns all VCS creds that ocelot has and can use for checking out code to build.",
        "operationId": "GetVCSCreds",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/modelsCredWrapper"
            }
          }
        },
        "tags": [
          "GuideOcelot"
        ]
      },
      "post": {
        "summary": "Add VCS Credential",
        "description": "Add a new VCS credential configuration to ocelot for code checkout. \nRefer to modelsVCSCreds for the object fields",
        "operationId": "SetVCSCreds",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsVCSCreds"
            }
          }
        ],
        "tags": [
          "GuideOcelot"
        ]
      }
    },
    "/v1/creds/vcs/{acctName}/{identifier}": {
      "get": {
        "summary": "Retrieve single VCS cred",
        "description": "Returns vcs cred if it exists. subtype is a required query param. \nRefer to modelsVCSCreds for the object fields",
        "operationId": "GetVCSCred",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/modelsVCSCreds"
            }
          }
        },
        "parameters": [
          {
            "name": "acctName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientId",
            "description": "clientId is generated by creating an oAuth consumer in bitbucket. it is required to generate tokens.\n@inject_tag: yaml:\"clientId\".",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "clientSecret",
            "description": "clientSecret is generated by creating an oAuth consumer in bitbucket. it is required to generate tokens.\n@inject_tag: yaml:\"clientSecret\".",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tokenURL",
            "description": "tokenUrl is the url at which to retrieve the token\n@inject_tag: yaml:\"tokenURL\".",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sshFileLoc",
            "description": "just a string that says whether or not there is an ssh key on file\n@inject_tag: yaml:\"sshFileLoc\".",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "subType",
            "description": "there is only one subtype that is valid for VCS creds at this time, and it is BITBUCKET\n@inject_tag: yaml:\"subType\".\n\n - BITBUCKET: BITBUCKET is a child of VCS\n - GITHUB: GITHUB is a child of VCS\n - NEXUS: NEXUS is a child of REPO\n - MAVEN: MAVEN is a child of REPO\n - DOCKER: DOCKER is a child of REPO\n - KUBECONF: KUBECONF is a child of K8S\n - SSHKEY: SSHKEY is a child of SSH",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NIL_SCT",
              "BITBUCKET",
              "GITHUB",
              "NEXUS",
              "MAVEN",
              "DOCKER",
              "KUBECONF",
              "SSHKEY"
            ],
            "default": "NIL_SCT"
          }
        ],
        "tags": [
          "GuideOcelot"
        ]
      },
      "put": {
        "summary": "Update a VCS Credential",
        "description": "Endpoint for updating a VCS credential in ocelot. This should only be called if hte credential exists. subType is a required query param \nRefer to modelsVCSCreds for the object fields",
        "operationId": "UpdateVCSCreds",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "acctName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsVCSCreds"
            }
          }
        ],
        "tags": [
          "GuideOcelot"
        ]
      }
    },
    "/v1/creds/vcs/{acctName}/{identifier}/ssh": {
      "post": {
        "summary": "Attach ssh key to VCS Account",
        "description": "Attach the contents of an ssh file to a vcs account. This file will be attached to the build container for cloning the repository. subType is a required query param \nRefer to modelsSSHKeyWrapper for the object fields",
        "operationId": "SetVCSPrivateKey",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "acctName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsSSHKeyWrapper"
            }
          }
        ],
        "tags": [
          "GuideOcelot"
        ]
      }
    },
    "/v1/logs": {
      "get": {
        "description": "get stream of logs for a specific build. can either query by buildId or hash, if buildId is specified it takes precendence over hash. if hash is specified and there are multiple builds with the same hash, it iwll stream the latest one. \nRefer to modelsBuildQuery for object fields",
        "operationId": "Logs",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "$ref": "#/definitions/modelsLineResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "hash",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "GuideOcelot"
        ]
      }
    },
    "/v1/poll": {
      "get": {
        "description": "list all repositories that are being polled for changes",
        "operationId": "ListPolledRepos",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/modelsPolls"
            }
          }
        },
        "tags": [
          "GuideOcelot"
        ]
      },
      "post": {
        "description": "poll will set up a polling request. account, repo, cron, and branches are all required fields.",
        "operationId": "PollRepo",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsPollRequest"
            }
          }
        ],
        "tags": [
          "GuideOcelot"
        ]
      }
    },
    "/v1/poll/{account}/{repo}": {
      "delete": {
        "description": "delete polling for a repo. account and repo are required.",
        "operationId": "DeletePollRepo",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GuideOcelot"
        ]
      }
    },
    "/v1/status": {
      "get": {
        "description": "GetStatus will return the status of a specific build. Hierarchy for key to lookup with: if hash supplied, will only search by hash. If acctName and repoName are supplied and not hash, \nit will be used as a key for looking up status. If only partialRepo is given in the request, ocelot will attempt to find a match and return the latest build stage details for that.",
        "operationId": "GetStatus",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/modelsStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "hash",
            "description": "hash is the git hash to get status of.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "acctName",
            "description": "acctName is the corresponding account that the hash is attached to.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoName",
            "description": "repoName is the corresponding repo name that the hash is attached to.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "partialRepo",
            "description": "partialRepo is just the first n letters of repo.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "GuideOcelot"
        ]
      }
    },
    "/v1/summary/{account}/{repo}": {
      "get": {
        "description": "will return summaries of the builds for the corresponding repo/account. limit will set how many entries will be returned",
        "operationId": "LastFewSummaries",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/modelsSummaries"
            }
          }
        },
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "GuideOcelot"
        ]
      }
    },
    "/v1/watch": {
      "post": {
        "description": "watch will set up a webhook for the given repo/account. all fields required.",
        "operationId": "WatchRepo",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsRepoAccount"
            }
          }
        ],
        "tags": [
          "GuideOcelot"
        ]
      }
    },
    "/v1/werker/{hash}": {
      "get": {
        "description": "get network location of werker that is currrently executing a build on the specifed hash",
        "operationId": "FindWerker",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/modelsBuildRuntimeInfo"
            }
          }
        },
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "acctRepo",
            "description": "acctRepo is the ocelot account to which the creds are uploaded and the repository you wish to operate on, in the form account/repo.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "branch",
            "description": "branch is the branch that corresponds to the git hash. if the git hash has never been built by ocelot, this field is required.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "GuideOcelot"
        ]
      }
    }
  },
  "definitions": {
    "modelsAcctRepo": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string"
        },
        "repo": {
          "type": "string"
        }
      }
    },
    "modelsAcctRepos": {
      "type": "object",
      "properties": {
        "acctRepos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelsAcctRepo"
          }
        }
      }
    },
    "modelsAllCredsWrapper": {
      "type": "object",
      "properties": {
        "repoCreds": {
          "$ref": "#/definitions/modelsRepoCredWrapper",
          "title": "All repository credentials for integrations\n@inject_tag: yaml:\"repoCreds\""
        },
        "vcsCreds": {
          "$ref": "#/definitions/modelsCredWrapper",
          "title": "All VCS credentials for building\n@inject_tag: yaml:\"vcsCreds\""
        }
      }
    },
    "modelsBuildReq": {
      "type": "object",
      "properties": {
        "acctRepo": {
          "type": "string",
          "title": "acctRepo is the ocelot account to which the creds are uploaded and the repository you wish to operate on, in the form account/repo"
        },
        "hash": {
          "type": "string",
          "description": "hash is the git hash to trigger."
        },
        "branch": {
          "type": "string",
          "description": "branch is the branch that corresponds to the git hash. if the git hash has never been built by ocelot, this field is required."
        }
      }
    },
    "modelsBuildRuntimeInfo": {
      "type": "object",
      "properties": {
        "done": {
          "type": "boolean",
          "format": "boolean",
          "title": "done says whether or not the build has completed"
        },
        "ip": {
          "type": "string",
          "title": "ip is the ip of the werker node that is running the build"
        },
        "grpcPort": {
          "type": "string",
          "title": "grpcPort is the grpc port of the werker running the build"
        },
        "hash": {
          "type": "string",
          "title": "hash is the hash"
        },
        "acctName": {
          "type": "string"
        },
        "repoName": {
          "type": "string"
        },
        "wsPort": {
          "type": "string"
        }
      }
    },
    "modelsBuildSummary": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string"
        },
        "failed": {
          "type": "boolean",
          "format": "boolean"
        },
        "buildTime": {
          "type": "string",
          "format": "date-time"
        },
        "account": {
          "type": "string"
        },
        "buildDuration": {
          "type": "number",
          "format": "double"
        },
        "repo": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "buildId": {
          "type": "string",
          "format": "int64"
        },
        "queueTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "modelsBuilds": {
      "type": "object",
      "properties": {
        "builds": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/modelsBuildRuntimeInfo"
          }
        }
      }
    },
    "modelsCredWrapper": {
      "type": "object",
      "properties": {
        "vcs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelsVCSCreds"
          }
        }
      },
      "title": "just a container for a list of VCSCreds"
    },
    "modelsExists": {
      "type": "object",
      "properties": {
        "exists": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "modelsK8SCreds": {
      "type": "object",
      "properties": {
        "acctName": {
          "type": "string",
          "title": "account name to associate this credential with"
        },
        "k8sContents": {
          "type": "string",
          "title": "k8scontents is the contents of the kubeconfig file"
        },
        "identifier": {
          "type": "string",
          "title": "identifier in K8s creds is currently irrelevant, as there can only be one per account"
        },
        "subType": {
          "$ref": "#/definitions/modelsSubCredType",
          "title": "there is currently only one subtype for k8SCreds, and it is KUBECONF\n@inject_tag: yaml:\"subType\""
        }
      }
    },
    "modelsK8SCredsWrapper": {
      "type": "object",
      "properties": {
        "K8SCreds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelsK8SCreds"
          }
        }
      }
    },
    "modelsLineResponse": {
      "type": "object",
      "properties": {
        "outputLine": {
          "type": "string"
        }
      }
    },
    "modelsPollRequest": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string"
        },
        "repo": {
          "type": "string"
        },
        "cron": {
          "type": "string"
        },
        "branches": {
          "type": "string"
        },
        "lastCronTime": {
          "type": "string",
          "format": "date-time"
        },
        "lastHashes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "modelsPolls": {
      "type": "object",
      "properties": {
        "polls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelsPollRequest"
          }
        }
      }
    },
    "modelsRepoAccount": {
      "type": "object",
      "properties": {
        "repo": {
          "type": "string"
        },
        "account": {
          "type": "string"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "modelsRepoCredWrapper": {
      "type": "object",
      "properties": {
        "repo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelsRepoCreds"
          }
        }
      },
      "title": "container for list of repo creds"
    },
    "modelsRepoCreds": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "title": "username of repository"
        },
        "password": {
          "type": "string",
          "title": "password of repository"
        },
        "repoUrl": {
          "type": "string",
          "title": "@inject_tag: yaml:\"repoUrl\""
        },
        "identifier": {
          "type": "string"
        },
        "acctName": {
          "type": "string",
          "title": "@inject_tag: yaml:\"acctName\"\naccount name (same as from vcs)"
        },
        "subType": {
          "$ref": "#/definitions/modelsSubCredType",
          "title": "there are two subtypes that are valid for RepoCreds: DOCKER, NEXUS\n@inject_tag: yaml:\"subType\""
        }
      }
    },
    "modelsSSHKeyWrapper": {
      "type": "object",
      "properties": {
        "acctName": {
          "type": "string",
          "title": "account name to associate ssh key with"
        },
        "privateKey": {
          "type": "string",
          "format": "byte",
          "title": "the contents of the private key"
        },
        "subType": {
          "$ref": "#/definitions/modelsSubCredType",
          "title": "There is only one subType taht is valid for SSHKeyWrapper, and it is SSHKEY"
        },
        "identifier": {
          "type": "string",
          "description": "identifier is the unique identifier for when an ssh key is not associated with a VCS account."
        }
      }
    },
    "modelsSSHWrap": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelsSSHKeyWrapper"
          }
        }
      }
    },
    "modelsStageStatus": {
      "type": "object",
      "properties": {
        "StageStatus": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "stageDuration": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "modelsStatus": {
      "type": "object",
      "properties": {
        "buildSum": {
          "$ref": "#/definitions/modelsBuildSummary"
        },
        "stages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelsStageStatus"
          }
        },
        "isInConsul": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "modelsSubCredType": {
      "type": "string",
      "enum": [
        "NIL_SCT",
        "BITBUCKET",
        "GITHUB",
        "NEXUS",
        "MAVEN",
        "DOCKER",
        "KUBECONF",
        "SSHKEY"
      ],
      "default": "NIL_SCT",
      "title": "- BITBUCKET: BITBUCKET is a child of VCS\n - GITHUB: GITHUB is a child of VCS\n - NEXUS: NEXUS is a child of REPO\n - MAVEN: MAVEN is a child of REPO\n - DOCKER: DOCKER is a child of REPO\n - KUBECONF: KUBECONF is a child of K8S\n - SSHKEY: SSHKEY is a child of SSH"
    },
    "modelsSummaries": {
      "type": "object",
      "properties": {
        "sums": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelsBuildSummary"
          }
        }
      }
    },
    "modelsVCSCreds": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "title": "clientId is generated by creating an oAuth consumer in bitbucket. it is required to generate tokens.\n@inject_tag: yaml:\"clientId\""
        },
        "clientSecret": {
          "type": "string",
          "title": "clientSecret is generated by creating an oAuth consumer in bitbucket. it is required to generate tokens.\n@inject_tag: yaml:\"clientSecret\""
        },
        "identifier": {
          "type": "string",
          "title": "identifier is the name the user calls teh credential set"
        },
        "tokenURL": {
          "type": "string",
          "title": "tokenUrl is the url at which to retrieve the token\n@inject_tag: yaml:\"tokenURL\""
        },
        "acctName": {
          "type": "string",
          "title": "@inject_tag: yaml:\"acctName\"\nacctName is the account to associate the VCSCred with. Must be the account name of the owner of the repository they wish to track (ie level11consulting)"
        },
        "sshFileLoc": {
          "type": "string",
          "title": "just a string that says whether or not there is an ssh key on file\n@inject_tag: yaml:\"sshFileLoc\""
        },
        "subType": {
          "$ref": "#/definitions/modelsSubCredType",
          "title": "there is only one subtype that is valid for VCS creds at this time, and it is BITBUCKET\n@inject_tag: yaml:\"subType\""
        }
      }
    },
    "protobufEmpty": {
      "type": "object",
      "description": "service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "title": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:"
    }
  }
}
