// Code generated by protoc-gen-go. DO NOT EDIT.
// source: build.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	build.proto
	creds.proto
	guideocelot.proto
	werkerserver.proto

It has these top-level messages:
	BuildConfig
	Stage
	Result
	Triggers
	WerkerTask
	AllCredsWrapper
	CredWrapper
	SSHKeyWrapper
	SSHWrap
	VCSCreds
	RepoCredWrapper
	RepoCreds
	K8SCreds
	K8SCredsWrapper
	AppleCreds
	AppleCredsWrapper
	BuildReq
	StatusQuery
	BuildQuery
	Builds
	BuildRuntimeInfo
	LineResponse
	RepoAccount
	Status
	StageStatus
	BuildSummary
	Summaries
	PollRequest
	Polls
	Exists
	AcctRepo
	AcctRepos
	Request
	Response
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StageResultVal int32

const (
	StageResultVal_PASS StageResultVal = 0
	StageResultVal_FAIL StageResultVal = 1
)

var StageResultVal_name = map[int32]string{
	0: "PASS",
	1: "FAIL",
}
var StageResultVal_value = map[string]int32{
	"PASS": 0,
	"FAIL": 1,
}

func (x StageResultVal) String() string {
	return proto.EnumName(StageResultVal_name, int32(x))
}
func (StageResultVal) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// this is a direct translation of the ocelot.yaml file
type BuildConfig struct {
	Image string `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	// @inject_tag: yaml:"buildTool"
	BuildTool string   `protobuf:"bytes,2,opt,name=buildTool" json:"buildTool,omitempty" yaml:"buildTool"`
	Packages  []string `protobuf:"bytes,3,rep,name=packages" json:"packages,omitempty"`
	Branches  []string `protobuf:"bytes,4,rep,name=branches" json:"branches,omitempty"`
	Env       []string `protobuf:"bytes,5,rep,name=env" json:"env,omitempty"`
	Stages    []*Stage `protobuf:"bytes,7,rep,name=stages" json:"stages,omitempty"`
}

func (m *BuildConfig) Reset()                    { *m = BuildConfig{} }
func (m *BuildConfig) String() string            { return proto.CompactTextString(m) }
func (*BuildConfig) ProtoMessage()               {}
func (*BuildConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BuildConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *BuildConfig) GetBuildTool() string {
	if m != nil {
		return m.BuildTool
	}
	return ""
}

func (m *BuildConfig) GetPackages() []string {
	if m != nil {
		return m.Packages
	}
	return nil
}

func (m *BuildConfig) GetBranches() []string {
	if m != nil {
		return m.Branches
	}
	return nil
}

func (m *BuildConfig) GetEnv() []string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *BuildConfig) GetStages() []*Stage {
	if m != nil {
		return m.Stages
	}
	return nil
}

type Stage struct {
	Env    []string `protobuf:"bytes,1,rep,name=env" json:"env,omitempty"`
	Script []string `protobuf:"bytes,2,rep,name=script" json:"script,omitempty"`
	Name   string   `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// @inject_tag: yaml:"trigger"
	Trigger *Triggers `protobuf:"bytes,4,opt,name=trigger" json:"trigger,omitempty" yaml:"trigger"`
}

func (m *Stage) Reset()                    { *m = Stage{} }
func (m *Stage) String() string            { return proto.CompactTextString(m) }
func (*Stage) ProtoMessage()               {}
func (*Stage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Stage) GetEnv() []string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *Stage) GetScript() []string {
	if m != nil {
		return m.Script
	}
	return nil
}

func (m *Stage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Stage) GetTrigger() *Triggers {
	if m != nil {
		return m.Trigger
	}
	return nil
}

type Result struct {
	Stage    string         `protobuf:"bytes,1,opt,name=stage" json:"stage,omitempty"`
	Status   StageResultVal `protobuf:"varint,2,opt,name=status,enum=models.StageResultVal" json:"status,omitempty"`
	Error    string         `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	Messages []string       `protobuf:"bytes,4,rep,name=messages" json:"messages,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Result) GetStage() string {
	if m != nil {
		return m.Stage
	}
	return ""
}

func (m *Result) GetStatus() StageResultVal {
	if m != nil {
		return m.Status
	}
	return StageResultVal_PASS
}

func (m *Result) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Result) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

type Triggers struct {
	Branches []string `protobuf:"bytes,1,rep,name=branches" json:"branches,omitempty"`
}

func (m *Triggers) Reset()                    { *m = Triggers{} }
func (m *Triggers) String() string            { return proto.CompactTextString(m) }
func (*Triggers) ProtoMessage()               {}
func (*Triggers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Triggers) GetBranches() []string {
	if m != nil {
		return m.Branches
	}
	return nil
}

type WerkerTask struct {
	VaultToken   string       `protobuf:"bytes,1,opt,name=vaultToken" json:"vaultToken,omitempty"`
	CheckoutHash string       `protobuf:"bytes,2,opt,name=checkoutHash" json:"checkoutHash,omitempty"`
	BuildConf    *BuildConfig `protobuf:"bytes,3,opt,name=buildConf" json:"buildConf,omitempty"`
	VcsToken     string       `protobuf:"bytes,4,opt,name=vcsToken" json:"vcsToken,omitempty"`
	VcsType      SubCredType  `protobuf:"varint,9,opt,name=vcsType,enum=models.SubCredType" json:"vcsType,omitempty"`
	FullName     string       `protobuf:"bytes,6,opt,name=fullName" json:"fullName,omitempty"`
	Id           int64        `protobuf:"varint,7,opt,name=id" json:"id,omitempty"`
	Branch       string       `protobuf:"bytes,8,opt,name=branch" json:"branch,omitempty"`
}

func (m *WerkerTask) Reset()                    { *m = WerkerTask{} }
func (m *WerkerTask) String() string            { return proto.CompactTextString(m) }
func (*WerkerTask) ProtoMessage()               {}
func (*WerkerTask) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *WerkerTask) GetVaultToken() string {
	if m != nil {
		return m.VaultToken
	}
	return ""
}

func (m *WerkerTask) GetCheckoutHash() string {
	if m != nil {
		return m.CheckoutHash
	}
	return ""
}

func (m *WerkerTask) GetBuildConf() *BuildConfig {
	if m != nil {
		return m.BuildConf
	}
	return nil
}

func (m *WerkerTask) GetVcsToken() string {
	if m != nil {
		return m.VcsToken
	}
	return ""
}

func (m *WerkerTask) GetVcsType() SubCredType {
	if m != nil {
		return m.VcsType
	}
	return SubCredType_NIL_SCT
}

func (m *WerkerTask) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *WerkerTask) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WerkerTask) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func init() {
	proto.RegisterType((*BuildConfig)(nil), "models.BuildConfig")
	proto.RegisterType((*Stage)(nil), "models.Stage")
	proto.RegisterType((*Result)(nil), "models.Result")
	proto.RegisterType((*Triggers)(nil), "models.Triggers")
	proto.RegisterType((*WerkerTask)(nil), "models.WerkerTask")
	proto.RegisterEnum("models.StageResultVal", StageResultVal_name, StageResultVal_value)
}

func init() { proto.RegisterFile("build.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x53, 0xed, 0x8a, 0xd3, 0x40,
	0x14, 0x35, 0x1f, 0x4d, 0xdb, 0x1b, 0x2d, 0x65, 0x94, 0x65, 0x58, 0x44, 0x42, 0x50, 0x09, 0x0b,
	0x16, 0xac, 0x4f, 0xb0, 0xbb, 0x20, 0x0a, 0x22, 0x92, 0x16, 0x05, 0xff, 0xe5, 0x63, 0x36, 0x0d,
	0x49, 0x33, 0x71, 0x26, 0x29, 0xf8, 0xcf, 0x67, 0xf0, 0x51, 0x7c, 0x42, 0x99, 0x3b, 0x33, 0xed,
	0xe6, 0xdf, 0x3d, 0xe7, 0xde, 0x9c, 0x39, 0x39, 0x77, 0x06, 0xc2, 0x7c, 0xac, 0xdb, 0x72, 0xd3,
	0x0b, 0x3e, 0x70, 0x12, 0x1c, 0x79, 0xc9, 0x5a, 0x79, 0x1d, 0x16, 0x82, 0x95, 0x52, 0x93, 0xf1,
	0x3f, 0x07, 0xc2, 0x3b, 0x35, 0x74, 0xcf, 0xbb, 0x87, 0xba, 0x22, 0x2f, 0x60, 0x56, 0x1f, 0xb3,
	0x8a, 0x51, 0x27, 0x72, 0x92, 0x65, 0xaa, 0x01, 0x79, 0x09, 0x4b, 0x54, 0xda, 0x73, 0xde, 0x52,
	0x17, 0x3b, 0x17, 0x82, 0x5c, 0xc3, 0xa2, 0xcf, 0x8a, 0x26, 0xab, 0x98, 0xa4, 0x5e, 0xe4, 0x25,
	0xcb, 0xf4, 0x8c, 0x55, 0x2f, 0x17, 0x59, 0x57, 0x1c, 0x98, 0xa4, 0xbe, 0xee, 0x59, 0x4c, 0xd6,
	0xe0, 0xb1, 0xee, 0x44, 0x67, 0x48, 0xab, 0x92, 0xbc, 0x81, 0x40, 0x0e, 0xa8, 0x33, 0x8f, 0xbc,
	0x24, 0xdc, 0x3e, 0xdb, 0x68, 0xcf, 0x9b, 0x9d, 0x62, 0x53, 0xd3, 0x8c, 0x7f, 0xc1, 0x0c, 0x09,
	0xab, 0xe0, 0x5c, 0x14, 0xae, 0x20, 0x90, 0x85, 0xa8, 0xfb, 0x81, 0xba, 0x48, 0x1a, 0x44, 0x08,
	0xf8, 0x5d, 0x76, 0x64, 0xd4, 0x43, 0xf3, 0x58, 0x93, 0x1b, 0x98, 0x0f, 0xa2, 0xae, 0x2a, 0x26,
	0xa8, 0x1f, 0x39, 0x49, 0xb8, 0x5d, 0xdb, 0xe3, 0xf6, 0x9a, 0x96, 0xa9, 0x1d, 0x88, 0xff, 0x38,
	0x10, 0xa4, 0x4c, 0x8e, 0xed, 0xa0, 0x22, 0x42, 0x1f, 0x36, 0x22, 0x04, 0x64, 0x83, 0xd6, 0x87,
	0x51, 0x62, 0x3e, 0xab, 0xed, 0xd5, 0xd4, 0x3a, 0x7e, 0xfa, 0x3d, 0x6b, 0x53, 0x33, 0xa5, 0x54,
	0x98, 0x10, 0x5c, 0x18, 0x47, 0x1a, 0xa8, 0xb8, 0x8e, 0x4c, 0x4a, 0x8c, 0xc0, 0xc4, 0x65, 0x71,
	0xfc, 0x16, 0x16, 0xd6, 0xd7, 0x24, 0x56, 0x67, 0x1a, 0x6b, 0xfc, 0xd7, 0x05, 0xf8, 0xc1, 0x44,
	0xc3, 0xc4, 0x3e, 0x93, 0x0d, 0x79, 0x05, 0x70, 0xca, 0xc6, 0x76, 0xd8, 0xf3, 0x86, 0x75, 0xc6,
	0xf3, 0x23, 0x86, 0xc4, 0xf0, 0xb4, 0x38, 0xb0, 0xa2, 0xe1, 0xe3, 0xf0, 0x29, 0x93, 0x07, 0xb3,
	0xde, 0x09, 0x47, 0xde, 0x9b, 0xfd, 0xab, 0x4b, 0x82, 0x86, 0xc3, 0xed, 0x73, 0xfb, 0x7f, 0x8f,
	0x6e, 0x4f, 0x7a, 0x99, 0x52, 0x0e, 0x4f, 0x85, 0xd4, 0x87, 0xfa, 0x28, 0x79, 0xc6, 0xe4, 0x1d,
	0xcc, 0x55, 0xfd, 0xbb, 0x67, 0x74, 0x89, 0x61, 0x9d, 0xc5, 0x76, 0x63, 0x7e, 0x2f, 0x58, 0xa9,
	0x5a, 0xa9, 0x9d, 0x51, 0x52, 0x0f, 0x63, 0xdb, 0x7e, 0x55, 0xfb, 0x0b, 0xb4, 0x94, 0xc5, 0x64,
	0x05, 0x6e, 0x5d, 0xd2, 0x79, 0xe4, 0x24, 0x5e, 0xea, 0xd6, 0xa5, 0xda, 0xbf, 0x0e, 0x82, 0x2e,
	0x70, 0xd2, 0xa0, 0x9b, 0xd7, 0xb0, 0x9a, 0x2e, 0x82, 0x2c, 0xc0, 0xff, 0x76, 0xbb, 0xdb, 0xad,
	0x9f, 0xa8, 0xea, 0xe3, 0xed, 0xe7, 0x2f, 0x6b, 0xe7, 0xce, 0xff, 0xe9, 0xf6, 0x79, 0x1e, 0xe0,
	0xd3, 0xf8, 0xf0, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x22, 0x39, 0x96, 0x34, 0x3e, 0x03, 0x00, 0x00,
}
