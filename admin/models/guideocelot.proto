syntax = "proto3";

package models;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
//import "google/protobuf/wrappers.proto"; //use this when you have to pass a string value

service GuideOcelot {
    rpc GetVCSCreds (google.protobuf.Empty) returns (CredWrapper) {
        option (google.api.http) = {
			get: "/v1/creds"
		};
    }

    rpc SetVCSCreds (VCSCreds) returns (google.protobuf.Empty) {
        option (google.api.http) = {
			post: "/v1/creds"
			body: "*"
		};
    }

    rpc CheckConn (google.protobuf.Empty) returns (google.protobuf.Empty) {}

    rpc SetVCSPrivateKey (SSHKeyWrapper) returns (google.protobuf.Empty) {}

    rpc GetRepoCreds (google.protobuf.Empty) returns (RepoCredWrapper) {}
    rpc SetRepoCreds (RepoCreds) returns (google.protobuf.Empty) {}

    rpc SetK8sCreds (K8sCreds) returns (google.protobuf.Empty) {}
    rpc GetK8sCreds (google.protobuf.Empty) returns (K8sCredsWrapper) {}

    rpc GetAllCreds (google.protobuf.Empty) returns (AllCredsWrapper) {}

    rpc BuildRuntime (BuildQuery) returns (Builds) {}
    rpc Logs (BuildQuery) returns (stream LineResponse) {}
    rpc LastFewSummaries (RepoAccount) returns (Summaries) {}
    rpc GetStatus (StatusQuery) returns (Status) {}
    rpc WatchRepo (RepoAccount) returns (google.protobuf.Empty) {}
    rpc BuildRepoAndHash (BuildReq) returns (stream LineResponse) {}
    rpc PollRepo(PollRequest) returns (google.protobuf.Empty) {}
    rpc DeletePollRepo(PollRequest) returns (google.protobuf.Empty) {}
    rpc FindWerker (BuildReq) returns (BuildRuntimeInfo) {}
    rpc ListPolledRepos(google.protobuf.Empty) returns (Polls) {}
}

message BuildReq {
    string acctRepo = 1;
    string hash = 2;
    string branch = 3;
}

message AllCredsWrapper {
    RepoCredWrapper repoCreds = 1;
    CredWrapper vcsCreds = 3;
}

message CredWrapper {
    repeated VCSCreds vcs = 2;
}

message SSHKeyWrapper {
    string acctName = 1;
    bytes privateKey = 2;
    SubCredType subType = 10;
}

message VCSCreds {
    string clientId = 1;
    string clientSecret = 2;
    string identifier = 8;
    string tokenURL = 3;
    string acctName = 4;
    string sshFileLoc = 6;
    CredType type = 9;
    SubCredType subType = 10;
}

message RepoCredWrapper {
    repeated RepoCreds repo = 3;
}

enum CredType {
    VCS = 0;
    REPO = 1;
    K8S = 2;

}

enum SubCredType {
    BITBUCKET = 0;
    GITHUB = 1;

    NEXUS = 2;
    MAVEN = 3;

    DOCKER = 4;
    KUBECONF = 5;
}

message RepoCreds {
    string username = 1;
    string password = 2;
    string repoUrl= 6;
    string identifier = 8;
    string acctName = 4;
    CredType type = 9;
    SubCredType subType = 10;

}

message K8sCreds {
    string acctName = 1;
    string k8sContents = 2;
    string identifier = 3;
    CredType type = 4;
    SubCredType subType = 5;

}

message K8sCredsWrapper {
    repeated K8sCreds k8sCreds = 2;
}

message StatusQuery {
    string hash = 1;
    string acctName = 2;
    string repoName = 3;
    string partialRepo = 4;
}

message BuildQuery {
    string hash = 1;
    int64 buildId = 2;
}

message Builds {
    map<string, BuildRuntimeInfo> builds = 1;
}

message BuildRuntimeInfo {
    bool   done     = 1;
    string ip       = 2;
    string grpcPort = 3;
    string hash = 4;
    string acctName = 5;
    string repoName = 6;
}

message LineResponse {
    string outputLine = 1;
}

message RepoAccount {
    string repo = 1;
    string account = 2;
    int32  limit = 3;
}

message Status {
    BuildSummary buildSum = 1;
    repeated Stage stages = 2;
    bool isInConsul       = 3;
}

message Stage {
    string stage = 1;
    string error = 2;
    int32 status = 3;
    repeated string messages = 4;
    google.protobuf.Timestamp startTime = 5;
    double stageDuration = 6;
}

message BuildSummary {
    string hash = 1;
    bool failed = 2;
    google.protobuf.Timestamp buildTime = 3;
    string account = 4;
    double buildDuration = 5;
    string repo = 6;
    string branch = 7;
    int64 buildId = 8;
    google.protobuf.Timestamp queueTime = 9;
}

message Summaries {
    repeated BuildSummary sums = 1;
}

message PollRequest {
    string account = 1;
    string repo = 2;
    string cron = 4;
    string branches = 5;
    google.protobuf.Timestamp lastCronTime = 6;
    map<string, string> lastHashes = 7;
}

message Polls {
    repeated PollRequest polls = 1;
}
