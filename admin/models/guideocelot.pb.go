// Code generated by protoc-gen-go. DO NOT EDIT.
// source: guideocelot.proto

/*
Package models is a generated protocol buffer package.

It is generated from these files:
	guideocelot.proto

It has these top-level messages:
	BuildReq
	AllCredsWrapper
	CredWrapper
	SSHKeyWrapper
	VCSCreds
	RepoCredWrapper
	RepoCreds
	StatusQuery
	BuildQuery
	Builds
	BuildRuntimeInfo
	LineResponse
	RepoAccount
	Status
	Stage
	BuildSummary
	Summaries
	PollRequest
	Polls
*/
package models

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf2 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BuildReq struct {
	AcctRepo string `protobuf:"bytes,1,opt,name=acctRepo" json:"acctRepo,omitempty"`
	Hash     string `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
	Branch   string `protobuf:"bytes,3,opt,name=branch" json:"branch,omitempty"`
}

func (m *BuildReq) Reset()                    { *m = BuildReq{} }
func (m *BuildReq) String() string            { return proto.CompactTextString(m) }
func (*BuildReq) ProtoMessage()               {}
func (*BuildReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BuildReq) GetAcctRepo() string {
	if m != nil {
		return m.AcctRepo
	}
	return ""
}

func (m *BuildReq) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildReq) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

type AllCredsWrapper struct {
	RepoCreds *RepoCredWrapper `protobuf:"bytes,1,opt,name=repoCreds" json:"repoCreds,omitempty"`
	VcsCreds  *CredWrapper     `protobuf:"bytes,3,opt,name=vcsCreds" json:"vcsCreds,omitempty"`
}

func (m *AllCredsWrapper) Reset()                    { *m = AllCredsWrapper{} }
func (m *AllCredsWrapper) String() string            { return proto.CompactTextString(m) }
func (*AllCredsWrapper) ProtoMessage()               {}
func (*AllCredsWrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AllCredsWrapper) GetRepoCreds() *RepoCredWrapper {
	if m != nil {
		return m.RepoCreds
	}
	return nil
}

func (m *AllCredsWrapper) GetVcsCreds() *CredWrapper {
	if m != nil {
		return m.VcsCreds
	}
	return nil
}

type CredWrapper struct {
	Vcs []*VCSCreds `protobuf:"bytes,2,rep,name=vcs" json:"vcs,omitempty"`
}

func (m *CredWrapper) Reset()                    { *m = CredWrapper{} }
func (m *CredWrapper) String() string            { return proto.CompactTextString(m) }
func (*CredWrapper) ProtoMessage()               {}
func (*CredWrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CredWrapper) GetVcs() []*VCSCreds {
	if m != nil {
		return m.Vcs
	}
	return nil
}

type SSHKeyWrapper struct {
	AcctName   string `protobuf:"bytes,1,opt,name=acctName" json:"acctName,omitempty"`
	PrivateKey []byte `protobuf:"bytes,2,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	Type       string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
}

func (m *SSHKeyWrapper) Reset()                    { *m = SSHKeyWrapper{} }
func (m *SSHKeyWrapper) String() string            { return proto.CompactTextString(m) }
func (*SSHKeyWrapper) ProtoMessage()               {}
func (*SSHKeyWrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SSHKeyWrapper) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *SSHKeyWrapper) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *SSHKeyWrapper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type VCSCreds struct {
	ClientId     string `protobuf:"bytes,1,opt,name=clientId" json:"clientId,omitempty"`
	ClientSecret string `protobuf:"bytes,2,opt,name=clientSecret" json:"clientSecret,omitempty"`
	TokenURL     string `protobuf:"bytes,3,opt,name=tokenURL" json:"tokenURL,omitempty"`
	AcctName     string `protobuf:"bytes,4,opt,name=acctName" json:"acctName,omitempty"`
	Type         string `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	SshFileLoc   string `protobuf:"bytes,6,opt,name=sshFileLoc" json:"sshFileLoc,omitempty"`
}

func (m *VCSCreds) Reset()                    { *m = VCSCreds{} }
func (m *VCSCreds) String() string            { return proto.CompactTextString(m) }
func (*VCSCreds) ProtoMessage()               {}
func (*VCSCreds) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *VCSCreds) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *VCSCreds) GetClientSecret() string {
	if m != nil {
		return m.ClientSecret
	}
	return ""
}

func (m *VCSCreds) GetTokenURL() string {
	if m != nil {
		return m.TokenURL
	}
	return ""
}

func (m *VCSCreds) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *VCSCreds) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *VCSCreds) GetSshFileLoc() string {
	if m != nil {
		return m.SshFileLoc
	}
	return ""
}

type RepoCredWrapper struct {
	Repo []*RepoCreds `protobuf:"bytes,3,rep,name=repo" json:"repo,omitempty"`
}

func (m *RepoCredWrapper) Reset()                    { *m = RepoCredWrapper{} }
func (m *RepoCredWrapper) String() string            { return proto.CompactTextString(m) }
func (*RepoCredWrapper) ProtoMessage()               {}
func (*RepoCredWrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RepoCredWrapper) GetRepo() []*RepoCreds {
	if m != nil {
		return m.Repo
	}
	return nil
}

type RepoCreds struct {
	Username string            `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string            `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	RepoUrl  map[string]string `protobuf:"bytes,6,rep,name=repoUrl" json:"repoUrl,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AcctName string            `protobuf:"bytes,4,opt,name=acctName" json:"acctName,omitempty"`
	// todo: should this be an enum?
	Type        string `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	ProjectName string `protobuf:"bytes,7,opt,name=projectName" json:"projectName,omitempty"`
}

func (m *RepoCreds) Reset()                    { *m = RepoCreds{} }
func (m *RepoCreds) String() string            { return proto.CompactTextString(m) }
func (*RepoCreds) ProtoMessage()               {}
func (*RepoCreds) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RepoCreds) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RepoCreds) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RepoCreds) GetRepoUrl() map[string]string {
	if m != nil {
		return m.RepoUrl
	}
	return nil
}

func (m *RepoCreds) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *RepoCreds) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RepoCreds) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

type StatusQuery struct {
	Hash        string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	AcctName    string `protobuf:"bytes,2,opt,name=acctName" json:"acctName,omitempty"`
	RepoName    string `protobuf:"bytes,3,opt,name=repoName" json:"repoName,omitempty"`
	PartialRepo string `protobuf:"bytes,4,opt,name=partialRepo" json:"partialRepo,omitempty"`
}

func (m *StatusQuery) Reset()                    { *m = StatusQuery{} }
func (m *StatusQuery) String() string            { return proto.CompactTextString(m) }
func (*StatusQuery) ProtoMessage()               {}
func (*StatusQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *StatusQuery) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *StatusQuery) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *StatusQuery) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *StatusQuery) GetPartialRepo() string {
	if m != nil {
		return m.PartialRepo
	}
	return ""
}

type BuildQuery struct {
	Hash    string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	BuildId int64  `protobuf:"varint,2,opt,name=buildId" json:"buildId,omitempty"`
}

func (m *BuildQuery) Reset()                    { *m = BuildQuery{} }
func (m *BuildQuery) String() string            { return proto.CompactTextString(m) }
func (*BuildQuery) ProtoMessage()               {}
func (*BuildQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BuildQuery) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildQuery) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

type Builds struct {
	Builds map[string]*BuildRuntimeInfo `protobuf:"bytes,1,rep,name=builds" json:"builds,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Builds) Reset()                    { *m = Builds{} }
func (m *Builds) String() string            { return proto.CompactTextString(m) }
func (*Builds) ProtoMessage()               {}
func (*Builds) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Builds) GetBuilds() map[string]*BuildRuntimeInfo {
	if m != nil {
		return m.Builds
	}
	return nil
}

type BuildRuntimeInfo struct {
	Done     bool   `protobuf:"varint,1,opt,name=done" json:"done,omitempty"`
	Ip       string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	GrpcPort string `protobuf:"bytes,3,opt,name=grpcPort" json:"grpcPort,omitempty"`
	Hash     string `protobuf:"bytes,4,opt,name=hash" json:"hash,omitempty"`
	AcctName string `protobuf:"bytes,5,opt,name=acctName" json:"acctName,omitempty"`
	RepoName string `protobuf:"bytes,6,opt,name=repoName" json:"repoName,omitempty"`
}

func (m *BuildRuntimeInfo) Reset()                    { *m = BuildRuntimeInfo{} }
func (m *BuildRuntimeInfo) String() string            { return proto.CompactTextString(m) }
func (*BuildRuntimeInfo) ProtoMessage()               {}
func (*BuildRuntimeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BuildRuntimeInfo) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func (m *BuildRuntimeInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *BuildRuntimeInfo) GetGrpcPort() string {
	if m != nil {
		return m.GrpcPort
	}
	return ""
}

func (m *BuildRuntimeInfo) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildRuntimeInfo) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *BuildRuntimeInfo) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

type LineResponse struct {
	OutputLine string `protobuf:"bytes,1,opt,name=outputLine" json:"outputLine,omitempty"`
}

func (m *LineResponse) Reset()                    { *m = LineResponse{} }
func (m *LineResponse) String() string            { return proto.CompactTextString(m) }
func (*LineResponse) ProtoMessage()               {}
func (*LineResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *LineResponse) GetOutputLine() string {
	if m != nil {
		return m.OutputLine
	}
	return ""
}

type RepoAccount struct {
	Repo    string `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Account string `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	Limit   int32  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
}

func (m *RepoAccount) Reset()                    { *m = RepoAccount{} }
func (m *RepoAccount) String() string            { return proto.CompactTextString(m) }
func (*RepoAccount) ProtoMessage()               {}
func (*RepoAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *RepoAccount) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *RepoAccount) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RepoAccount) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type Status struct {
	BuildSum   *BuildSummary `protobuf:"bytes,1,opt,name=buildSum" json:"buildSum,omitempty"`
	Stages     []*Stage      `protobuf:"bytes,2,rep,name=stages" json:"stages,omitempty"`
	IsInConsul bool          `protobuf:"varint,3,opt,name=isInConsul" json:"isInConsul,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Status) GetBuildSum() *BuildSummary {
	if m != nil {
		return m.BuildSum
	}
	return nil
}

func (m *Status) GetStages() []*Stage {
	if m != nil {
		return m.Stages
	}
	return nil
}

func (m *Status) GetIsInConsul() bool {
	if m != nil {
		return m.IsInConsul
	}
	return false
}

type Stage struct {
	Stage         string                      `protobuf:"bytes,1,opt,name=stage" json:"stage,omitempty"`
	Error         string                      `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Status        int32                       `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	Messages      []string                    `protobuf:"bytes,4,rep,name=messages" json:"messages,omitempty"`
	StartTime     *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=startTime" json:"startTime,omitempty"`
	StageDuration float64                     `protobuf:"fixed64,6,opt,name=stageDuration" json:"stageDuration,omitempty"`
}

func (m *Stage) Reset()                    { *m = Stage{} }
func (m *Stage) String() string            { return proto.CompactTextString(m) }
func (*Stage) ProtoMessage()               {}
func (*Stage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Stage) GetStage() string {
	if m != nil {
		return m.Stage
	}
	return ""
}

func (m *Stage) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Stage) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Stage) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *Stage) GetStartTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Stage) GetStageDuration() float64 {
	if m != nil {
		return m.StageDuration
	}
	return 0
}

type BuildSummary struct {
	Hash          string                      `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Failed        bool                        `protobuf:"varint,2,opt,name=failed" json:"failed,omitempty"`
	BuildTime     *google_protobuf2.Timestamp `protobuf:"bytes,3,opt,name=buildTime" json:"buildTime,omitempty"`
	Account       string                      `protobuf:"bytes,4,opt,name=account" json:"account,omitempty"`
	BuildDuration float64                     `protobuf:"fixed64,5,opt,name=buildDuration" json:"buildDuration,omitempty"`
	Repo          string                      `protobuf:"bytes,6,opt,name=repo" json:"repo,omitempty"`
	Branch        string                      `protobuf:"bytes,7,opt,name=branch" json:"branch,omitempty"`
	BuildId       int64                       `protobuf:"varint,8,opt,name=buildId" json:"buildId,omitempty"`
	QueueTime     *google_protobuf2.Timestamp `protobuf:"bytes,9,opt,name=queueTime" json:"queueTime,omitempty"`
}

func (m *BuildSummary) Reset()                    { *m = BuildSummary{} }
func (m *BuildSummary) String() string            { return proto.CompactTextString(m) }
func (*BuildSummary) ProtoMessage()               {}
func (*BuildSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *BuildSummary) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildSummary) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

func (m *BuildSummary) GetBuildTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.BuildTime
	}
	return nil
}

func (m *BuildSummary) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *BuildSummary) GetBuildDuration() float64 {
	if m != nil {
		return m.BuildDuration
	}
	return 0
}

func (m *BuildSummary) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *BuildSummary) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *BuildSummary) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

func (m *BuildSummary) GetQueueTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.QueueTime
	}
	return nil
}

type Summaries struct {
	Sums []*BuildSummary `protobuf:"bytes,1,rep,name=sums" json:"sums,omitempty"`
}

func (m *Summaries) Reset()                    { *m = Summaries{} }
func (m *Summaries) String() string            { return proto.CompactTextString(m) }
func (*Summaries) ProtoMessage()               {}
func (*Summaries) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Summaries) GetSums() []*BuildSummary {
	if m != nil {
		return m.Sums
	}
	return nil
}

type PollRequest struct {
	Account  string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Repo     string `protobuf:"bytes,2,opt,name=repo" json:"repo,omitempty"`
	Cron     string `protobuf:"bytes,4,opt,name=cron" json:"cron,omitempty"`
	Branches string `protobuf:"bytes,5,opt,name=branches" json:"branches,omitempty"`
}

func (m *PollRequest) Reset()                    { *m = PollRequest{} }
func (m *PollRequest) String() string            { return proto.CompactTextString(m) }
func (*PollRequest) ProtoMessage()               {}
func (*PollRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *PollRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *PollRequest) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *PollRequest) GetCron() string {
	if m != nil {
		return m.Cron
	}
	return ""
}

func (m *PollRequest) GetBranches() string {
	if m != nil {
		return m.Branches
	}
	return ""
}

type Polls struct {
	Polls []*PollRequest `protobuf:"bytes,1,rep,name=polls" json:"polls,omitempty"`
}

func (m *Polls) Reset()                    { *m = Polls{} }
func (m *Polls) String() string            { return proto.CompactTextString(m) }
func (*Polls) ProtoMessage()               {}
func (*Polls) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Polls) GetPolls() []*PollRequest {
	if m != nil {
		return m.Polls
	}
	return nil
}

func init() {
	proto.RegisterType((*BuildReq)(nil), "models.BuildReq")
	proto.RegisterType((*AllCredsWrapper)(nil), "models.AllCredsWrapper")
	proto.RegisterType((*CredWrapper)(nil), "models.CredWrapper")
	proto.RegisterType((*SSHKeyWrapper)(nil), "models.SSHKeyWrapper")
	proto.RegisterType((*VCSCreds)(nil), "models.VCSCreds")
	proto.RegisterType((*RepoCredWrapper)(nil), "models.RepoCredWrapper")
	proto.RegisterType((*RepoCreds)(nil), "models.RepoCreds")
	proto.RegisterType((*StatusQuery)(nil), "models.StatusQuery")
	proto.RegisterType((*BuildQuery)(nil), "models.BuildQuery")
	proto.RegisterType((*Builds)(nil), "models.Builds")
	proto.RegisterType((*BuildRuntimeInfo)(nil), "models.BuildRuntimeInfo")
	proto.RegisterType((*LineResponse)(nil), "models.LineResponse")
	proto.RegisterType((*RepoAccount)(nil), "models.RepoAccount")
	proto.RegisterType((*Status)(nil), "models.Status")
	proto.RegisterType((*Stage)(nil), "models.Stage")
	proto.RegisterType((*BuildSummary)(nil), "models.BuildSummary")
	proto.RegisterType((*Summaries)(nil), "models.Summaries")
	proto.RegisterType((*PollRequest)(nil), "models.PollRequest")
	proto.RegisterType((*Polls)(nil), "models.Polls")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GuideOcelot service

type GuideOcelotClient interface {
	GetVCSCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*CredWrapper, error)
	SetVCSCreds(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	CheckConn(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	SetVCSPrivateKey(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetRepoCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*RepoCredWrapper, error)
	SetRepoCreds(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetAllCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*AllCredsWrapper, error)
	BuildRuntime(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (*Builds, error)
	Logs(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (GuideOcelot_LogsClient, error)
	LastFewSummaries(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*Summaries, error)
	GetStatus(ctx context.Context, in *StatusQuery, opts ...grpc.CallOption) (*Status, error)
	WatchRepo(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	BuildRepoAndHash(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (GuideOcelot_BuildRepoAndHashClient, error)
	PollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	DeletePollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	FindWerker(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (*BuildRuntimeInfo, error)
	ListPolledRepos(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Polls, error)
}

type guideOcelotClient struct {
	cc *grpc.ClientConn
}

func NewGuideOcelotClient(cc *grpc.ClientConn) GuideOcelotClient {
	return &guideOcelotClient{cc}
}

func (c *guideOcelotClient) GetVCSCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*CredWrapper, error) {
	out := new(CredWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetVCSCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetVCSCreds(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetVCSCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) CheckConn(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/CheckConn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetVCSPrivateKey(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetVCSPrivateKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetRepoCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*RepoCredWrapper, error) {
	out := new(RepoCredWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetRepoCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetRepoCreds(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetRepoCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetAllCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*AllCredsWrapper, error) {
	out := new(AllCredsWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetAllCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) BuildRuntime(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (*Builds, error) {
	out := new(Builds)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/BuildRuntime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) Logs(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (GuideOcelot_LogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GuideOcelot_serviceDesc.Streams[0], c.cc, "/models.GuideOcelot/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &guideOcelotLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GuideOcelot_LogsClient interface {
	Recv() (*LineResponse, error)
	grpc.ClientStream
}

type guideOcelotLogsClient struct {
	grpc.ClientStream
}

func (x *guideOcelotLogsClient) Recv() (*LineResponse, error) {
	m := new(LineResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *guideOcelotClient) LastFewSummaries(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*Summaries, error) {
	out := new(Summaries)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/LastFewSummaries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetStatus(ctx context.Context, in *StatusQuery, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) WatchRepo(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/WatchRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) BuildRepoAndHash(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (GuideOcelot_BuildRepoAndHashClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GuideOcelot_serviceDesc.Streams[1], c.cc, "/models.GuideOcelot/BuildRepoAndHash", opts...)
	if err != nil {
		return nil, err
	}
	x := &guideOcelotBuildRepoAndHashClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GuideOcelot_BuildRepoAndHashClient interface {
	Recv() (*LineResponse, error)
	grpc.ClientStream
}

type guideOcelotBuildRepoAndHashClient struct {
	grpc.ClientStream
}

func (x *guideOcelotBuildRepoAndHashClient) Recv() (*LineResponse, error) {
	m := new(LineResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *guideOcelotClient) PollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/PollRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) DeletePollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/DeletePollRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) FindWerker(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (*BuildRuntimeInfo, error) {
	out := new(BuildRuntimeInfo)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/FindWerker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) ListPolledRepos(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Polls, error) {
	out := new(Polls)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/ListPolledRepos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GuideOcelot service

type GuideOcelotServer interface {
	GetVCSCreds(context.Context, *google_protobuf.Empty) (*CredWrapper, error)
	SetVCSCreds(context.Context, *VCSCreds) (*google_protobuf.Empty, error)
	CheckConn(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
	SetVCSPrivateKey(context.Context, *SSHKeyWrapper) (*google_protobuf.Empty, error)
	GetRepoCreds(context.Context, *google_protobuf.Empty) (*RepoCredWrapper, error)
	SetRepoCreds(context.Context, *RepoCreds) (*google_protobuf.Empty, error)
	GetAllCreds(context.Context, *google_protobuf.Empty) (*AllCredsWrapper, error)
	BuildRuntime(context.Context, *BuildQuery) (*Builds, error)
	Logs(*BuildQuery, GuideOcelot_LogsServer) error
	LastFewSummaries(context.Context, *RepoAccount) (*Summaries, error)
	GetStatus(context.Context, *StatusQuery) (*Status, error)
	WatchRepo(context.Context, *RepoAccount) (*google_protobuf.Empty, error)
	BuildRepoAndHash(*BuildReq, GuideOcelot_BuildRepoAndHashServer) error
	PollRepo(context.Context, *PollRequest) (*google_protobuf.Empty, error)
	DeletePollRepo(context.Context, *PollRequest) (*google_protobuf.Empty, error)
	FindWerker(context.Context, *BuildReq) (*BuildRuntimeInfo, error)
	ListPolledRepos(context.Context, *google_protobuf.Empty) (*Polls, error)
}

func RegisterGuideOcelotServer(s *grpc.Server, srv GuideOcelotServer) {
	s.RegisterService(&_GuideOcelot_serviceDesc, srv)
}

func _GuideOcelot_GetVCSCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetVCSCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetVCSCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetVCSCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetVCSCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCSCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetVCSCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetVCSCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetVCSCreds(ctx, req.(*VCSCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_CheckConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).CheckConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/CheckConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).CheckConn(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetVCSPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKeyWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetVCSPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetVCSPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetVCSPrivateKey(ctx, req.(*SSHKeyWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetRepoCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetRepoCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetRepoCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetRepoCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetRepoCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetRepoCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetRepoCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetRepoCreds(ctx, req.(*RepoCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetAllCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetAllCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetAllCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetAllCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_BuildRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).BuildRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/BuildRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).BuildRuntime(ctx, req.(*BuildQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GuideOcelotServer).Logs(m, &guideOcelotLogsServer{stream})
}

type GuideOcelot_LogsServer interface {
	Send(*LineResponse) error
	grpc.ServerStream
}

type guideOcelotLogsServer struct {
	grpc.ServerStream
}

func (x *guideOcelotLogsServer) Send(m *LineResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GuideOcelot_LastFewSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).LastFewSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/LastFewSummaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).LastFewSummaries(ctx, req.(*RepoAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetStatus(ctx, req.(*StatusQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_WatchRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).WatchRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/WatchRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).WatchRepo(ctx, req.(*RepoAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_BuildRepoAndHash_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GuideOcelotServer).BuildRepoAndHash(m, &guideOcelotBuildRepoAndHashServer{stream})
}

type GuideOcelot_BuildRepoAndHashServer interface {
	Send(*LineResponse) error
	grpc.ServerStream
}

type guideOcelotBuildRepoAndHashServer struct {
	grpc.ServerStream
}

func (x *guideOcelotBuildRepoAndHashServer) Send(m *LineResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GuideOcelot_PollRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).PollRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/PollRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).PollRepo(ctx, req.(*PollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_DeletePollRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).DeletePollRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/DeletePollRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).DeletePollRepo(ctx, req.(*PollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_FindWerker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).FindWerker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/FindWerker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).FindWerker(ctx, req.(*BuildReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_ListPolledRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).ListPolledRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/ListPolledRepos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).ListPolledRepos(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _GuideOcelot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "models.GuideOcelot",
	HandlerType: (*GuideOcelotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVCSCreds",
			Handler:    _GuideOcelot_GetVCSCreds_Handler,
		},
		{
			MethodName: "SetVCSCreds",
			Handler:    _GuideOcelot_SetVCSCreds_Handler,
		},
		{
			MethodName: "CheckConn",
			Handler:    _GuideOcelot_CheckConn_Handler,
		},
		{
			MethodName: "SetVCSPrivateKey",
			Handler:    _GuideOcelot_SetVCSPrivateKey_Handler,
		},
		{
			MethodName: "GetRepoCreds",
			Handler:    _GuideOcelot_GetRepoCreds_Handler,
		},
		{
			MethodName: "SetRepoCreds",
			Handler:    _GuideOcelot_SetRepoCreds_Handler,
		},
		{
			MethodName: "GetAllCreds",
			Handler:    _GuideOcelot_GetAllCreds_Handler,
		},
		{
			MethodName: "BuildRuntime",
			Handler:    _GuideOcelot_BuildRuntime_Handler,
		},
		{
			MethodName: "LastFewSummaries",
			Handler:    _GuideOcelot_LastFewSummaries_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _GuideOcelot_GetStatus_Handler,
		},
		{
			MethodName: "WatchRepo",
			Handler:    _GuideOcelot_WatchRepo_Handler,
		},
		{
			MethodName: "PollRepo",
			Handler:    _GuideOcelot_PollRepo_Handler,
		},
		{
			MethodName: "DeletePollRepo",
			Handler:    _GuideOcelot_DeletePollRepo_Handler,
		},
		{
			MethodName: "FindWerker",
			Handler:    _GuideOcelot_FindWerker_Handler,
		},
		{
			MethodName: "ListPolledRepos",
			Handler:    _GuideOcelot_ListPolledRepos_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _GuideOcelot_Logs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BuildRepoAndHash",
			Handler:       _GuideOcelot_BuildRepoAndHash_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "guideocelot.proto",
}

func init() { proto.RegisterFile("guideocelot.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcd, 0x72, 0x1b, 0x45,
	0x10, 0xf6, 0xea, 0xcf, 0x52, 0xaf, 0xec, 0x38, 0x93, 0x10, 0x54, 0x82, 0x0a, 0xae, 0xa9, 0xa4,
	0x2a, 0x70, 0x90, 0x13, 0x41, 0xaa, 0x8c, 0xf9, 0x0d, 0x4e, 0xe2, 0xb8, 0xe2, 0x40, 0xb2, 0x4a,
	0xc8, 0x91, 0x5a, 0xaf, 0x26, 0xf6, 0xe2, 0xd5, 0xce, 0x7a, 0x66, 0xd6, 0x29, 0x15, 0x27, 0xb8,
	0x72, 0xa2, 0xb8, 0xf3, 0x14, 0x14, 0x57, 0x8e, 0x3c, 0x00, 0xaf, 0xc0, 0x83, 0x50, 0xd3, 0x3b,
	0xb3, 0x9a, 0x95, 0x25, 0xa7, 0xe0, 0xb4, 0xdb, 0x7f, 0xd3, 0x5f, 0x77, 0x4f, 0x4f, 0x37, 0x5c,
	0x3e, 0xca, 0xe3, 0x31, 0xe3, 0x11, 0x4b, 0xb8, 0x1a, 0x64, 0x82, 0x2b, 0x4e, 0x5a, 0x13, 0x3e,
	0x66, 0x89, 0xec, 0xbf, 0x73, 0xc4, 0xf9, 0x51, 0xc2, 0xb6, 0x90, 0x7b, 0x98, 0xbf, 0xda, 0x62,
	0x93, 0x4c, 0x4d, 0x0b, 0xa5, 0xfe, 0xbb, 0x46, 0x18, 0x66, 0xf1, 0x56, 0x98, 0xa6, 0x5c, 0x85,
	0x2a, 0xe6, 0xa9, 0x34, 0xd2, 0xf7, 0xe6, 0x4d, 0x55, 0x3c, 0x61, 0x52, 0x85, 0x93, 0xac, 0x50,
	0xa0, 0x01, 0xb4, 0xbf, 0xca, 0xe3, 0x64, 0x1c, 0xb0, 0x53, 0xd2, 0x87, 0x76, 0x18, 0x45, 0x2a,
	0x60, 0x19, 0xef, 0x79, 0x9b, 0xde, 0xad, 0x4e, 0x50, 0xd2, 0x84, 0x40, 0xe3, 0x38, 0x94, 0xc7,
	0xbd, 0x1a, 0xf2, 0xf1, 0x9f, 0x5c, 0x83, 0xd6, 0xa1, 0x08, 0xd3, 0xe8, 0xb8, 0x57, 0x47, 0xae,
	0xa1, 0xe8, 0x14, 0x2e, 0xdd, 0x4b, 0x92, 0x5d, 0xc1, 0xc6, 0xf2, 0xa5, 0x08, 0xb3, 0x8c, 0x09,
	0x72, 0x17, 0x3a, 0x82, 0x65, 0x1c, 0x79, 0x78, 0xb6, 0x3f, 0x7c, 0x7b, 0x50, 0x84, 0x37, 0x08,
	0x8c, 0xc0, 0xe8, 0x06, 0x33, 0x4d, 0xb2, 0x05, 0xed, 0xb3, 0x48, 0x16, 0x56, 0x75, 0xb4, 0xba,
	0x62, 0xad, 0x5c, 0x8b, 0x52, 0x89, 0xde, 0x01, 0xdf, 0x11, 0x10, 0x0a, 0xf5, 0xb3, 0x48, 0xf6,
	0x6a, 0x9b, 0xf5, 0x5b, 0xfe, 0x70, 0xc3, 0x9a, 0x7e, 0xbb, 0x3b, 0x42, 0xed, 0x40, 0x0b, 0xe9,
	0x77, 0xb0, 0x36, 0x1a, 0x3d, 0x7a, 0xcc, 0xa6, 0xd6, 0xc8, 0xa4, 0xe1, 0xeb, 0x70, 0xc2, 0xdc,
	0x34, 0x68, 0x9a, 0x5c, 0x07, 0xc8, 0x44, 0x7c, 0x16, 0x2a, 0xf6, 0x98, 0x4d, 0x31, 0x19, 0xdd,
	0xc0, 0xe1, 0xe8, 0x34, 0xa9, 0x69, 0xc6, 0x4c, 0x42, 0xf0, 0x9f, 0xfe, 0xe1, 0x41, 0xdb, 0xba,
	0xd4, 0x87, 0x47, 0x49, 0xcc, 0x52, 0xb5, 0x3f, 0xb6, 0x87, 0x5b, 0x9a, 0x50, 0xe8, 0x16, 0xff,
	0x23, 0x16, 0x09, 0xa6, 0x4c, 0xae, 0x2b, 0x3c, 0x6d, 0xaf, 0xf8, 0x09, 0x4b, 0x5f, 0x04, 0x07,
	0xc6, 0x49, 0x49, 0x57, 0x80, 0x37, 0xe6, 0x80, 0x5b, 0x60, 0xcd, 0x19, 0x30, 0x1d, 0x8c, 0x94,
	0xc7, 0x0f, 0xe3, 0x84, 0x1d, 0xf0, 0xa8, 0xd7, 0x42, 0x89, 0xc3, 0xa1, 0xdb, 0x70, 0x69, 0xae,
	0x36, 0xe4, 0x26, 0x34, 0x74, 0x75, 0x7a, 0x75, 0xcc, 0xe8, 0xe5, 0xf9, 0x12, 0xca, 0x00, 0xc5,
	0xf4, 0xe7, 0x1a, 0x74, 0x4a, 0x9e, 0xc6, 0x95, 0x4b, 0x26, 0x52, 0x27, 0xa1, 0x96, 0xd6, 0xb2,
	0x2c, 0x94, 0xf2, 0x35, 0x17, 0x63, 0x13, 0x6f, 0x49, 0x93, 0x6d, 0x58, 0xd5, 0xa7, 0xbd, 0x10,
	0x49, 0xaf, 0x85, 0xfe, 0xae, 0x9f, 0xf3, 0x87, 0x7f, 0x2f, 0x44, 0xf2, 0x20, 0x55, 0x62, 0x1a,
	0x58, 0xf5, 0xff, 0x9c, 0x89, 0x4d, 0xf0, 0x33, 0xc1, 0xbf, 0x67, 0xc6, 0x64, 0x15, 0x45, 0x2e,
	0xab, 0xbf, 0x03, 0x5d, 0xd7, 0x15, 0xd9, 0x80, 0xfa, 0x09, 0x9b, 0x9a, 0x70, 0xf4, 0x2f, 0xb9,
	0x0a, 0xcd, 0xb3, 0x30, 0xc9, 0x99, 0x09, 0xa3, 0x20, 0x76, 0x6a, 0xdb, 0x1e, 0xfd, 0x01, 0xfc,
	0x91, 0x0a, 0x55, 0x2e, 0x9f, 0xe5, 0x4c, 0x4c, 0xcb, 0x56, 0xf2, 0x9c, 0x56, 0x72, 0x01, 0xd7,
	0xe6, 0x00, 0xf7, 0xa1, 0xad, 0xe3, 0x42, 0x99, 0x29, 0xb9, 0xa5, 0x11, 0x78, 0x28, 0x54, 0x1c,
	0x26, 0xd8, 0xb5, 0x0d, 0x03, 0x7c, 0xc6, 0xa2, 0x3b, 0x00, 0xd8, 0xe0, 0xcb, 0x7d, 0xf7, 0x60,
	0xf5, 0x50, 0x6b, 0xec, 0x17, 0x15, 0xa8, 0x07, 0x96, 0xa4, 0xbf, 0x78, 0xd0, 0x42, 0x63, 0x49,
	0x86, 0xd0, 0x42, 0xae, 0xee, 0x5e, 0x5d, 0x8a, 0xbe, 0x2d, 0x45, 0x21, 0x37, 0x9f, 0xa2, 0x0c,
	0x46, 0xb3, 0x3f, 0x02, 0xdf, 0x61, 0x2f, 0x48, 0xd9, 0xc0, 0x4d, 0x99, 0x3f, 0xec, 0x55, 0xce,
	0x0c, 0xf2, 0x54, 0x3f, 0x56, 0xfb, 0xe9, 0x2b, 0xee, 0x26, 0xf3, 0x37, 0x0f, 0x36, 0xe6, 0xe5,
	0x3a, 0xac, 0x31, 0x4f, 0x8b, 0xdb, 0xd5, 0x0e, 0xf0, 0x9f, 0xac, 0x43, 0x2d, 0xce, 0x4c, 0x32,
	0x6b, 0x71, 0xa6, 0xd3, 0x78, 0x24, 0xb2, 0xe8, 0x29, 0x17, 0xca, 0xa6, 0xd1, 0xd2, 0x65, 0x5a,
	0x1a, 0x4b, 0x4a, 0xd2, 0xbc, 0xa0, 0x24, 0xad, 0x6a, 0x49, 0xe8, 0x00, 0xba, 0x07, 0x71, 0xca,
	0x02, 0x26, 0x33, 0x9e, 0x4a, 0xec, 0x32, 0x9e, 0xab, 0x2c, 0x57, 0x9a, 0x6b, 0xa2, 0x77, 0x38,
	0xf4, 0x19, 0xf8, 0xba, 0x50, 0xf7, 0xa2, 0x88, 0xe7, 0x29, 0x42, 0x11, 0xb3, 0x07, 0x18, 0xff,
	0x75, 0x85, 0xc2, 0x42, 0x6c, 0xe2, 0xb1, 0xa4, 0xbe, 0x74, 0x49, 0x3c, 0x89, 0x8b, 0x88, 0x9a,
	0x41, 0x41, 0xd0, 0x1f, 0x3d, 0x68, 0x15, 0x37, 0x8e, 0xdc, 0x86, 0x36, 0x56, 0x63, 0x94, 0x4f,
	0xcc, 0xbb, 0x7b, 0xb5, 0x92, 0xe5, 0x51, 0x3e, 0x99, 0x84, 0x62, 0x1a, 0x94, 0x5a, 0xe4, 0x26,
	0xb4, 0xa4, 0x0a, 0x8f, 0x98, 0x7d, 0x36, 0xd7, 0xac, 0xfe, 0x48, 0x73, 0x03, 0x23, 0xd4, 0x61,
	0xc5, 0x72, 0x3f, 0xdd, 0xe5, 0xa9, 0xcc, 0x13, 0x74, 0xdf, 0x0e, 0x1c, 0x0e, 0xfd, 0xcb, 0x83,
	0x26, 0x5a, 0x68, 0x8c, 0x68, 0x63, 0x42, 0x2a, 0x08, 0xcd, 0x65, 0x42, 0x70, 0x61, 0xdb, 0x05,
	0x09, 0x3d, 0x52, 0x24, 0x02, 0x37, 0x01, 0x19, 0x4a, 0x27, 0x7c, 0xc2, 0xa4, 0x44, 0x58, 0x8d,
	0xcd, 0xba, 0x4e, 0xb8, 0xa5, 0xc9, 0x36, 0x74, 0xa4, 0x0a, 0x85, 0x7a, 0x1e, 0x9b, 0x4a, 0xe9,
	0xdb, 0x59, 0xcc, 0xbd, 0x81, 0x9d, 0x7b, 0x83, 0xe7, 0x76, 0xee, 0x05, 0x33, 0x65, 0x72, 0x03,
	0xd6, 0x10, 0xcc, 0xfd, 0x5c, 0xe0, 0xd4, 0xc4, 0x5a, 0x7a, 0x41, 0x95, 0x49, 0x7f, 0xaf, 0x41,
	0xd7, 0xcd, 0xd5, 0xc2, 0x26, 0xba, 0x06, 0xad, 0x57, 0x61, 0x9c, 0xb0, 0xa2, 0x87, 0xda, 0x81,
	0xa1, 0x34, 0x38, 0xcc, 0x2c, 0x82, 0xab, 0xbf, 0x19, 0x5c, 0xa9, 0xec, 0x16, 0xbd, 0x51, 0x2d,
	0xfa, 0x0d, 0x58, 0x43, 0xb5, 0x12, 0x76, 0xb3, 0x80, 0x5d, 0x61, 0x96, 0x17, 0xa9, 0xe5, 0x5c,
	0xa4, 0xd9, 0xc4, 0x5e, 0x75, 0x27, 0xb6, 0xfb, 0x04, 0xb4, 0x2b, 0x4f, 0x80, 0xc6, 0x7f, 0x9a,
	0xb3, 0x9c, 0x21, 0xfe, 0xce, 0x9b, 0xf1, 0x97, 0xca, 0xf4, 0x2e, 0x74, 0x8a, 0x84, 0xc5, 0x4c,
	0x92, 0x5b, 0xd0, 0x90, 0xf9, 0xc4, 0x3e, 0x1e, 0x8b, 0xaf, 0x20, 0x6a, 0xd0, 0x13, 0xf0, 0x9f,
	0xf2, 0x24, 0x09, 0xd8, 0x69, 0xce, 0xa4, 0x72, 0xb3, 0xe0, 0x55, 0xb3, 0x60, 0xe3, 0xab, 0x39,
	0xf1, 0x11, 0x68, 0x44, 0x82, 0xa7, 0xb6, 0x8f, 0xf5, 0xbf, 0xbe, 0x3a, 0x45, 0x94, 0x4c, 0xda,
	0x3e, 0xb6, 0x34, 0x1d, 0x42, 0x53, 0x3b, 0x93, 0xe4, 0x7d, 0x68, 0x66, 0xfa, 0xc7, 0x00, 0x2c,
	0xb7, 0x0c, 0x07, 0x4a, 0x50, 0x68, 0x0c, 0xff, 0x6c, 0x83, 0xbf, 0xa7, 0x77, 0xb5, 0x6f, 0x70,
	0x57, 0x23, 0x4f, 0xc0, 0xdf, 0x63, 0xaa, 0x1c, 0xf0, 0xd7, 0xce, 0x65, 0xe7, 0x81, 0xde, 0xd6,
	0xfa, 0x8b, 0x16, 0x17, 0x7a, 0xf9, 0xa7, 0xbf, 0xff, 0xf9, 0xb5, 0xe6, 0x93, 0xce, 0xd6, 0xd9,
	0x9d, 0xad, 0x08, 0xed, 0x9f, 0x80, 0x3f, 0x72, 0x8e, 0x3b, 0xb7, 0xb4, 0xf4, 0x97, 0x38, 0xa0,
	0x57, 0xf1, 0xac, 0x75, 0x3a, 0x3b, 0x6b, 0xc7, 0xfb, 0x80, 0x7c, 0x06, 0x9d, 0xdd, 0x63, 0x16,
	0x9d, 0xec, 0xf2, 0x34, 0x5d, 0x8a, 0x6d, 0xd9, 0x91, 0x2b, 0x64, 0x17, 0x36, 0x0a, 0x34, 0x4f,
	0x67, 0x3b, 0xce, 0x5b, 0xe5, 0x83, 0xe0, 0xae, 0x4d, 0x17, 0x1c, 0x72, 0x0f, 0xba, 0x7b, 0x4c,
	0xcd, 0xf6, 0x81, 0x65, 0x30, 0x96, 0x6d, 0x84, 0x74, 0x85, 0x7c, 0x02, 0xdd, 0x91, 0x7b, 0xc4,
	0xf9, 0xcd, 0xe3, 0x02, 0xff, 0x5f, 0x62, 0x85, 0xec, 0x4a, 0xfa, 0x66, 0xf7, 0x73, 0xcb, 0x2b,
	0x5d, 0x21, 0x1f, 0x99, 0x17, 0xc0, 0xcc, 0x1c, 0x42, 0x2a, 0x17, 0x18, 0x47, 0x6b, 0x7f, 0xbd,
	0x3a, 0x11, 0xd1, 0xaa, 0x71, 0xc0, 0x8f, 0xe4, 0x42, 0xed, 0xb2, 0x05, 0xdc, 0x59, 0x41, 0x57,
	0x6e, 0x7b, 0xe4, 0x53, 0xd8, 0x38, 0x08, 0xa5, 0x7a, 0xc8, 0x5e, 0xcf, 0xda, 0xe7, 0x8a, 0x1b,
	0xae, 0x99, 0x14, 0xfd, 0x32, 0x07, 0xa5, 0x1e, 0x5d, 0x21, 0x43, 0xe8, 0xec, 0x31, 0x65, 0x1e,
	0xff, 0x2b, 0xce, 0xd3, 0x6d, 0xd7, 0x8f, 0x19, 0xce, 0x82, 0x49, 0x57, 0xc8, 0x0e, 0x74, 0x5e,
	0x86, 0x2a, 0x3a, 0xc6, 0x45, 0x7f, 0xa1, 0xab, 0xe5, 0xb9, 0xfd, 0xdc, 0x4e, 0x63, 0xad, 0x9d,
	0x8e, 0x1f, 0xe9, 0xb7, 0x70, 0xa3, 0x3a, 0xc7, 0xd9, 0xe9, 0x05, 0xd1, 0x7e, 0x0c, 0xed, 0xa2,
	0xc7, 0x5c, 0xd7, 0x4e, 0xd7, 0x5d, 0xe0, 0xfa, 0x0b, 0x58, 0xbf, 0xcf, 0x12, 0xa6, 0xd8, 0xff,
	0x3d, 0x60, 0x07, 0xe0, 0x61, 0x9c, 0x8e, 0x5f, 0x32, 0x71, 0xc2, 0xc4, 0x02, 0xd4, 0x4b, 0xf7,
	0x11, 0xb4, 0xbd, 0x74, 0x10, 0x4b, 0xa5, 0x1d, 0x31, 0x0c, 0x7e, 0xf9, 0xbd, 0x5a, 0x73, 0x51,
	0x49, 0xba, 0x72, 0xd8, 0x42, 0x85, 0x0f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x75, 0x45,
	0x4d, 0xf3, 0x0d, 0x00, 0x00,
}
