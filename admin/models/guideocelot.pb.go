// Code generated by protoc-gen-go. DO NOT EDIT.
// source: guideocelot.proto

/*
Package models is a generated protocol buffer package.

It is generated from these files:
	guideocelot.proto

It has these top-level messages:
	BuildReq
	AllCredsWrapper
	CredWrapper
	SSHKeyWrapper
	VCSCreds
	RepoCredWrapper
	RepoCreds
	K8SCreds
	K8SCredsWrapper
	StatusQuery
	BuildQuery
	Builds
	BuildRuntimeInfo
	LineResponse
	RepoAccount
	Status
	Stage
	BuildSummary
	Summaries
	PollRequest
	Polls
*/
package models

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf2 "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BuildReq struct {
	// acctRepo is the ocelot account to which the creds are uploaded and the repository you wish to operate on, in the form account/repo
	AcctRepo string `protobuf:"bytes,1,opt,name=acctRepo" json:"acctRepo,omitempty"`
	// hash is the git hash to trigger.
	Hash string `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
	// branch is the branch that corresponds to the git hash. if the git hash has never been built by ocelot, this field is required.
	Branch string `protobuf:"bytes,3,opt,name=branch" json:"branch,omitempty"`
}

func (m *BuildReq) Reset()                    { *m = BuildReq{} }
func (m *BuildReq) String() string            { return proto.CompactTextString(m) }
func (*BuildReq) ProtoMessage()               {}
func (*BuildReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BuildReq) GetAcctRepo() string {
	if m != nil {
		return m.AcctRepo
	}
	return ""
}

func (m *BuildReq) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildReq) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

type AllCredsWrapper struct {
	// All repository credentials for integrations
	RepoCreds *RepoCredWrapper `protobuf:"bytes,1,opt,name=repoCreds" json:"repoCreds,omitempty"`
	// All VCS credentials for building
	VcsCreds *CredWrapper `protobuf:"bytes,3,opt,name=vcsCreds" json:"vcsCreds,omitempty"`
}

func (m *AllCredsWrapper) Reset()                    { *m = AllCredsWrapper{} }
func (m *AllCredsWrapper) String() string            { return proto.CompactTextString(m) }
func (*AllCredsWrapper) ProtoMessage()               {}
func (*AllCredsWrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AllCredsWrapper) GetRepoCreds() *RepoCredWrapper {
	if m != nil {
		return m.RepoCreds
	}
	return nil
}

func (m *AllCredsWrapper) GetVcsCreds() *CredWrapper {
	if m != nil {
		return m.VcsCreds
	}
	return nil
}

// just a container for a list of VCSCreds
type CredWrapper struct {
	Vcs []*VCSCreds `protobuf:"bytes,2,rep,name=vcs" json:"vcs,omitempty"`
}

func (m *CredWrapper) Reset()                    { *m = CredWrapper{} }
func (m *CredWrapper) String() string            { return proto.CompactTextString(m) }
func (*CredWrapper) ProtoMessage()               {}
func (*CredWrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CredWrapper) GetVcs() []*VCSCreds {
	if m != nil {
		return m.Vcs
	}
	return nil
}

type SSHKeyWrapper struct {
	// account name to associate ssh key with
	AcctName string `protobuf:"bytes,1,opt,name=acctName" json:"acctName,omitempty"`
	// the contents of the private key
	PrivateKey []byte `protobuf:"bytes,2,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	Type       string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
}

func (m *SSHKeyWrapper) Reset()                    { *m = SSHKeyWrapper{} }
func (m *SSHKeyWrapper) String() string            { return proto.CompactTextString(m) }
func (*SSHKeyWrapper) ProtoMessage()               {}
func (*SSHKeyWrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SSHKeyWrapper) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *SSHKeyWrapper) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *SSHKeyWrapper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type VCSCreds struct {
	// clientId is generated by creating an oAuth consumer in bitbucket. it is required to generate tokens.
	ClientId string `protobuf:"bytes,1,opt,name=clientId" json:"clientId,omitempty"`
	// clientSecret is generated by creating an oAuth consumer in bitbucket. it is required to generate tokens.
	ClientSecret string `protobuf:"bytes,2,opt,name=clientSecret" json:"clientSecret,omitempty"`
	// tokenUrl is the url at which to retrieve the token
	TokenURL string `protobuf:"bytes,3,opt,name=tokenURL" json:"tokenURL,omitempty"`
	// acctName is the account to associate the VCSCred with. Must be the account name of the owner of the repository they wish to track (ie level11consulting)
	AcctName string `protobuf:"bytes,4,opt,name=acctName" json:"acctName,omitempty"`
	Type     string `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	// just a string that says whether or not there is an ssh key on file
	SshFileLoc string `protobuf:"bytes,6,opt,name=sshFileLoc" json:"sshFileLoc,omitempty"`
}

func (m *VCSCreds) Reset()                    { *m = VCSCreds{} }
func (m *VCSCreds) String() string            { return proto.CompactTextString(m) }
func (*VCSCreds) ProtoMessage()               {}
func (*VCSCreds) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *VCSCreds) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *VCSCreds) GetClientSecret() string {
	if m != nil {
		return m.ClientSecret
	}
	return ""
}

func (m *VCSCreds) GetTokenURL() string {
	if m != nil {
		return m.TokenURL
	}
	return ""
}

func (m *VCSCreds) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *VCSCreds) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *VCSCreds) GetSshFileLoc() string {
	if m != nil {
		return m.SshFileLoc
	}
	return ""
}

// container for list of repo creds
type RepoCredWrapper struct {
	Repo []*RepoCreds `protobuf:"bytes,3,rep,name=repo" json:"repo,omitempty"`
}

func (m *RepoCredWrapper) Reset()                    { *m = RepoCredWrapper{} }
func (m *RepoCredWrapper) String() string            { return proto.CompactTextString(m) }
func (*RepoCredWrapper) ProtoMessage()               {}
func (*RepoCredWrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RepoCredWrapper) GetRepo() []*RepoCreds {
	if m != nil {
		return m.Repo
	}
	return nil
}

type RepoCreds struct {
	// username of repository
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	// password of repository
	Password string            `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	RepoUrl  map[string]string `protobuf:"bytes,6,rep,name=repoUrl" json:"repoUrl,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// account name (same as from vcs)
	AcctName string `protobuf:"bytes,4,opt,name=acctName" json:"acctName,omitempty"`
	// todo: should this be an enum?
	Type        string `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	ProjectName string `protobuf:"bytes,7,opt,name=projectName" json:"projectName,omitempty"`
}

func (m *RepoCreds) Reset()                    { *m = RepoCreds{} }
func (m *RepoCreds) String() string            { return proto.CompactTextString(m) }
func (*RepoCreds) ProtoMessage()               {}
func (*RepoCreds) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RepoCreds) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RepoCreds) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RepoCreds) GetRepoUrl() map[string]string {
	if m != nil {
		return m.RepoUrl
	}
	return nil
}

func (m *RepoCreds) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *RepoCreds) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RepoCreds) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

type K8SCreds struct {
	AcctName string `protobuf:"bytes,1,opt,name=acctName" json:"acctName,omitempty"`
	// todo: should we also add option for multiple kubeconfigs? how would that be organized?
	K8SContents string `protobuf:"bytes,2,opt,name=k8sContents" json:"k8sContents,omitempty"`
}

func (m *K8SCreds) Reset()                    { *m = K8SCreds{} }
func (m *K8SCreds) String() string            { return proto.CompactTextString(m) }
func (*K8SCreds) ProtoMessage()               {}
func (*K8SCreds) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *K8SCreds) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *K8SCreds) GetK8SContents() string {
	if m != nil {
		return m.K8SContents
	}
	return ""
}

type K8SCredsWrapper struct {
	K8SCreds []*K8SCreds `protobuf:"bytes,2,rep,name=K8SCreds" json:"K8SCreds,omitempty"`
}

func (m *K8SCredsWrapper) Reset()                    { *m = K8SCredsWrapper{} }
func (m *K8SCredsWrapper) String() string            { return proto.CompactTextString(m) }
func (*K8SCredsWrapper) ProtoMessage()               {}
func (*K8SCredsWrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *K8SCredsWrapper) GetK8SCreds() []*K8SCreds {
	if m != nil {
		return m.K8SCreds
	}
	return nil
}

type StatusQuery struct {
	// hash is the git hash to get status of
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	// acctName is the corresponding account that the hash is attached to
	AcctName string `protobuf:"bytes,2,opt,name=acctName" json:"acctName,omitempty"`
	// repoName is the corresponding repo name that the hash is attached to
	RepoName string `protobuf:"bytes,3,opt,name=repoName" json:"repoName,omitempty"`
	// partialRepo is just the first n letters of repo
	PartialRepo string `protobuf:"bytes,4,opt,name=partialRepo" json:"partialRepo,omitempty"`
}

func (m *StatusQuery) Reset()                    { *m = StatusQuery{} }
func (m *StatusQuery) String() string            { return proto.CompactTextString(m) }
func (*StatusQuery) ProtoMessage()               {}
func (*StatusQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *StatusQuery) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *StatusQuery) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *StatusQuery) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *StatusQuery) GetPartialRepo() string {
	if m != nil {
		return m.PartialRepo
	}
	return ""
}

type BuildQuery struct {
	Hash    string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	BuildId int64  `protobuf:"varint,2,opt,name=buildId" json:"buildId,omitempty"`
}

func (m *BuildQuery) Reset()                    { *m = BuildQuery{} }
func (m *BuildQuery) String() string            { return proto.CompactTextString(m) }
func (*BuildQuery) ProtoMessage()               {}
func (*BuildQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BuildQuery) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildQuery) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

type Builds struct {
	Builds map[string]*BuildRuntimeInfo `protobuf:"bytes,1,rep,name=builds" json:"builds,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Builds) Reset()                    { *m = Builds{} }
func (m *Builds) String() string            { return proto.CompactTextString(m) }
func (*Builds) ProtoMessage()               {}
func (*Builds) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Builds) GetBuilds() map[string]*BuildRuntimeInfo {
	if m != nil {
		return m.Builds
	}
	return nil
}

type BuildRuntimeInfo struct {
	Done     bool   `protobuf:"varint,1,opt,name=done" json:"done,omitempty"`
	Ip       string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	GrpcPort string `protobuf:"bytes,3,opt,name=grpcPort" json:"grpcPort,omitempty"`
	Hash     string `protobuf:"bytes,4,opt,name=hash" json:"hash,omitempty"`
	AcctName string `protobuf:"bytes,5,opt,name=acctName" json:"acctName,omitempty"`
	RepoName string `protobuf:"bytes,6,opt,name=repoName" json:"repoName,omitempty"`
	WsPort   string `protobuf:"bytes,7,opt,name=wsPort" json:"wsPort,omitempty"`
}

func (m *BuildRuntimeInfo) Reset()                    { *m = BuildRuntimeInfo{} }
func (m *BuildRuntimeInfo) String() string            { return proto.CompactTextString(m) }
func (*BuildRuntimeInfo) ProtoMessage()               {}
func (*BuildRuntimeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *BuildRuntimeInfo) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func (m *BuildRuntimeInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *BuildRuntimeInfo) GetGrpcPort() string {
	if m != nil {
		return m.GrpcPort
	}
	return ""
}

func (m *BuildRuntimeInfo) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildRuntimeInfo) GetAcctName() string {
	if m != nil {
		return m.AcctName
	}
	return ""
}

func (m *BuildRuntimeInfo) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *BuildRuntimeInfo) GetWsPort() string {
	if m != nil {
		return m.WsPort
	}
	return ""
}

type LineResponse struct {
	OutputLine string `protobuf:"bytes,1,opt,name=outputLine" json:"outputLine,omitempty"`
}

func (m *LineResponse) Reset()                    { *m = LineResponse{} }
func (m *LineResponse) String() string            { return proto.CompactTextString(m) }
func (*LineResponse) ProtoMessage()               {}
func (*LineResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *LineResponse) GetOutputLine() string {
	if m != nil {
		return m.OutputLine
	}
	return ""
}

type RepoAccount struct {
	Repo    string `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Account string `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	Limit   int32  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
}

func (m *RepoAccount) Reset()                    { *m = RepoAccount{} }
func (m *RepoAccount) String() string            { return proto.CompactTextString(m) }
func (*RepoAccount) ProtoMessage()               {}
func (*RepoAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *RepoAccount) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *RepoAccount) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RepoAccount) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type Status struct {
	BuildSum   *BuildSummary `protobuf:"bytes,1,opt,name=buildSum" json:"buildSum,omitempty"`
	Stages     []*Stage      `protobuf:"bytes,2,rep,name=stages" json:"stages,omitempty"`
	IsInConsul bool          `protobuf:"varint,3,opt,name=isInConsul" json:"isInConsul,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Status) GetBuildSum() *BuildSummary {
	if m != nil {
		return m.BuildSum
	}
	return nil
}

func (m *Status) GetStages() []*Stage {
	if m != nil {
		return m.Stages
	}
	return nil
}

func (m *Status) GetIsInConsul() bool {
	if m != nil {
		return m.IsInConsul
	}
	return false
}

type Stage struct {
	Stage         string                      `protobuf:"bytes,1,opt,name=stage" json:"stage,omitempty"`
	Error         string                      `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Status        int32                       `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	Messages      []string                    `protobuf:"bytes,4,rep,name=messages" json:"messages,omitempty"`
	StartTime     *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=startTime" json:"startTime,omitempty"`
	StageDuration float64                     `protobuf:"fixed64,6,opt,name=stageDuration" json:"stageDuration,omitempty"`
}

func (m *Stage) Reset()                    { *m = Stage{} }
func (m *Stage) String() string            { return proto.CompactTextString(m) }
func (*Stage) ProtoMessage()               {}
func (*Stage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Stage) GetStage() string {
	if m != nil {
		return m.Stage
	}
	return ""
}

func (m *Stage) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Stage) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Stage) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *Stage) GetStartTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Stage) GetStageDuration() float64 {
	if m != nil {
		return m.StageDuration
	}
	return 0
}

type BuildSummary struct {
	Hash          string                      `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Failed        bool                        `protobuf:"varint,2,opt,name=failed" json:"failed,omitempty"`
	BuildTime     *google_protobuf2.Timestamp `protobuf:"bytes,3,opt,name=buildTime" json:"buildTime,omitempty"`
	Account       string                      `protobuf:"bytes,4,opt,name=account" json:"account,omitempty"`
	BuildDuration float64                     `protobuf:"fixed64,5,opt,name=buildDuration" json:"buildDuration,omitempty"`
	Repo          string                      `protobuf:"bytes,6,opt,name=repo" json:"repo,omitempty"`
	Branch        string                      `protobuf:"bytes,7,opt,name=branch" json:"branch,omitempty"`
	BuildId       int64                       `protobuf:"varint,8,opt,name=buildId" json:"buildId,omitempty"`
	QueueTime     *google_protobuf2.Timestamp `protobuf:"bytes,9,opt,name=queueTime" json:"queueTime,omitempty"`
}

func (m *BuildSummary) Reset()                    { *m = BuildSummary{} }
func (m *BuildSummary) String() string            { return proto.CompactTextString(m) }
func (*BuildSummary) ProtoMessage()               {}
func (*BuildSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *BuildSummary) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BuildSummary) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

func (m *BuildSummary) GetBuildTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.BuildTime
	}
	return nil
}

func (m *BuildSummary) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *BuildSummary) GetBuildDuration() float64 {
	if m != nil {
		return m.BuildDuration
	}
	return 0
}

func (m *BuildSummary) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *BuildSummary) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *BuildSummary) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

func (m *BuildSummary) GetQueueTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.QueueTime
	}
	return nil
}

type Summaries struct {
	Sums []*BuildSummary `protobuf:"bytes,1,rep,name=sums" json:"sums,omitempty"`
}

func (m *Summaries) Reset()                    { *m = Summaries{} }
func (m *Summaries) String() string            { return proto.CompactTextString(m) }
func (*Summaries) ProtoMessage()               {}
func (*Summaries) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Summaries) GetSums() []*BuildSummary {
	if m != nil {
		return m.Sums
	}
	return nil
}

type PollRequest struct {
	Account      string                      `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Repo         string                      `protobuf:"bytes,2,opt,name=repo" json:"repo,omitempty"`
	Cron         string                      `protobuf:"bytes,4,opt,name=cron" json:"cron,omitempty"`
	Branches     string                      `protobuf:"bytes,5,opt,name=branches" json:"branches,omitempty"`
	LastCronTime *google_protobuf2.Timestamp `protobuf:"bytes,6,opt,name=lastCronTime" json:"lastCronTime,omitempty"`
	LastHashes   map[string]string           `protobuf:"bytes,7,rep,name=lastHashes" json:"lastHashes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PollRequest) Reset()                    { *m = PollRequest{} }
func (m *PollRequest) String() string            { return proto.CompactTextString(m) }
func (*PollRequest) ProtoMessage()               {}
func (*PollRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *PollRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *PollRequest) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *PollRequest) GetCron() string {
	if m != nil {
		return m.Cron
	}
	return ""
}

func (m *PollRequest) GetBranches() string {
	if m != nil {
		return m.Branches
	}
	return ""
}

func (m *PollRequest) GetLastCronTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.LastCronTime
	}
	return nil
}

func (m *PollRequest) GetLastHashes() map[string]string {
	if m != nil {
		return m.LastHashes
	}
	return nil
}

type Polls struct {
	Polls []*PollRequest `protobuf:"bytes,1,rep,name=polls" json:"polls,omitempty"`
}

func (m *Polls) Reset()                    { *m = Polls{} }
func (m *Polls) String() string            { return proto.CompactTextString(m) }
func (*Polls) ProtoMessage()               {}
func (*Polls) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Polls) GetPolls() []*PollRequest {
	if m != nil {
		return m.Polls
	}
	return nil
}

func init() {
	proto.RegisterType((*BuildReq)(nil), "models.BuildReq")
	proto.RegisterType((*AllCredsWrapper)(nil), "models.AllCredsWrapper")
	proto.RegisterType((*CredWrapper)(nil), "models.CredWrapper")
	proto.RegisterType((*SSHKeyWrapper)(nil), "models.SSHKeyWrapper")
	proto.RegisterType((*VCSCreds)(nil), "models.VCSCreds")
	proto.RegisterType((*RepoCredWrapper)(nil), "models.RepoCredWrapper")
	proto.RegisterType((*RepoCreds)(nil), "models.RepoCreds")
	proto.RegisterType((*K8SCreds)(nil), "models.K8SCreds")
	proto.RegisterType((*K8SCredsWrapper)(nil), "models.K8SCredsWrapper")
	proto.RegisterType((*StatusQuery)(nil), "models.StatusQuery")
	proto.RegisterType((*BuildQuery)(nil), "models.BuildQuery")
	proto.RegisterType((*Builds)(nil), "models.Builds")
	proto.RegisterType((*BuildRuntimeInfo)(nil), "models.BuildRuntimeInfo")
	proto.RegisterType((*LineResponse)(nil), "models.LineResponse")
	proto.RegisterType((*RepoAccount)(nil), "models.RepoAccount")
	proto.RegisterType((*Status)(nil), "models.Status")
	proto.RegisterType((*Stage)(nil), "models.Stage")
	proto.RegisterType((*BuildSummary)(nil), "models.BuildSummary")
	proto.RegisterType((*Summaries)(nil), "models.Summaries")
	proto.RegisterType((*PollRequest)(nil), "models.PollRequest")
	proto.RegisterType((*Polls)(nil), "models.Polls")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GuideOcelot service

type GuideOcelotClient interface {
	GetVCSCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*CredWrapper, error)
	SetVCSCreds(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	CheckConn(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	SetVCSPrivateKey(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetRepoCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*RepoCredWrapper, error)
	SetRepoCreds(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	SetK8SCreds(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetK8SCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*K8SCredsWrapper, error)
	GetAllCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*AllCredsWrapper, error)
	BuildRuntime(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (*Builds, error)
	Logs(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (GuideOcelot_LogsClient, error)
	LastFewSummaries(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*Summaries, error)
	GetStatus(ctx context.Context, in *StatusQuery, opts ...grpc.CallOption) (*Status, error)
	WatchRepo(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	BuildRepoAndHash(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (GuideOcelot_BuildRepoAndHashClient, error)
	PollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	DeletePollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	ListPolledRepos(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Polls, error)
	FindWerker(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (*BuildRuntimeInfo, error)
}

type guideOcelotClient struct {
	cc *grpc.ClientConn
}

func NewGuideOcelotClient(cc *grpc.ClientConn) GuideOcelotClient {
	return &guideOcelotClient{cc}
}

func (c *guideOcelotClient) GetVCSCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*CredWrapper, error) {
	out := new(CredWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetVCSCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetVCSCreds(ctx context.Context, in *VCSCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetVCSCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) CheckConn(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/CheckConn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetVCSPrivateKey(ctx context.Context, in *SSHKeyWrapper, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetVCSPrivateKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetRepoCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*RepoCredWrapper, error) {
	out := new(RepoCredWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetRepoCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetRepoCreds(ctx context.Context, in *RepoCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetRepoCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) SetK8SCreds(ctx context.Context, in *K8SCreds, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/SetK8SCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetK8SCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*K8SCredsWrapper, error) {
	out := new(K8SCredsWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetK8SCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetAllCreds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*AllCredsWrapper, error) {
	out := new(AllCredsWrapper)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetAllCreds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) BuildRuntime(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (*Builds, error) {
	out := new(Builds)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/BuildRuntime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) Logs(ctx context.Context, in *BuildQuery, opts ...grpc.CallOption) (GuideOcelot_LogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GuideOcelot_serviceDesc.Streams[0], c.cc, "/models.GuideOcelot/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &guideOcelotLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GuideOcelot_LogsClient interface {
	Recv() (*LineResponse, error)
	grpc.ClientStream
}

type guideOcelotLogsClient struct {
	grpc.ClientStream
}

func (x *guideOcelotLogsClient) Recv() (*LineResponse, error) {
	m := new(LineResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *guideOcelotClient) LastFewSummaries(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*Summaries, error) {
	out := new(Summaries)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/LastFewSummaries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) GetStatus(ctx context.Context, in *StatusQuery, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) WatchRepo(ctx context.Context, in *RepoAccount, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/WatchRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) BuildRepoAndHash(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (GuideOcelot_BuildRepoAndHashClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GuideOcelot_serviceDesc.Streams[1], c.cc, "/models.GuideOcelot/BuildRepoAndHash", opts...)
	if err != nil {
		return nil, err
	}
	x := &guideOcelotBuildRepoAndHashClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GuideOcelot_BuildRepoAndHashClient interface {
	Recv() (*LineResponse, error)
	grpc.ClientStream
}

type guideOcelotBuildRepoAndHashClient struct {
	grpc.ClientStream
}

func (x *guideOcelotBuildRepoAndHashClient) Recv() (*LineResponse, error) {
	m := new(LineResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *guideOcelotClient) PollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/PollRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) DeletePollRepo(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/DeletePollRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) ListPolledRepos(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Polls, error) {
	out := new(Polls)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/ListPolledRepos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideOcelotClient) FindWerker(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (*BuildRuntimeInfo, error) {
	out := new(BuildRuntimeInfo)
	err := grpc.Invoke(ctx, "/models.GuideOcelot/FindWerker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GuideOcelot service

type GuideOcelotServer interface {
	GetVCSCreds(context.Context, *google_protobuf.Empty) (*CredWrapper, error)
	SetVCSCreds(context.Context, *VCSCreds) (*google_protobuf.Empty, error)
	CheckConn(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
	SetVCSPrivateKey(context.Context, *SSHKeyWrapper) (*google_protobuf.Empty, error)
	GetRepoCreds(context.Context, *google_protobuf.Empty) (*RepoCredWrapper, error)
	SetRepoCreds(context.Context, *RepoCreds) (*google_protobuf.Empty, error)
	SetK8SCreds(context.Context, *K8SCreds) (*google_protobuf.Empty, error)
	GetK8SCreds(context.Context, *google_protobuf.Empty) (*K8SCredsWrapper, error)
	GetAllCreds(context.Context, *google_protobuf.Empty) (*AllCredsWrapper, error)
	BuildRuntime(context.Context, *BuildQuery) (*Builds, error)
	Logs(*BuildQuery, GuideOcelot_LogsServer) error
	LastFewSummaries(context.Context, *RepoAccount) (*Summaries, error)
	GetStatus(context.Context, *StatusQuery) (*Status, error)
	WatchRepo(context.Context, *RepoAccount) (*google_protobuf.Empty, error)
	BuildRepoAndHash(*BuildReq, GuideOcelot_BuildRepoAndHashServer) error
	PollRepo(context.Context, *PollRequest) (*google_protobuf.Empty, error)
	DeletePollRepo(context.Context, *PollRequest) (*google_protobuf.Empty, error)
	ListPolledRepos(context.Context, *google_protobuf.Empty) (*Polls, error)
	FindWerker(context.Context, *BuildReq) (*BuildRuntimeInfo, error)
}

func RegisterGuideOcelotServer(s *grpc.Server, srv GuideOcelotServer) {
	s.RegisterService(&_GuideOcelot_serviceDesc, srv)
}

func _GuideOcelot_GetVCSCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetVCSCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetVCSCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetVCSCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetVCSCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCSCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetVCSCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetVCSCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetVCSCreds(ctx, req.(*VCSCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_CheckConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).CheckConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/CheckConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).CheckConn(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetVCSPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKeyWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetVCSPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetVCSPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetVCSPrivateKey(ctx, req.(*SSHKeyWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetRepoCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetRepoCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetRepoCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetRepoCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetRepoCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetRepoCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetRepoCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetRepoCreds(ctx, req.(*RepoCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_SetK8SCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).SetK8SCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/SetK8SCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).SetK8SCreds(ctx, req.(*K8SCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetK8SCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetK8SCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetK8SCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetK8SCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetAllCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetAllCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetAllCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetAllCreds(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_BuildRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).BuildRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/BuildRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).BuildRuntime(ctx, req.(*BuildQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GuideOcelotServer).Logs(m, &guideOcelotLogsServer{stream})
}

type GuideOcelot_LogsServer interface {
	Send(*LineResponse) error
	grpc.ServerStream
}

type guideOcelotLogsServer struct {
	grpc.ServerStream
}

func (x *guideOcelotLogsServer) Send(m *LineResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GuideOcelot_LastFewSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).LastFewSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/LastFewSummaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).LastFewSummaries(ctx, req.(*RepoAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).GetStatus(ctx, req.(*StatusQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_WatchRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).WatchRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/WatchRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).WatchRepo(ctx, req.(*RepoAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_BuildRepoAndHash_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GuideOcelotServer).BuildRepoAndHash(m, &guideOcelotBuildRepoAndHashServer{stream})
}

type GuideOcelot_BuildRepoAndHashServer interface {
	Send(*LineResponse) error
	grpc.ServerStream
}

type guideOcelotBuildRepoAndHashServer struct {
	grpc.ServerStream
}

func (x *guideOcelotBuildRepoAndHashServer) Send(m *LineResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GuideOcelot_PollRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).PollRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/PollRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).PollRepo(ctx, req.(*PollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_DeletePollRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).DeletePollRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/DeletePollRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).DeletePollRepo(ctx, req.(*PollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_ListPolledRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).ListPolledRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/ListPolledRepos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).ListPolledRepos(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideOcelot_FindWerker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideOcelotServer).FindWerker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.GuideOcelot/FindWerker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideOcelotServer).FindWerker(ctx, req.(*BuildReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GuideOcelot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "models.GuideOcelot",
	HandlerType: (*GuideOcelotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVCSCreds",
			Handler:    _GuideOcelot_GetVCSCreds_Handler,
		},
		{
			MethodName: "SetVCSCreds",
			Handler:    _GuideOcelot_SetVCSCreds_Handler,
		},
		{
			MethodName: "CheckConn",
			Handler:    _GuideOcelot_CheckConn_Handler,
		},
		{
			MethodName: "SetVCSPrivateKey",
			Handler:    _GuideOcelot_SetVCSPrivateKey_Handler,
		},
		{
			MethodName: "GetRepoCreds",
			Handler:    _GuideOcelot_GetRepoCreds_Handler,
		},
		{
			MethodName: "SetRepoCreds",
			Handler:    _GuideOcelot_SetRepoCreds_Handler,
		},
		{
			MethodName: "SetK8SCreds",
			Handler:    _GuideOcelot_SetK8SCreds_Handler,
		},
		{
			MethodName: "GetK8SCreds",
			Handler:    _GuideOcelot_GetK8SCreds_Handler,
		},
		{
			MethodName: "GetAllCreds",
			Handler:    _GuideOcelot_GetAllCreds_Handler,
		},
		{
			MethodName: "BuildRuntime",
			Handler:    _GuideOcelot_BuildRuntime_Handler,
		},
		{
			MethodName: "LastFewSummaries",
			Handler:    _GuideOcelot_LastFewSummaries_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _GuideOcelot_GetStatus_Handler,
		},
		{
			MethodName: "WatchRepo",
			Handler:    _GuideOcelot_WatchRepo_Handler,
		},
		{
			MethodName: "PollRepo",
			Handler:    _GuideOcelot_PollRepo_Handler,
		},
		{
			MethodName: "DeletePollRepo",
			Handler:    _GuideOcelot_DeletePollRepo_Handler,
		},
		{
			MethodName: "ListPolledRepos",
			Handler:    _GuideOcelot_ListPolledRepos_Handler,
		},
		{
			MethodName: "FindWerker",
			Handler:    _GuideOcelot_FindWerker_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _GuideOcelot_Logs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BuildRepoAndHash",
			Handler:       _GuideOcelot_BuildRepoAndHash_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "guideocelot.proto",
}

func init() { proto.RegisterFile("guideocelot.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0xdd, 0x6e, 0x1b, 0xc7,
	0xf5, 0xcf, 0x92, 0x12, 0x4d, 0x0d, 0x25, 0x4b, 0x1e, 0x25, 0xfa, 0xeb, 0xcf, 0x06, 0xe9, 0x60,
	0x9b, 0x00, 0xae, 0xa1, 0x90, 0xb6, 0xda, 0x00, 0x82, 0x80, 0xb4, 0x55, 0x14, 0x7f, 0xa8, 0x16,
	0x6a, 0x7b, 0x69, 0xc7, 0x77, 0x4d, 0x46, 0xcb, 0x43, 0x72, 0xcd, 0xe5, 0xce, 0x7a, 0x66, 0x56,
	0x02, 0xd1, 0xde, 0xb4, 0x40, 0xaf, 0x7a, 0x55, 0xf5, 0xaa, 0x4f, 0xd0, 0xab, 0x22, 0x37, 0x85,
	0xd1, 0x3e, 0x41, 0x1f, 0x20, 0x40, 0x9f, 0xa0, 0x97, 0x45, 0xfb, 0x0a, 0xc5, 0x9c, 0x99, 0x59,
	0x2e, 0x29, 0xb1, 0x46, 0x7a, 0xa5, 0x3d, 0x67, 0xce, 0x9c, 0xf9, 0x9d, 0x8f, 0x39, 0xf3, 0xa3,
	0xc8, 0xad, 0x61, 0x91, 0xf4, 0x41, 0xc4, 0x90, 0x0a, 0xdd, 0xc9, 0xa5, 0xd0, 0x82, 0x36, 0x26,
	0xa2, 0x0f, 0xa9, 0x6a, 0x7f, 0x67, 0x28, 0xc4, 0x30, 0x85, 0x2e, 0x6a, 0xcf, 0x8a, 0x41, 0x17,
	0x26, 0xb9, 0x9e, 0x5a, 0xa3, 0xf6, 0xfb, 0x6e, 0x91, 0xe7, 0x49, 0x97, 0x67, 0x99, 0xd0, 0x5c,
	0x27, 0x22, 0x53, 0x6e, 0xf5, 0xbb, 0x8b, 0x5b, 0x75, 0x32, 0x01, 0xa5, 0xf9, 0x24, 0x77, 0x06,
	0x7b, 0xf8, 0x27, 0xfe, 0x78, 0x08, 0xd9, 0xc7, 0xea, 0x82, 0x0f, 0x87, 0x20, 0xbb, 0x22, 0x47,
	0x17, 0x57, 0xdd, 0x85, 0x11, 0x69, 0x7e, 0x56, 0x24, 0x69, 0x3f, 0x82, 0xd7, 0xb4, 0x4d, 0x9a,
	0x3c, 0x8e, 0x75, 0x04, 0xb9, 0xd8, 0x0d, 0x58, 0x70, 0x7b, 0x2d, 0x2a, 0x65, 0x4a, 0xc9, 0xca,
	0x88, 0xab, 0xd1, 0x6e, 0x0d, 0xf5, 0xf8, 0x4d, 0x77, 0x48, 0xe3, 0x4c, 0xf2, 0x2c, 0x1e, 0xed,
	0xd6, 0x51, 0xeb, 0xa4, 0x70, 0x4a, 0x36, 0x8f, 0xd2, 0xf4, 0x58, 0x42, 0x5f, 0xbd, 0x94, 0x3c,
	0xcf, 0x41, 0xd2, 0x4f, 0xc8, 0x9a, 0x84, 0x5c, 0xa0, 0x0e, 0x7d, 0xb7, 0xf6, 0xff, 0xaf, 0x63,
	0x93, 0xd1, 0x89, 0xdc, 0x82, 0xb3, 0x8d, 0x66, 0x96, 0xb4, 0x4b, 0x9a, 0xe7, 0xb1, 0xb2, 0xbb,
	0xea, 0xb8, 0x6b, 0xdb, 0xef, 0xaa, 0xee, 0x28, 0x8d, 0xc2, 0x7b, 0xa4, 0x55, 0x59, 0xa0, 0x21,
	0xa9, 0x9f, 0xc7, 0x6a, 0xb7, 0xc6, 0xea, 0xb7, 0x5b, 0xfb, 0x5b, 0x7e, 0xeb, 0x17, 0xc7, 0x3d,
	0xb4, 0x8e, 0xcc, 0x62, 0xf8, 0x25, 0xd9, 0xe8, 0xf5, 0x1e, 0x3d, 0x86, 0xa9, 0xdf, 0xe4, 0xd2,
	0xf0, 0x33, 0x3e, 0x81, 0x6a, 0x1a, 0x8c, 0x4c, 0x3f, 0x20, 0x24, 0x97, 0xc9, 0x39, 0xd7, 0xf0,
	0x18, 0xa6, 0x98, 0x8c, 0xf5, 0xa8, 0xa2, 0x31, 0x69, 0xd2, 0xd3, 0x1c, 0x5c, 0x42, 0xf0, 0x3b,
	0x7c, 0x13, 0x90, 0xa6, 0x3f, 0xd2, 0x38, 0x8f, 0xd3, 0x04, 0x32, 0x7d, 0xd2, 0xf7, 0xce, 0xbd,
	0x4c, 0x43, 0xb2, 0x6e, 0xbf, 0x7b, 0x10, 0x4b, 0xd0, 0x2e, 0xd7, 0x73, 0x3a, 0xb3, 0x5f, 0x8b,
	0x31, 0x64, 0x2f, 0xa2, 0x53, 0x77, 0x48, 0x29, 0xcf, 0x01, 0x5f, 0x59, 0x00, 0xee, 0x81, 0xad,
	0xce, 0x80, 0x99, 0x60, 0x94, 0x1a, 0x3d, 0x48, 0x52, 0x38, 0x15, 0xf1, 0x6e, 0x03, 0x57, 0x2a,
	0x9a, 0xf0, 0x80, 0x6c, 0x2e, 0xd4, 0x86, 0x7e, 0x44, 0x56, 0x4c, 0x75, 0x76, 0xeb, 0x98, 0xd1,
	0x5b, 0x8b, 0x25, 0x54, 0x11, 0x2e, 0x87, 0xbf, 0xad, 0x91, 0xb5, 0x52, 0x67, 0x70, 0x15, 0x0a,
	0x64, 0x56, 0x49, 0xa8, 0x97, 0xcd, 0x5a, 0xce, 0x95, 0xba, 0x10, 0xb2, 0xef, 0xe2, 0x2d, 0x65,
	0x7a, 0x40, 0x6e, 0x18, 0x6f, 0x2f, 0x64, 0xba, 0xdb, 0xc0, 0xf3, 0x3e, 0xb8, 0x72, 0x1e, 0x7e,
	0xbd, 0x90, 0xe9, 0xfd, 0x4c, 0xcb, 0x69, 0xe4, 0xcd, 0xbf, 0x75, 0x26, 0x18, 0x69, 0xe5, 0x52,
	0xbc, 0x02, 0xb7, 0xe5, 0x06, 0x2e, 0x55, 0x55, 0xed, 0x43, 0xb2, 0x5e, 0x3d, 0x8a, 0x6e, 0x91,
	0xfa, 0x18, 0xa6, 0x2e, 0x1c, 0xf3, 0x49, 0xdf, 0x25, 0xab, 0xe7, 0x3c, 0x2d, 0xc0, 0x85, 0x61,
	0x85, 0xc3, 0xda, 0x41, 0x10, 0x3e, 0x22, 0xcd, 0xc7, 0x07, 0xb3, 0xfa, 0x2f, 0x6d, 0x2e, 0x46,
	0x5a, 0xe3, 0x03, 0x75, 0x2c, 0x32, 0x0d, 0x99, 0x56, 0xce, 0x4f, 0x55, 0x15, 0xfe, 0x98, 0x6c,
	0x7a, 0x4f, 0xbe, 0x22, 0x7b, 0x33, 0xe7, 0x8b, 0x7d, 0xee, 0xf5, 0x51, 0x69, 0x11, 0xfe, 0x82,
	0xb4, 0x7a, 0x9a, 0xeb, 0x42, 0x3d, 0x2b, 0x40, 0x4e, 0xcb, 0x5b, 0x1d, 0x54, 0x6e, 0x75, 0x15,
	0x61, 0x6d, 0x01, 0x61, 0x9b, 0x34, 0x4d, 0x8a, 0x71, 0xcd, 0x75, 0x9f, 0x97, 0x31, 0x87, 0x5c,
	0xea, 0x84, 0xa7, 0x38, 0x40, 0x56, 0x5c, 0x0e, 0x67, 0xaa, 0xf0, 0x90, 0x10, 0x9c, 0x35, 0xcb,
	0xcf, 0xde, 0x25, 0x37, 0xce, 0x8c, 0xc5, 0x89, 0x6d, 0x86, 0x7a, 0xe4, 0xc5, 0xf0, 0x77, 0x01,
	0x69, 0xe0, 0x66, 0x45, 0xf7, 0x49, 0x03, 0xb5, 0x66, 0x90, 0x98, 0x78, 0xdb, 0x3e, 0x5e, 0xbb,
	0xee, 0xfe, 0xd8, 0x8e, 0x70, 0x96, 0xed, 0x1e, 0x69, 0x55, 0xd4, 0xd7, 0x54, 0xaf, 0x53, 0xad,
	0x5e, 0x6b, 0x7f, 0x77, 0xce, 0x67, 0x54, 0x64, 0x66, 0xca, 0x9e, 0x64, 0x03, 0x51, 0xad, 0xeb,
	0x9b, 0x80, 0x6c, 0x2d, 0xae, 0x9b, 0xb0, 0xfa, 0x22, 0xb3, 0xc5, 0x6d, 0x46, 0xf8, 0x4d, 0x6f,
	0x92, 0x5a, 0x92, 0xbb, 0x64, 0xd6, 0x92, 0xdc, 0xa4, 0x71, 0x28, 0xf3, 0xf8, 0xa9, 0x90, 0xda,
	0xa7, 0xd1, 0xcb, 0x65, 0x5a, 0x56, 0x96, 0x94, 0x64, 0xf5, 0xbf, 0x94, 0xa4, 0xb1, 0x50, 0x92,
	0x1d, 0xd2, 0xb8, 0x50, 0x78, 0x8a, 0xed, 0x68, 0x27, 0x85, 0x1d, 0xb2, 0x7e, 0x9a, 0x64, 0x10,
	0x81, 0xca, 0x45, 0xa6, 0x70, 0x10, 0x88, 0x42, 0xe7, 0x85, 0x36, 0x5a, 0x97, 0x95, 0x8a, 0x26,
	0x7c, 0x46, 0x5a, 0xa6, 0x80, 0x47, 0x71, 0x2c, 0x8a, 0x0c, 0x21, 0xca, 0xd9, 0x1b, 0x81, 0xdf,
	0xa6, 0x72, 0xdc, 0x2e, 0xbb, 0x38, 0xbd, 0x68, 0xee, 0x45, 0x9a, 0x4c, 0x12, 0x1b, 0xe9, 0x6a,
	0x64, 0x85, 0xf0, 0x57, 0x01, 0x69, 0xd8, 0x4e, 0xa4, 0x77, 0x49, 0x13, 0xab, 0xd4, 0x2b, 0x26,
	0xee, 0x69, 0x78, 0x77, 0x2e, 0xfb, 0xbd, 0x62, 0x32, 0xe1, 0x72, 0x1a, 0x95, 0x56, 0xf4, 0x23,
	0xd2, 0x50, 0x9a, 0x0f, 0xc1, 0x77, 0xfc, 0x86, 0xb7, 0xef, 0x19, 0x6d, 0xe4, 0x16, 0x4d, 0x58,
	0x89, 0x3a, 0xc9, 0x8e, 0x45, 0xa6, 0x8a, 0x14, 0x8f, 0x6f, 0x46, 0x15, 0x4d, 0xf8, 0xb7, 0x80,
	0xac, 0xe2, 0x0e, 0x83, 0x11, 0xf7, 0xb8, 0x90, 0xac, 0x60, 0xb4, 0x20, 0xa5, 0x90, 0xfe, 0x46,
	0xa3, 0x60, 0x92, 0xaa, 0x10, 0xb8, 0x0b, 0xc8, 0x49, 0xa6, 0x10, 0x13, 0x50, 0x0a, 0x61, 0xad,
	0xb0, 0xba, 0x29, 0x84, 0x97, 0xe9, 0x01, 0x59, 0x53, 0x9a, 0x4b, 0xfd, 0x3c, 0x71, 0x15, 0x34,
	0x5d, 0x6b, 0x1f, 0xf2, 0x8e, 0x7f, 0xc8, 0x3b, 0xcf, 0xfd, 0x43, 0x1e, 0xcd, 0x8c, 0xe9, 0x87,
	0x64, 0x03, 0xc1, 0x7c, 0x5e, 0x48, 0x7c, 0xb7, 0xb1, 0xc6, 0x41, 0x34, 0xaf, 0x0c, 0xff, 0x5c,
	0x23, 0xeb, 0xd5, 0x5c, 0x5d, 0x7b, 0xb9, 0x76, 0x48, 0x63, 0xc0, 0x93, 0x14, 0xec, 0xdd, 0x6a,
	0x46, 0x4e, 0x32, 0xe0, 0x30, 0xb3, 0x08, 0xae, 0xfe, 0x76, 0x70, 0xa5, 0x71, 0xb5, 0xe8, 0x2b,
	0xf3, 0x45, 0xff, 0x90, 0x6c, 0xa0, 0x59, 0x09, 0x7b, 0xd5, 0xc2, 0x9e, 0x53, 0x96, 0x8d, 0xd4,
	0xa8, 0x34, 0xd2, 0x8c, 0x54, 0xdc, 0xa8, 0x92, 0x8a, 0xea, 0x68, 0x68, 0xce, 0x8d, 0x06, 0x83,
	0xff, 0x75, 0x01, 0x05, 0x20, 0xfe, 0xb5, 0xb7, 0xe3, 0x2f, 0x8d, 0xc3, 0x4f, 0xc8, 0x9a, 0x4d,
	0x58, 0x02, 0x8a, 0xde, 0x26, 0x2b, 0xaa, 0x98, 0xf8, 0xa1, 0x72, 0x7d, 0x0b, 0xa2, 0x45, 0xf8,
	0x75, 0x8d, 0xb4, 0x9e, 0x8a, 0x34, 0x8d, 0xe0, 0x75, 0x01, 0x4a, 0x57, 0xd3, 0x10, 0xcc, 0xa7,
	0xc1, 0x07, 0x58, 0xab, 0x04, 0x48, 0xc9, 0x4a, 0x2c, 0x45, 0xe6, 0x2f, 0xb8, 0xf9, 0x36, 0xbd,
	0x63, 0xc3, 0x04, 0xe5, 0x2f, 0xb8, 0x97, 0xe9, 0x8f, 0xc8, 0x7a, 0xca, 0x95, 0x3e, 0x96, 0x22,
	0xc3, 0x08, 0x1b, 0x6f, 0x8d, 0x70, 0xce, 0x9e, 0x1e, 0x13, 0x62, 0xe4, 0x47, 0x5c, 0x19, 0xef,
	0x37, 0x30, 0xba, 0xef, 0xf9, 0xe8, 0x2a, 0x61, 0x74, 0x4e, 0x4b, 0x2b, 0x3b, 0x3b, 0x2b, 0xdb,
	0xda, 0x9f, 0x92, 0xcd, 0x85, 0xe5, 0x6f, 0xf5, 0x02, 0xee, 0x93, 0x55, 0x73, 0x92, 0xa2, 0xdf,
	0x27, 0xab, 0xb9, 0xf9, 0x70, 0x59, 0xde, 0xbe, 0x06, 0x47, 0x64, 0x2d, 0xf6, 0xff, 0xba, 0x4d,
	0x5a, 0x0f, 0x0d, 0x83, 0x7e, 0x82, 0x0c, 0x9a, 0xfe, 0x31, 0x20, 0xad, 0x87, 0xa0, 0x4b, 0x26,
	0xb5, 0x73, 0x25, 0x03, 0xf7, 0x0d, 0x89, 0x6e, 0x5f, 0xc7, 0x10, 0xc3, 0xf1, 0xe5, 0x51, 0xaf,
	0xfd, 0x2c, 0x02, 0x5d, 0xc8, 0x4c, 0x31, 0x9e, 0xa6, 0xec, 0x8b, 0xe3, 0x1e, 0x8b, 0x8d, 0x23,
	0xa6, 0x47, 0x5c, 0x33, 0x4b, 0xd3, 0xd9, 0x88, 0x2b, 0xc6, 0xb3, 0x3e, 0x8b, 0x79, 0xc6, 0x0a,
	0x05, 0x6c, 0x20, 0x24, 0x8b, 0x47, 0x10, 0x8f, 0x93, 0x6c, 0xc8, 0x44, 0xa1, 0x59, 0x2c, 0xfa,
	0xc0, 0xb4, 0x60, 0xd8, 0x7c, 0x9d, 0x5f, 0x7f, 0xf3, 0x8f, 0xdf, 0xd7, 0x36, 0xe9, 0x46, 0xf7,
	0xfc, 0x5e, 0x17, 0x9d, 0x75, 0xcf, 0x63, 0x45, 0xff, 0x10, 0x90, 0x56, 0xaf, 0x82, 0xf4, 0x0a,
	0xf1, 0x6c, 0x2f, 0xc1, 0x1e, 0x7e, 0x75, 0x79, 0x74, 0xbf, 0x7d, 0x7c, 0xd4, 0xef, 0x33, 0xce,
	0x32, 0xb8, 0x28, 0x41, 0x42, 0x66, 0x1e, 0x51, 0x16, 0x8b, 0x6c, 0x90, 0x0c, 0xdd, 0xed, 0x31,
	0x28, 0x1c, 0x6a, 0x44, 0x69, 0x80, 0x21, 0x54, 0x51, 0x68, 0x0b, 0x8c, 0x86, 0xf3, 0xc0, 0x0e,
	0x83, 0x3b, 0xf4, 0x53, 0xb2, 0x76, 0x6c, 0x8c, 0x8e, 0x45, 0x96, 0x2d, 0x4d, 0xe1, 0x32, 0x78,
	0xef, 0xd0, 0x2f, 0xc9, 0x96, 0x8d, 0xec, 0xe9, 0x8c, 0xf3, 0xbe, 0x57, 0x4e, 0xdf, 0x2a, 0x8d,
	0x5e, 0xea, 0xe4, 0x7d, 0xc4, 0xb6, 0x13, 0xde, 0x9a, 0xc3, 0xd6, 0x55, 0x6a, 0x64, 0xf0, 0xbd,
	0x24, 0xeb, 0x0f, 0x41, 0xcf, 0xb8, 0xe3, 0x32, 0x88, 0xcb, 0x7e, 0x3d, 0x84, 0x3b, 0xe8, 0x7e,
	0x8b, 0xde, 0x9c, 0xb9, 0xc7, 0x6b, 0xf7, 0x9c, 0xac, 0xf7, 0xaa, 0x8e, 0xaf, 0x72, 0xd7, 0xa5,
	0x88, 0xff, 0x1f, 0x5d, 0x6e, 0x87, 0x0b, 0x2e, 0x0d, 0xdc, 0x67, 0x58, 0xe9, 0x92, 0xdd, 0x5d,
	0xa1, 0x5e, 0x4b, 0x7d, 0xee, 0x5e, 0xad, 0xd0, 0xf8, 0x00, 0x2b, 0xf4, 0x02, 0xdb, 0xbc, 0x74,
	0xf9, 0xd6, 0x04, 0x2c, 0x10, 0xc2, 0xf0, 0xbd, 0xab, 0x4d, 0x39, 0x3e, 0x50, 0x06, 0xe9, 0x43,
	0xd0, 0xfe, 0x77, 0xd9, 0xdb, 0xdd, 0x2e, 0xfc, 0x82, 0x0b, 0x6f, 0xa1, 0xdb, 0x16, 0x5d, 0x2b,
	0xdd, 0xd2, 0x53, 0xf7, 0xe8, 0x38, 0xfa, 0x43, 0xe9, 0xdc, 0xcc, 0x44, 0x96, 0xd7, 0xbe, 0x39,
	0x4f, 0xce, 0x7c, 0xdc, 0x74, 0xcb, 0xb8, 0xc1, 0x4b, 0x24, 0xdd, 0xee, 0x1f, 0x92, 0x95, 0x53,
	0x31, 0x54, 0xd7, 0x7a, 0x29, 0xa7, 0x71, 0x95, 0xb6, 0x84, 0xef, 0xdc, 0x0d, 0xe8, 0x13, 0xb2,
	0x65, 0x06, 0xd3, 0x03, 0xb8, 0x98, 0x4d, 0xf2, 0xed, 0x6a, 0x69, 0x1d, 0x69, 0x69, 0x97, 0xf5,
	0x2e, 0xed, 0xc2, 0x6d, 0xc4, 0xb2, 0x41, 0x5b, 0x06, 0x8b, 0x72, 0x2f, 0xe7, 0x5f, 0xea, 0x64,
	0xed, 0x21, 0x68, 0xc7, 0x4d, 0xb6, 0x2b, 0xcc, 0xc2, 0xb3, 0xe6, 0x59, 0x4c, 0x56, 0x19, 0xfe,
	0xa6, 0x7e, 0x79, 0xf4, 0xef, 0x5a, 0xfb, 0x9f, 0xb5, 0x72, 0x1f, 0xbb, 0x48, 0xd2, 0x94, 0x49,
	0x1c, 0x37, 0x4c, 0x8f, 0x80, 0x59, 0x8e, 0xc0, 0xc4, 0x80, 0x71, 0xa6, 0x72, 0x88, 0x93, 0x41,
	0x12, 0xbb, 0x19, 0xc2, 0x1e, 0x25, 0x20, 0xb9, 0x8c, 0x47, 0x53, 0xbc, 0xc7, 0x63, 0x98, 0x9a,
	0x9b, 0x9d, 0x0a, 0x31, 0x2e, 0x72, 0x76, 0x91, 0xe8, 0xd1, 0x21, 0x4b, 0x06, 0x66, 0x30, 0x8d,
	0x98, 0x2a, 0xf2, 0x3c, 0x4d, 0xa0, 0xbf, 0x67, 0xfd, 0x8b, 0x2c, 0x9d, 0x32, 0x05, 0x66, 0x2f,
	0x3b, 0x9b, 0xa2, 0x49, 0x87, 0x9d, 0x0c, 0x98, 0xe7, 0x86, 0x38, 0xc9, 0x3c, 0x19, 0x64, 0x5c,
	0x42, 0xe9, 0x00, 0x57, 0x32, 0x3b, 0xef, 0x46, 0x7b, 0x2c, 0xd1, 0xd6, 0xe1, 0x19, 0x98, 0xa1,
	0xd7, 0x67, 0x66, 0x08, 0x22, 0x10, 0x03, 0xc8, 0x20, 0x31, 0xd3, 0xaf, 0xc8, 0x5d, 0x14, 0x78,
	0x06, 0x9e, 0x5d, 0x21, 0xf7, 0x2c, 0x51, 0x6c, 0x98, 0x9c, 0x43, 0xc6, 0x12, 0x1b, 0xb1, 0xb4,
	0xd3, 0x7c, 0xcf, 0xcf, 0x28, 0x3c, 0x80, 0x6b, 0x0d, 0x93, 0x5c, 0x9b, 0x00, 0x07, 0x49, 0x66,
	0xa6, 0xdc, 0x84, 0xeb, 0x78, 0xe4, 0x80, 0x96, 0xd9, 0x4a, 0xb9, 0x06, 0xa5, 0x6d, 0x7e, 0x18,
	0x32, 0x1d, 0xd6, 0x07, 0xcd, 0x93, 0x54, 0x21, 0x22, 0x33, 0xb0, 0xed, 0x84, 0x5b, 0xa7, 0x04,
	0x6b, 0x67, 0x8b, 0xf5, 0x26, 0x20, 0x6b, 0x2f, 0x8d, 0x3f, 0xfc, 0x8f, 0xc5, 0xb5, 0x5d, 0xb0,
	0xec, 0x3a, 0xfe, 0xf2, 0xf2, 0x08, 0xda, 0xf1, 0x05, 0x82, 0x41, 0xa4, 0x0a, 0xb4, 0x89, 0x98,
	0xb3, 0x0b, 0x38, 0x1b, 0x09, 0x31, 0x76, 0x07, 0x83, 0x0b, 0xd2, 0x64, 0xb5, 0xeb, 0x5e, 0xf9,
	0xce, 0x9c, 0xc4, 0x06, 0x09, 0xa4, 0x7d, 0x85, 0xf1, 0x27, 0xd2, 0xd4, 0x0a, 0x09, 0xaf, 0xc9,
	0x4f, 0x26, 0x1c, 0xec, 0x9b, 0x21, 0xde, 0x22, 0x3c, 0xce, 0x5c, 0xf9, 0x3f, 0xd5, 0xfc, 0x0f,
	0x09, 0x03, 0x35, 0xeb, 0x9b, 0x67, 0x76, 0x36, 0x4b, 0xfc, 0xff, 0x67, 0x96, 0xdc, 0x82, 0x7f,
	0x05, 0x97, 0x47, 0x7f, 0x0f, 0xda, 0xdf, 0x04, 0x36, 0x5d, 0x8b, 0x79, 0xd6, 0x32, 0x19, 0x0e,
	0x41, 0x32, 0xee, 0xdb, 0xed, 0x64, 0xe0, 0xe2, 0xb0, 0xd5, 0xb7, 0x4f, 0x5e, 0x2a, 0x81, 0xf7,
	0xa7, 0xec, 0x0c, 0x20, 0x43, 0x3b, 0xcd, 0xce, 0x60, 0x20, 0x24, 0x60, 0x6f, 0x98, 0xc7, 0xf0,
	0x0c, 0xbc, 0x27, 0xe8, 0x63, 0x57, 0xb2, 0x57, 0x85, 0xd2, 0xcc, 0xff, 0x7f, 0x08, 0x2b, 0x88,
	0xee, 0x6c, 0xf8, 0x78, 0x8c, 0x3d, 0x01, 0xfb, 0xec, 0x1a, 0xc7, 0x06, 0x84, 0x25, 0x39, 0x6c,
	0x90, 0xf2, 0xa1, 0x49, 0x90, 0xcf, 0x99, 0x69, 0xc0, 0x0b, 0x48, 0xd3, 0xb9, 0x6c, 0x21, 0xfc,
	0xc3, 0xe0, 0xce, 0xdd, 0x80, 0x7e, 0x1d, 0x90, 0xa6, 0x65, 0x0c, 0xd5, 0x3a, 0x57, 0x38, 0xc4,
	0xd2, 0x3a, 0x9f, 0x5f, 0x1e, 0x7d, 0xd5, 0xfe, 0xb9, 0x21, 0x18, 0x0b, 0x65, 0x36, 0x2a, 0xd3,
	0xe5, 0xae, 0x6d, 0x3b, 0xcc, 0x95, 0x73, 0x0f, 0x8b, 0xbb, 0xc7, 0x0c, 0x4d, 0xdb, 0xc3, 0x28,
	0x3d, 0x31, 0xc3, 0x0b, 0xc5, 0xf1, 0x9a, 0x3b, 0xd4, 0x2e, 0x74, 0x3b, 0x55, 0xc2, 0xa6, 0x01,
	0x6d, 0xdc, 0x9a, 0x0a, 0x3f, 0x21, 0x37, 0x3f, 0x87, 0x14, 0x34, 0xfc, 0x6f, 0xb0, 0xb7, 0xd0,
	0x27, 0xb9, 0x53, 0xfa, 0xa4, 0x3f, 0x25, 0x9b, 0xa7, 0x89, 0xd2, 0x66, 0x33, 0x60, 0xdb, 0x2c,
	0x1f, 0xe9, 0x1b, 0xd5, 0x93, 0x94, 0xf7, 0x45, 0x67, 0xbe, 0x9e, 0x12, 0xf2, 0x20, 0xc9, 0xfa,
	0x2f, 0x41, 0x8e, 0x41, 0x5e, 0xd3, 0x77, 0x4b, 0x7f, 0x0c, 0xcf, 0x3f, 0xb6, 0x17, 0xb8, 0xbf,
	0x9b, 0x8a, 0xf8, 0xb3, 0xec, 0xf2, 0x68, 0x4c, 0x8f, 0xc8, 0x36, 0xf2, 0x37, 0x66, 0x09, 0x1c,
	0xeb, 0x81, 0x3c, 0x07, 0x19, 0x7e, 0x44, 0x5a, 0xaf, 0x40, 0xa9, 0x84, 0xa9, 0x11, 0xcf, 0xc6,
	0xed, 0x1d, 0x14, 0xf0, 0xfb, 0x27, 0x29, 0x9c, 0x43, 0x7a, 0xef, 0x5e, 0x27, 0x16, 0x93, 0xfd,
	0xfa, 0xbd, 0xce, 0xdd, 0x3b, 0xb5, 0xa0, 0xb6, 0xbf, 0xc5, 0xcd, 0xcc, 0x8a, 0x91, 0xf3, 0x74,
	0x5f, 0x29, 0x91, 0x1d, 0x5e, 0xd1, 0x9c, 0x35, 0x30, 0xe4, 0x1f, 0xfc, 0x27, 0x00, 0x00, 0xff,
	0xff, 0xc0, 0x8b, 0x0d, 0x61, 0x73, 0x15, 0x00, 0x00,
}
