// Code generated by protoc-gen-go. DO NOT EDIT.
// source: webhook.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RepoPush struct {
	User             string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	RepoLink         string `protobuf:"bytes,2,opt,name=RepoLink" json:"RepoLink,omitempty"`
	LastHash         string `protobuf:"bytes,3,opt,name=LastHash" json:"LastHash,omitempty"`
	IdentifierType   string `protobuf:"bytes,4,opt,name=IdentifierType" json:"IdentifierType,omitempty"`
	IdentifierString string `protobuf:"bytes,5,opt,name=IdentifierString" json:"IdentifierString,omitempty"`
	CommitTime       int64  `protobuf:"varint,6,opt,name=CommitTime" json:"CommitTime,omitempty"`
}

func (m *RepoPush) Reset()                    { *m = RepoPush{} }
func (m *RepoPush) String() string            { return proto.CompactTextString(m) }
func (*RepoPush) ProtoMessage()               {}
func (*RepoPush) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *RepoPush) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *RepoPush) GetRepoLink() string {
	if m != nil {
		return m.RepoLink
	}
	return ""
}

func (m *RepoPush) GetLastHash() string {
	if m != nil {
		return m.LastHash
	}
	return ""
}

func (m *RepoPush) GetIdentifierType() string {
	if m != nil {
		return m.IdentifierType
	}
	return ""
}

func (m *RepoPush) GetIdentifierString() string {
	if m != nil {
		return m.IdentifierString
	}
	return ""
}

func (m *RepoPush) GetCommitTime() int64 {
	if m != nil {
		return m.CommitTime
	}
	return 0
}

func init() {
	proto.RegisterType((*RepoPush)(nil), "protos.RepoPush")
}

func init() { proto.RegisterFile("webhook.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4f, 0x4d, 0xca,
	0xc8, 0xcf, 0xcf, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0x53, 0xc5, 0x4a, 0xa7,
	0x18, 0xb9, 0x38, 0x82, 0x52, 0x0b, 0xf2, 0x03, 0x4a, 0x8b, 0x33, 0x84, 0x84, 0xb8, 0x58, 0x42,
	0x8b, 0x53, 0x8b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21, 0x29, 0x88, 0xbc,
	0x4f, 0x66, 0x5e, 0xb6, 0x04, 0x13, 0x58, 0x1c, 0xce, 0x07, 0xc9, 0xf9, 0x24, 0x16, 0x97, 0x78,
	0x24, 0x16, 0x67, 0x48, 0x30, 0x43, 0xe4, 0x60, 0x7c, 0x21, 0x35, 0x2e, 0x3e, 0xcf, 0x94, 0xd4,
	0xbc, 0x92, 0xcc, 0xb4, 0xcc, 0xd4, 0xa2, 0x90, 0xca, 0x82, 0x54, 0x09, 0x16, 0xb0, 0x0a, 0x34,
	0x51, 0x21, 0x2d, 0x2e, 0x01, 0x84, 0x48, 0x70, 0x49, 0x51, 0x66, 0x5e, 0xba, 0x04, 0x2b, 0x58,
	0x25, 0x86, 0xb8, 0x90, 0x1c, 0x17, 0x97, 0x73, 0x7e, 0x6e, 0x6e, 0x66, 0x49, 0x48, 0x66, 0x6e,
	0xaa, 0x04, 0x9b, 0x02, 0xa3, 0x06, 0x73, 0x10, 0x92, 0x48, 0x12, 0xc4, 0x53, 0xc6, 0x80, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xcd, 0x42, 0xcd, 0x94, 0xec, 0x00, 0x00, 0x00,
}
